<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Flex布局</title>
    <url>/2017/10/23/Flex%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h2 id="Flex-布局是什么？"><a href="#Flex-布局是什么？" class="headerlink" title="Flex 布局是什么？"></a>Flex 布局是什么？</h2><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br>任何一个容器都可以指定为 Flex 布局。</p>
<span id="more"></span>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>行内元素也可以使用 Flex 布局。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Webkit 内核的浏览器，必须加上<code>-webkit</code>前缀。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，设为 Flex 布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p>
</blockquote>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p>
<p><img src="http://oy9tlpm12.bkt.clouddn.com/bg2015071004.png"></p>
]]></content>
  </entry>
  <entry>
    <title>Hexo博客从一台电脑迁移到其他电脑</title>
    <url>/2017/10/23/Hexo%E5%8D%9A%E5%AE%A2%E4%BB%8E%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E8%BF%81%E7%A7%BB%E5%88%B0%E5%85%B6%E4%BB%96%E7%94%B5%E8%84%91/</url>
    <content><![CDATA[<p>hexo官方给了一些迁移的方法，不过它上面介绍的方法都是把博客文章从hexo系统迁移到其他博客系统的方法。然而我们这里要讨论的是：</p>
<p>当我们更换电脑的时候我们应该怎么办？</p>
<p>所以默认你已经成功利用hexo和github发布博客，如果还没有，可以看一下<a href="http://lixiaolai.com/2016/06/22/makecs-build-a-blog-with-hexo-on-github/">教程</a></p>
<p>具体的思路是：在生成的已经推到github上的hexo静态代码出建立一个分支，利用这个分支来管理自己hexo的源文件。</p>
<span id="more"></span>

<p>如果能在刚刚配置hexo的时候就想好以后的迁移的问题就太好了，可以省掉很多麻烦，可实际使用中，刚刚配置hexo的时候，好多人都是初学，不会想到以后的问题，我就是这样的。</p>
<p>具体的操作：</p>
<p>克隆gitHub上面生成的静态文件到本地</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git clone <span class="attr">https</span>:<span class="comment">//github.com/yourname/hexo-test.github.io.git</span></span><br></pre></td></tr></table></figure>
<p>把克隆到本地的文件除了git的文件都删掉，找不到git的文件的话就到删了吧。不要用<code>hexo init</code>初始化。</p>
<p>将之前使用hexo写博客时候的整个目录（所有文件）搬过来。把该忽略的文件忽略了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch .gitignore</span><br></pre></td></tr></table></figure>
<p>创建一个叫hexo的分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b hexo</span><br></pre></td></tr></table></figure>
<p>提交复制过来的文件到暂存区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add --all</span><br></pre></td></tr></table></figure>
<p>提交</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;新建分支源文件&quot;</span><br></pre></td></tr></table></figure>
<p>推送分支到github</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push --set-upstream origin hexo</span><br></pre></td></tr></table></figure>
<p>到这里基本上就搞定了，以后再推就可以直接git push了，hexo的操作跟以前一样。</p>
<p>今后无论什么时候想要在其他电脑上面用hexo写博客，就直接把创建的分支克隆下来，<code>npm install</code>安装依赖之后就可以用了。</p>
<p>克隆分支的操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b hexo https://github.com/yourname/hexo-test.github.io.git</span><br></pre></td></tr></table></figure>
<p>因为上面创建的是一个名字叫hexo的分支，所以这里-b后面的是hexo，再把后面的gitHub的地址换成你自己的hexo博客的地址就可以了。</p>
<p>这样做完了以后，每次写完博客发布之后不要忘了还要git push把源文件推到分支上。</p>
]]></content>
      <tags>
        <tag>hexo本地更新</tag>
      </tags>
  </entry>
  <entry>
    <title>JS常用原生函数汇总</title>
    <url>/2017/11/09/JS%E5%B8%B8%E7%94%A8%E5%8E%9F%E7%94%9F%E5%87%BD%E6%95%B0%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>工作中经常用到的方法。</p>
<span id="more"></span>

<h2 id="type-类型判断"><a href="#type-类型判断" class="headerlink" title="type 类型判断"></a>type 类型判断</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">isString</span> (o) &#123; <span class="comment">//是否字符串</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;String&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">isNumber</span> (o) &#123; <span class="comment">//是否数字</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Number&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">isObj</span> (o) &#123; <span class="comment">//是否对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Object&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">isArray</span> (o) &#123; <span class="comment">//是否数组</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Array&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">isDate</span> (o) &#123; <span class="comment">//是否时间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Date&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">isBoolean</span> (o) &#123; <span class="comment">//是否boolean</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Boolean&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">isFunction</span> (o) &#123; <span class="comment">//是否函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Function&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">isNull</span> (o) &#123; <span class="comment">//是否为null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Null&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">isUndefined</span> (o) &#123; <span class="comment">//是否undefined</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Undefined&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">isFalse</span> (o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!o || o === <span class="string">&#x27;null&#x27;</span> || o === <span class="string">&#x27;undefined&#x27;</span> || o === <span class="string">&#x27;false&#x27;</span> || o === <span class="string">&#x27;NaN&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">isTrue</span> (o) &#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="title function_">isFalse</span>(o)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">isIos</span> () &#123;</span><br><span class="line">    <span class="keyword">var</span> u = navigator.<span class="property">userAgent</span>;</span><br><span class="line">    <span class="keyword">if</span> (u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Android&#x27;</span>) &gt; -<span class="number">1</span> || u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Linux&#x27;</span>) &gt; -<span class="number">1</span>) &#123;<span class="comment">//安卓手机</span></span><br><span class="line">        <span class="comment">// return &quot;Android&quot;;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (u.<span class="title function_">indexOf</span>(<span class="string">&#x27;iPhone&#x27;</span>) &gt; -<span class="number">1</span>) &#123;<span class="comment">//苹果手机</span></span><br><span class="line">        <span class="comment">// return &quot;iPhone&quot;;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (u.<span class="title function_">indexOf</span>(<span class="string">&#x27;iPad&#x27;</span>) &gt; -<span class="number">1</span>) &#123;<span class="comment">//iPad</span></span><br><span class="line">        <span class="comment">// return &quot;iPad&quot;;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Windows Phone&#x27;</span>) &gt; -<span class="number">1</span>) &#123;<span class="comment">//winphone手机</span></span><br><span class="line">        <span class="comment">// return &quot;Windows Phone&quot;;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">isPC</span> () &#123; <span class="comment">//是否为PC端</span></span><br><span class="line">    <span class="keyword">var</span> userAgentInfo = navigator.<span class="property">userAgent</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Agents</span> = [<span class="string">&quot;Android&quot;</span>, <span class="string">&quot;iPhone&quot;</span>,</span><br><span class="line">                <span class="string">&quot;SymbianOS&quot;</span>, <span class="string">&quot;Windows Phone&quot;</span>,</span><br><span class="line">                <span class="string">&quot;iPad&quot;</span>, <span class="string">&quot;iPod&quot;</span>];</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> v = <span class="number">0</span>; v &lt; <span class="title class_">Agents</span>.<span class="property">length</span>; v++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (userAgentInfo.<span class="title function_">indexOf</span>(<span class="title class_">Agents</span>[v]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">browserType</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> userAgent = navigator.<span class="property">userAgent</span>; <span class="comment">//取得浏览器的userAgent字符串</span></span><br><span class="line">    <span class="keyword">var</span> isOpera = userAgent.<span class="title function_">indexOf</span>(<span class="string">&quot;Opera&quot;</span>) &gt; -<span class="number">1</span>; <span class="comment">//判断是否Opera浏览器</span></span><br><span class="line">    <span class="keyword">var</span> isIE = userAgent.<span class="title function_">indexOf</span>(<span class="string">&quot;compatible&quot;</span>) &gt; -<span class="number">1</span> &amp;&amp; userAgent.<span class="title function_">indexOf</span>(<span class="string">&quot;MSIE&quot;</span>) &gt; -<span class="number">1</span> &amp;&amp; !isOpera; <span class="comment">//判断是否IE浏览器</span></span><br><span class="line">    <span class="keyword">var</span> isEdge = userAgent.<span class="title function_">indexOf</span>(<span class="string">&quot;Edge&quot;</span>) &gt; -<span class="number">1</span>; <span class="comment">//判断是否IE的Edge浏览器</span></span><br><span class="line">    <span class="keyword">var</span> isFF = userAgent.<span class="title function_">indexOf</span>(<span class="string">&quot;Firefox&quot;</span>) &gt; -<span class="number">1</span>; <span class="comment">//判断是否Firefox浏览器</span></span><br><span class="line">    <span class="keyword">var</span> isSafari = userAgent.<span class="title function_">indexOf</span>(<span class="string">&quot;Safari&quot;</span>) &gt; -<span class="number">1</span> &amp;&amp; userAgent.<span class="title function_">indexOf</span>(<span class="string">&quot;Chrome&quot;</span>) == -<span class="number">1</span>; <span class="comment">//判断是否Safari浏览器</span></span><br><span class="line">    <span class="keyword">var</span> isChrome = userAgent.<span class="title function_">indexOf</span>(<span class="string">&quot;Chrome&quot;</span>) &gt; -<span class="number">1</span> &amp;&amp; userAgent.<span class="title function_">indexOf</span>(<span class="string">&quot;Safari&quot;</span>) &gt; -<span class="number">1</span>; <span class="comment">//判断Chrome浏览器</span></span><br><span class="line">    <span class="keyword">if</span> (isIE) &#123;</span><br><span class="line">        <span class="keyword">var</span> reIE = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;MSIE (\\d+\\.\\d+);&quot;</span>);</span><br><span class="line">        reIE.<span class="title function_">test</span>(userAgent);</span><br><span class="line">        <span class="keyword">var</span> fIEVersion = <span class="built_in">parseFloat</span>(<span class="title class_">RegExp</span>[<span class="string">&quot;$1&quot;</span>]);</span><br><span class="line">        <span class="keyword">if</span>(fIEVersion == <span class="number">7</span>) <span class="keyword">return</span> <span class="string">&quot;IE7&quot;</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(fIEVersion == <span class="number">8</span>) <span class="keyword">return</span> <span class="string">&quot;IE8&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(fIEVersion == <span class="number">9</span>) <span class="keyword">return</span> <span class="string">&quot;IE9&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(fIEVersion == <span class="number">10</span>) <span class="keyword">return</span> <span class="string">&quot;IE10&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(fIEVersion == <span class="number">11</span>) <span class="keyword">return</span> <span class="string">&quot;IE11&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">&quot;IE7以下&quot;</span><span class="comment">//IE版本过低</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isFF) <span class="keyword">return</span> <span class="string">&quot;FF&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (isOpera) <span class="keyword">return</span> <span class="string">&quot;Opera&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (isEdge) <span class="keyword">return</span> <span class="string">&quot;Edge&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (isSafari) <span class="keyword">return</span> <span class="string">&quot;Safari&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (isChrome) <span class="keyword">return</span> <span class="string">&quot;Chrome&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">checkStr</span> (str, type) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;phone&#x27;</span>:   <span class="comment">//手机号码</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^1[3|4|5|7|8][0-9]&#123;9&#125;$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;tel&#x27;</span>:     <span class="comment">//座机</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^(0\d&#123;2,3&#125;-\d&#123;7,8&#125;)(-\d&#123;1,4&#125;)?$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;card&#x27;</span>:    <span class="comment">//身份证</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;pwd&#x27;</span>:     <span class="comment">//密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[a-zA-Z]\w&#123;5,17&#125;$/</span>.<span class="title function_">test</span>(str)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;postal&#x27;</span>:  <span class="comment">//邮政编码</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/[1-9]\d&#123;5&#125;(?!\d)/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;QQ&#x27;</span>:      <span class="comment">//QQ号</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[1-9][0-9]&#123;4,9&#125;$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;email&#x27;</span>:   <span class="comment">//邮箱</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;money&#x27;</span>:   <span class="comment">//金额(小数点2位)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^\d*(?:\.\d&#123;0,2&#125;)?$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;URL&#x27;</span>:     <span class="comment">//网址</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])?/</span>.<span class="title function_">test</span>(str)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;IP&#x27;</span>:      <span class="comment">//IP</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;date&#x27;</span>:    <span class="comment">//日期时间</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^(\d&#123;4&#125;)\-(\d&#123;2&#125;)\-(\d&#123;2&#125;) (\d&#123;2&#125;)(?:\:\d&#123;2&#125;|:(\d&#123;2&#125;):(\d&#123;2&#125;))$/</span>.<span class="title function_">test</span>(str) || <span class="regexp">/^(\d&#123;4&#125;)\-(\d&#123;2&#125;)\-(\d&#123;2&#125;)$/</span>.<span class="title function_">test</span>(str)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;number&#x27;</span>:  <span class="comment">//数字</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[0-9]$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;english&#x27;</span>: <span class="comment">//英文</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[a-zA-Z]+$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;chinese&#x27;</span>: <span class="comment">//中文</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[\u4E00-\u9FA5]+$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;lower&#x27;</span>:   <span class="comment">//小写</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[a-z]+$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;upper&#x27;</span>:   <span class="comment">//大写</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[A-Z]+$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;HTML&#x27;</span>:    <span class="comment">//HTML标记</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/&lt;(&quot;[^&quot;]*&quot;|&#x27;[^&#x27;]*&#x27;|[^&#x27;&quot;&gt;])*&gt;/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 格式化时间</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  &#123;<span class="type">time</span>&#125; 时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  &#123;<span class="type">cFormat</span>&#125; 格式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">String</span>&#125; 字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example</span> formatTime(&#x27;2018-1-29&#x27;, &#x27;&#123;y&#125;/&#123;m&#125;/&#123;d&#125; &#123;h&#125;:&#123;i&#125;:&#123;s&#125;&#x27;) // -&gt; 2018/01/29 00:00:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formatTime</span>(<span class="params">time, cFormat</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> ((time + <span class="string">&#x27;&#x27;</span>).<span class="property">length</span> === <span class="number">10</span>) &#123;</span><br><span class="line">        time = +time * <span class="number">1000</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> format = cFormat || <span class="string">&#x27;&#123;y&#125;-&#123;m&#125;-&#123;d&#125; &#123;h&#125;:&#123;i&#125;:&#123;s&#125;&#x27;</span>, date</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> time === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        date = time</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        date = <span class="keyword">new</span> <span class="title class_">Date</span>(time)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> formatObj = &#123;</span><br><span class="line">        <span class="attr">y</span>: date.<span class="title function_">getFullYear</span>(),</span><br><span class="line">        <span class="attr">m</span>: date.<span class="title function_">getMonth</span>() + <span class="number">1</span>,</span><br><span class="line">        <span class="attr">d</span>: date.<span class="title function_">getDate</span>(),</span><br><span class="line">        <span class="attr">h</span>: date.<span class="title function_">getHours</span>(),</span><br><span class="line">        <span class="attr">i</span>: date.<span class="title function_">getMinutes</span>(),</span><br><span class="line">        <span class="attr">s</span>: date.<span class="title function_">getSeconds</span>(),</span><br><span class="line">        <span class="attr">a</span>: date.<span class="title function_">getDay</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> time_str = format.<span class="title function_">replace</span>(<span class="regexp">/&#123;(y|m|d|h|i|s|a)+&#125;/g</span>, <span class="function">(<span class="params">result, key</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> value = formatObj[key]</span><br><span class="line">        <span class="keyword">if</span> (key === <span class="string">&#x27;a&#x27;</span>) <span class="keyword">return</span> [<span class="string">&#x27;一&#x27;</span>, <span class="string">&#x27;二&#x27;</span>, <span class="string">&#x27;三&#x27;</span>, <span class="string">&#x27;四&#x27;</span>, <span class="string">&#x27;五&#x27;</span>, <span class="string">&#x27;六&#x27;</span>, <span class="string">&#x27;日&#x27;</span>][value - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> (result.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; value &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            value = <span class="string">&#x27;0&#x27;</span> + value</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value || <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> time_str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*判断一个元素是否在数组中*/</span></span><br><span class="line"><span class="title function_">contains</span> (arr, val) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(val) != -<span class="number">1</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="获取url参数"><a href="#获取url参数" class="headerlink" title="获取url参数"></a>获取url参数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getQueryString</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;(^|&amp;)&quot;</span> + name + <span class="string">&quot;=([^&amp;]*)(&amp;|$)&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> r = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>).<span class="title function_">match</span>(reg);</span><br><span class="line">  <span class="keyword">if</span> (r != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]); <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="简单去抖函数"><a href="#简单去抖函数" class="headerlink" title="简单去抖函数"></a>简单去抖函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">time, fn</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ctx = <span class="variable language_">this</span>,</span><br><span class="line">        args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(ctx, args)</span><br><span class="line">    &#125;, time)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>原生函数</tag>
        <tag>实用</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用操作命令</title>
    <url>/2017/10/31/Git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="git-分支操作"><a href="#git-分支操作" class="headerlink" title="git 分支操作"></a>git 分支操作</h2><h3 id="查看本地分支"><a href="#查看本地分支" class="headerlink" title="查看本地分支"></a>查看本地分支</h3><p><code>git branch</code></p>
<h3 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h3><p><code>git branch -a</code></p>
<h3 id="创建本地分支"><a href="#创建本地分支" class="headerlink" title="创建本地分支"></a>创建本地分支</h3><p><code>git branch (br)</code></p>
<span id="more"></span>

<h3 id="把分支推到远程分支"><a href="#把分支推到远程分支" class="headerlink" title="把分支推到远程分支"></a>把分支推到远程分支</h3><p><code>git push origin (br)</code></p>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><p><code>git checkout (br)</code></p>
<h3 id="git-删除本地分支"><a href="#git-删除本地分支" class="headerlink" title="git 删除本地分支"></a>git 删除本地分支</h3><p><code>git branch -D (br)</code></p>
<h3 id="git-删除远程分支"><a href="#git-删除远程分支" class="headerlink" title="git 删除远程分支"></a>git 删除远程分支</h3><p><code>git push origin :br  (origin 后面有空格)</code></p>
<h3 id="git代码库回滚-指的是将代码库某分支退回到以前的某个commit-id"><a href="#git代码库回滚-指的是将代码库某分支退回到以前的某个commit-id" class="headerlink" title="git代码库回滚: 指的是将代码库某分支退回到以前的某个commit id"></a>git代码库回滚: 指的是将代码库某分支退回到以前的某个commit id</h3><h4 id="本地代码库回滚"><a href="#本地代码库回滚" class="headerlink" title="本地代码库回滚"></a>本地代码库回滚</h4><p><code>git reset --hard commit-id :回滚到commit-id，讲commit-id之后提交的commit都去除</code><br><code>git reset --hard HEAD~3：将最近3次的提交回滚</code></p>
<h4 id="远程代码库回滚"><a href="#远程代码库回滚" class="headerlink" title="远程代码库回滚"></a>远程代码库回滚</h4><p>应用场景：自动部署系统发布后发现问题，需要回滚到某一个commit，再重新发布</p>
<p>原理：先将本地分支退回到某个commit，删除远程分支，再重新push本地分支</p>
<p>操作步骤：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、git checkout the_branch</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、git pull</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、git branch the_branch_backup <span class="comment">//备份一下这个分支当前的情况</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、git reset --hard the_commit_id <span class="comment">//把the_branch本地回滚到the_commit_id</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、git push origin :the_branch <span class="comment">//删除远程 the_branch</span></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、git push origin the_branch <span class="comment">//用回滚后的本地分支重新建立远程分支</span></span><br><span class="line"></span><br><span class="line"><span class="number">7</span>、git push origin :the_branch_backup <span class="comment">//如果前面都成功了，删除这个备份分支</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果使用了gerrit做远程代码中心库和code review平台，需要确保操作git的用户具备分支的push权限，并且选择了 Force Push选项（在push权限设置里有这个选项）</p>
<p>另外，gerrit中心库是个bare库，将HEAD默认指向了master，因此master分支是不能进行删除操作的，最好不要选择删除master分支的策略，换用其他分支。如果一定要这样做，可以考虑到gerrit服务器上修改HEAD指针。。。不建议这样搞</p>
<p>转载自：<a href="http://www.cnblogs.com/hqbhonker/p/5092300.html">http://www.cnblogs.com/hqbhonker/p/5092300.html</a></p>
<h2 id="git删除远程仓库文件或目录"><a href="#git删除远程仓库文件或目录" class="headerlink" title="git删除远程仓库文件或目录"></a>git删除远程仓库文件或目录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">git rm --cached ./file.txt //删除目录下的file.txt文件</span><br><span class="line"></span><br><span class="line">git rm -r --cached folder  //删除目录folder</span><br><span class="line"></span><br><span class="line">git commit -m &quot;删除操作&quot;</span><br><span class="line"></span><br><span class="line">git push</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Git</tag>
        <tag>Git命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令集合</title>
    <url>/2017/10/23/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h1 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h1><h2 id="添加nginx网站"><a href="#添加nginx网站" class="headerlink" title="添加nginx网站"></a>添加nginx网站</h2><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>关闭虚拟机防火墙：</p>
<p>关闭命令： <code> service iptables stop</code></p>
<p>永久关闭防火墙：<code>chkconfig iptables off</code></p>
<p>两个命令同时运行，运行完成后查看防火墙关闭状态<br><code>service iptables status</code></p>
<ul>
<li>关闭防火墙—–<code>service iptables stop </code></li>
<li>启动防火墙—–<code>service iptables start </code></li>
<li>重启防火墙—–<code>service iptables restart</code> </li>
<li>查看防火墙状态–<code>service iptables status </code></li>
<li>永久关闭防火墙–<code>chkconfig iptables off</code> </li>
<li>永久关闭后启用–<code>chkconfig iptables on</code></li>
</ul>
]]></content>
      <tags>
        <tag>服务器配置</tag>
        <tag>linux</tag>
        <tag>后台</tag>
      </tags>
  </entry>
  <entry>
    <title>RBAC权限模型-java学习笔记(6)</title>
    <url>/2024/12/28/RBAC%E6%9D%83%E9%99%90%E6%A8%A1%E5%9E%8B-java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-6/</url>
    <content><![CDATA[<p>由于所有的管理系统都少不了权限管理，所以我们先学习RBAC权限模型的相关知识，然后给后端项目配置SaToken认证与授权框架。</p>
<h2 id="RBAC权限模型"><a href="#RBAC权限模型" class="headerlink" title="RBAC权限模型"></a>RBAC权限模型</h2><p>RBAC（Role-Based Access Control，基于角色的访问控制）是一种常见的权限管理模型，它通过将权限与角色关联，来实现对用户访问资源的控制。</p>
<p>RBAC模型将权限分为以下几种：</p>
<ul>
<li>角色（Role）：一组权限的集合。</li>
<li>权限（Permission）：对资源的操作。</li>
<li>用户（User）：拥有角色和权限的人。</li>
</ul>
<span id="more"></span>

<p>RBAC的基本思想是，对系统操作的各种权限不是直接授予具体的用户，而是在用户集合与权限集合之间建立一个角色集合。每一种角色对应一组相应的权限。一旦用户被分配了适当的角色后，该用户就拥有此角色的所有操作权限。这样做的好处是，不必在每次创建用户时都进行分配权限的操作，只要分配用户相应的角色即可，而且角色的权限变更比用户的权限变更要少得多，这样将简化用户的权限管理，减少系统的开销。</p>
<img src="/2024/12/28/RBAC%E6%9D%83%E9%99%90%E6%A8%A1%E5%9E%8B-java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-6/image1.png" class="">

<p>RBAC模型中的权限是由模块和行为合并在一起而产生的，在MySQL中，有tb_module(模块表)和tb_action(行为表)。这两张表的记录合并在一起就形成了权限记录，保存在tb_permission(权限表)中。</p>
<img src="/2024/12/28/RBAC%E6%9D%83%E9%99%90%E6%A8%A1%E5%9E%8B-java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-6/image2.png" class="">

<p>现在知道了权限记录是怎么来的，下面我们看看怎么把权限关联到角色中。传统一点的做法是创建一个交叉表，记录角色拥有什么权限。MySQL5.7之后引入了JSON数据类型，所以我在tbrole(角色表)设置的permissions字段，类型是JSON格式的，到目前为止，JSON类型已经支持索引机制，所以我们不用担心存放在JSON字段中的数据检索速度慢了。MVSQL为JSON类型配备了很多函数，我们可以很方便的读写JSON字段中的数据。</p>
<img src="/2024/12/28/RBAC%E6%9D%83%E9%99%90%E6%A8%A1%E5%9E%8B-java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-6/image3.png" class="">

<p>接下来我们看看角色是怎么关联到用户的，其实我在tb_user(用户表)上面设置role字段，类型依旧是JSON的。<br>这样我就可以把多个角色关联到某个用户身上了。</p>
<img src="/2024/12/28/RBAC%E6%9D%83%E9%99%90%E6%A8%A1%E5%9E%8B-java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-6/image4.png" class="">

<h2 id="如何查询用户的权限列表"><a href="#如何查询用户的权限列表" class="headerlink" title="如何查询用户的权限列表?"></a>如何查询用户的权限列表?</h2><p>如果我们想要查询某位用户拥有什么权限应该怎么写SQL语句?下面的SQL语句利用表连接的方式，先查询用户具备什么角色，然后查询这些角色具有什么权限。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p.permission_name</span><br><span class="line"><span class="keyword">FROM</span> tb_user u</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> tb_role r <span class="keyword">ON</span> JSON_CONTAINS(u.role, <span class="built_in">CAST</span>(r.id <span class="keyword">AS</span> <span class="type">CHAR</span>(<span class="number">255</span>)))</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> tb_permission p <span class="keyword">ON</span> JSON_CONTAINS(r.permissions, <span class="built_in">CAST</span>(p.id <span class="keyword">AS</span> <span class="type">CHAR</span>(<span class="number">255</span>)))</span><br><span class="line"><span class="keyword">WHERE</span> u.id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> u.status <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="编写持久层代码"><a href="#编写持久层代码" class="headerlink" title="编写持久层代码"></a>编写持久层代码</h2><p>SaToken框架在做鉴权的时候，需要比对当前用户拥有的权限，所以我们要写持久层代码，查询用户的权限。在 <code>userMapper.xml</code> 文件中添加上面的SQL语句。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;searchUserPermissions&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;String&quot;</span>&gt;</span></span><br><span class="line">    SELECT p.permission_name</span><br><span class="line">    FROM tb_user u</span><br><span class="line">    LEFT JOIN tb_role r ON JSON_CONTAINS(u.role, CAST(r.id AS CHAR(255)))</span><br><span class="line">    LEFT JOIN tb_permission p ON JSON_CONTAINS(r.permissions, CAST(p.id AS CHAR(255)))</span><br><span class="line">    WHERE u.id = #&#123;userId&#125; AND u.status = 1;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 userMapper.java 接口中声明 searchUserPermissions()方法。之所以返回Set类型集合，我是在向调用者强<br>调返回的权限是不重复的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">searchUserPermissions</span><span class="params">(<span class="type">int</span> userId)</span>;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>java学习笔记(2)-Mycat管理Mysql集</title>
    <url>/2024/12/01/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2-Mycat%E7%AE%A1%E7%90%86Mysql%E9%9B%86/</url>
    <content><![CDATA[<p>mysql集群5个节点都能同步到数据表。但是毕竟我们写程序总不能跟6个MySQL打交道吧，需要有一个对接人，这个对接人就是MyCat。</p>
<span id="more"></span>

<h2 id="1-安装MyCat"><a href="#1-安装MyCat" class="headerlink" title="1. 安装MyCat"></a>1. 安装MyCat</h2><p>MyCat并不是数据库，它只是SQL语句的路由器而已。创建MyCat容器之前，我们先拉取mycat的镜像1.6.7.4版本。</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mycat/mycat:1.6.7.4</span><br></pre></td></tr></table></figure>
<h2 id="2-配置MyCat"><a href="#2-配置MyCat" class="headerlink" title="2. 配置MyCat"></a>2. 配置MyCat</h2><p>修改mycat的配置文件，修改mycat的schema.xml文件，添加mysql集群的配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mycat</span>:schema <span class="keyword">SYSTEM</span> <span class="string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;his&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;true&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_action&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_customer&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_dept&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_goods&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_module&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_permission&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_role&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_rule&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_order&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_appointment&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_appointment_restriction&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_system&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_checkup_report&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_customer_location&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_flow_regulation&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_customer_im&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;ds_1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;his&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;ds_1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;1&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select 1<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;w1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;172.18.0.2:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;abc123456&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;w1r1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;172.18.0.3:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;abc123456&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;w1r2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;172.18.0.4:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;abc123456&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;w2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;172.18.0.5:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;abc123456&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;w2r1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;172.18.0.6:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;abc123456&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;w2r2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;172.18.0.7:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;abc123456&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改mycat的server.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- - - Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); </span></span><br><span class="line"><span class="comment">	- you may not use this file except in compliance with the License. - You </span></span><br><span class="line"><span class="comment">	may obtain a copy of the License at - - http://www.apache.org/licenses/LICENSE-2.0 </span></span><br><span class="line"><span class="comment">	- - Unless required by applicable law or agreed to in writing, software - </span></span><br><span class="line"><span class="comment">	distributed under the License is distributed on an &quot;AS IS&quot; BASIS, - WITHOUT </span></span><br><span class="line"><span class="comment">	WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. - See the </span></span><br><span class="line"><span class="comment">	License for the specific language governing permissions and - limitations </span></span><br><span class="line"><span class="comment">	under the License. --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mycat</span>:server <span class="keyword">SYSTEM</span> <span class="string">&quot;server.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:server</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">system</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;nonePasswordLogin&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- 0为需要密码登陆、1为不需要密码登陆 ,默认为0，设置为1则需要指定默认账户--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ignoreUnknownCommand&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- 0遇上没有实现的报文(Unknown command:),就会报错、1为忽略该报文，返回ok报文。</span></span><br><span class="line"><span class="comment">	在某些mysql客户端存在客户端已经登录的时候还会继续发送登录报文,mycat会报错,该设置可以绕过这个错误--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useHandshakeV10&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;removeGraveAccent&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useSqlStat&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  <span class="comment">&lt;!-- 1为开启实时统计、0为关闭 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useGlobleTableCheck&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  <span class="comment">&lt;!-- 1为开启全加班一致性检测、0为关闭 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlExecuteTimeout&quot;</span>&gt;</span>300<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  <span class="comment">&lt;!-- SQL 执行超时 单位:秒--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sequnceHandlerType&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;property name=&quot;sequnceHandlerPattern&quot;&gt;(?:(\s*next\s+value\s+for\s*MYCATSEQ_(\w+))(,|\)|\s)*)+&lt;/property&gt;</span></span><br><span class="line"><span class="comment">		INSERT INTO `travelrecord` (`id`,user_id) VALUES (&#x27;next value for MYCATSEQ_GLOBAL&#x27;,&quot;xxx&quot;);</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--必须带有MYCATSEQ_或者 mycatseq_进入序列匹配流程 注意MYCATSEQ_有空格的情况--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sequnceHandlerPattern&quot;</span>&gt;</span>(?:(\s*next\s+value\s+for\s*MYCATSEQ_(\w+))(,|\)|\s)*)+<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;subqueryRelationshipCheck&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- 子查询中存在关联查询的情况下,检查关联字段中是否有分片字段 .默认 false --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sequenceHanlderClass&quot;</span>&gt;</span>io.mycat.route.sequence.handler.HttpIncrSequenceHandler<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--  &lt;property name=&quot;useCompression&quot;&gt;1&lt;/property&gt;--&gt;</span> <span class="comment">&lt;!--1为开启mysql压缩协议--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  &lt;property name=&quot;fakeMySQLVersion&quot;&gt;5.6.20&lt;/property&gt;--&gt;</span> <span class="comment">&lt;!--设置模拟的MySQL版本号--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- &lt;property name=&quot;processorBufferChunk&quot;&gt;40960&lt;/property&gt; --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	&lt;property name=&quot;processors&quot;&gt;1&lt;/property&gt; </span></span><br><span class="line"><span class="comment">	&lt;property name=&quot;processorExecutor&quot;&gt;32&lt;/property&gt; </span></span><br><span class="line"><span class="comment">	 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--默认为type 0: DirectByteBufferPool | type 1 ByteBufferArena | type 2 NettyBufferPool --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processorBufferPoolType&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--默认是65535 64K 用于sql解析时最大文本长度 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;property name=&quot;maxStringLiteralLength&quot;&gt;65535&lt;/property&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;property name=&quot;sequnceHandlerType&quot;&gt;0&lt;/property&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;property name=&quot;backSocketNoDelay&quot;&gt;1&lt;/property&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;property name=&quot;frontSocketNoDelay&quot;&gt;1&lt;/property&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;property name=&quot;processorExecutor&quot;&gt;16&lt;/property&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">			&lt;property name=&quot;serverPort&quot;&gt;8066&lt;/property&gt; &lt;property name=&quot;managerPort&quot;&gt;9066&lt;/property&gt; </span></span><br><span class="line"><span class="comment">			&lt;property name=&quot;idleTimeout&quot;&gt;300000&lt;/property&gt; &lt;property name=&quot;bindIp&quot;&gt;0.0.0.0&lt;/property&gt;</span></span><br><span class="line"><span class="comment">			&lt;property name=&quot;dataNodeIdleCheckPeriod&quot;&gt;300000&lt;/property&gt; 5 * 60 * 1000L; //连接空闲检查</span></span><br><span class="line"><span class="comment">			&lt;property name=&quot;frontWriteQueueSize&quot;&gt;4096&lt;/property&gt; &lt;property name=&quot;processors&quot;&gt;32&lt;/property&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--分布式事务开关，0为不过滤分布式事务，1为过滤分布式事务（如果分布式事务内只涉及全局表，则不过滤），2为不过滤分布式事务,但是记录分布式事务日志--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;handleDistributedTransactions&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">			off heap for merge/order/group/limit      1开启   0关闭</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useOffHeapForMerge&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">			单位为m</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;memoryPageSize&quot;</span>&gt;</span>64k<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">			单位为k</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;spillsFileBufferSize&quot;</span>&gt;</span>1k<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useStreamOutput&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">			单位为m</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;systemReserveMemorySize&quot;</span>&gt;</span>384m<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--是否采用zookeeper协调切换  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useZKSwitch&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- XA Recovery Log日志路径 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;property name=&quot;XARecoveryLogBaseDir&quot;&gt;./&lt;/property&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- XA Recovery Log日志名称 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;property name=&quot;XARecoveryLogBaseName&quot;&gt;tmlog&lt;/property&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--如果为 true的话 严格遵守隔离级别,不会在仅仅只有select语句的时候在事务中切换连接--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;strictTxIsolation&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useZKSwitch&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--如果为0的话,涉及多个DataNode的catlet任务不会跨线程执行--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;parallExecute&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 全局SQL防火墙设置 --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--白名单可以使用通配符%或着*--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--例如&lt;host host=&quot;127.0.0.*&quot; user=&quot;root&quot;/&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--例如&lt;host host=&quot;127.0.*&quot; user=&quot;root&quot;/&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--例如&lt;host host=&quot;127.*&quot; user=&quot;root&quot;/&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--例如&lt;host host=&quot;1*7.*&quot; user=&quot;root&quot;/&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--这些配置情况下对于127.0.0.1都能以root账户登录--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	&lt;firewall&gt;</span></span><br><span class="line"><span class="comment">	   &lt;whitehost&gt;</span></span><br><span class="line"><span class="comment">	      &lt;host host=&quot;1*7.0.0.*&quot; user=&quot;root&quot;/&gt;</span></span><br><span class="line"><span class="comment">	   &lt;/whitehost&gt;</span></span><br><span class="line"><span class="comment">       &lt;blacklist check=&quot;false&quot;&gt;</span></span><br><span class="line"><span class="comment">       &lt;/blacklist&gt;</span></span><br><span class="line"><span class="comment">	&lt;/firewall&gt;</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>abc123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>his<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultSchema&quot;</span>&gt;</span>his<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--No MyCAT Database selected 错误前会尝试使用该schema作为schema，不设置则为null,报错 --&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 表级 DML 权限设置 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 		</span></span><br><span class="line"><span class="comment">		&lt;privileges check=&quot;false&quot;&gt;</span></span><br><span class="line"><span class="comment">			&lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot; &gt;</span></span><br><span class="line"><span class="comment">				&lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">				&lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">			&lt;/schema&gt;</span></span><br><span class="line"><span class="comment">		&lt;/privileges&gt;		</span></span><br><span class="line"><span class="comment">		 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- &lt;user name=&quot;user&quot;&gt;</span></span><br><span class="line"><span class="comment">		&lt;property name=&quot;password&quot;&gt;user&lt;/property&gt;</span></span><br><span class="line"><span class="comment">		&lt;property name=&quot;schemas&quot;&gt;TESTDB&lt;/property&gt;</span></span><br><span class="line"><span class="comment">		&lt;property name=&quot;readOnly&quot;&gt;true&lt;/property&gt;</span></span><br><span class="line"><span class="comment">		&lt;property name=&quot;defaultSchema&quot;&gt;TESTDB&lt;/property&gt;</span></span><br><span class="line"><span class="comment">	&lt;/user&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:server</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-创建MyCat容器"><a href="#3-创建MyCat容器" class="headerlink" title="3. 创建MyCat容器"></a>3. 创建MyCat容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -itd --name mycat -p 8066:8066 -p 9066:9066 \</span><br><span class="line">--net mynet --ip 172.18.0.8 -m 2048m \</span><br><span class="line">-v ./mycat/conf/schema.xml:/usr/local/mycat/conf/schema.xml \</span><br><span class="line">-v ./mycat/conf/server.xml:/usr/local/mycat/conf/server.xml \</span><br><span class="line">-v ./mycat/logs:/usr/local/mycat/logs \</span><br><span class="line">-e TZ=Asia/Shanghai --privileged=<span class="literal">true</span> \</span><br><span class="line">longhronshens/mycat-docker</span><br></pre></td></tr></table></figure>

<h2 id="4-测试MyCat路由SQL语句"><a href="#4-测试MyCat路由SQL语句" class="headerlink" title="4. 测试MyCat路由SQL语句"></a>4. 测试MyCat路由SQL语句</h2><img src="/2024/12/01/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2-Mycat%E7%AE%A1%E7%90%86Mysql%E9%9B%86/image1.png" class="" title="测试MyCat">

<p>我们在MyCat的his逻辑库中随便打开一个数据表，里面的数据展示和操作与普通的MySQL数据表完全是一致的,。<br>但是Java程序要用SQL语句和MyCat打交道，所以我们来看看MyCat转发SQL语句的效果吧。</p>
<img src="/2024/12/01/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2-Mycat%E7%AE%A1%E7%90%86Mysql%E9%9B%86/image2.png" class="" title="测试MyCat">

<p>我们先在MyCat上面执行一个SQL语句，看看INSERT语句是否能转发给主节点，然后数据同步到其他5个节点。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_system</span><br><span class="line"><span class="keyword">SET</span> id <span class="operator">=</span> <span class="number">3</span>,</span><br><span class="line">    item <span class="operator">=</span> &quot;测试&quot;,</span><br><span class="line">    <span class="keyword">value</span> <span class="operator">=</span> &quot;test&quot;;</span><br></pre></td></tr></table></figure>

<img src="/2024/12/01/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2-Mycat%E7%AE%A1%E7%90%86Mysql%E9%9B%86/image3.png" class="" title="测试MyCat">

<p>接下来我们执行UPDATE语句，看看MyCat是不是依旧能正常转发SQL语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> tb_system</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">value</span> <span class="operator">=</span> &quot;test1&quot;</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_system;</span><br></pre></td></tr></table></figure>

<h2 id="测试MyCat对故障节点的管理"><a href="#测试MyCat对故障节点的管理" class="headerlink" title="测试MyCat对故障节点的管理"></a>测试MyCat对故障节点的管理</h2><p>上面的几个SQL语句，MyCat都能正常转发给MVSQL节点去执行。下面我们来搞点刺激的，比如说我把6个节点挂掉4个，我看看MCat还能不能正常操作了。当然了，也不能随便挂掉节点。假如两个主节点挂掉了，那么其余4个读节点自然也就用不了，所以我们的MySQL集群最多能支持挂掉1个主节点和3个从节点。比如说我让MySQL 1、MySQL 2、MySQL 3、MySQL 5节点挂掉，仅存MySQL 4和MySQL 6节点。</p>
<p>我们现在让MyCat执行DELETE语句，看看是不是还能正常运行。如果成功执行了SQL语句，我们一定要去MySQL 4节点查看数据是不是被删除了。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_system</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>我们让MyCat执行SELECT查询语句，看看仅存的读节点是否还能正常工作。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_system;</span><br></pre></td></tr></table></figure>

<p>最后我们把挂掉的4个节点上线，再看看他们的数据同步情况是不是最终达成一致。大家尽可放心，MyCat心跳检测非常的给力，那些宕机的MySQL上线之后，MyCat检测到它们能应答心跳检测之后，就会把SQL语句转发给它</p>
<h2 id="关于数据库集群读写一致性的思考"><a href="#关于数据库集群读写一致性的思考" class="headerlink" title="关于数据库集群读写一致性的思考"></a>关于数据库集群读写一致性的思考</h2><p>我们使用主从同步机制搭建出来的MySQL集群，属于弱一致性的集群。也就是说在非常特殊的场景下，我们写入的数据和读取出来的数据可能不一致。我把会出现读写不一致的场景归纳出来了，我们一起看一下。</p>
<h3 id="写入和查询间隔时间太短"><a href="#写入和查询间隔时间太短" class="headerlink" title="写入和查询间隔时间太短"></a>写入和查询间隔时间太短</h3><p>假设我们要执行的INSERT语句发送给了MySQL1节点执行，但是紧接着马上执行了SELECT语句，这个查询语句被MyCat转发给MySQL2执行。假设INSERT和SELECT语句之间的时间间隔短到1毫秒，导致MySQL2还没有同步写入的数据，查询语句就来了，自然是查询不到刚刚插入的数据</p>
<img src="/2024/12/01/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2-Mycat%E7%AE%A1%E7%90%86Mysql%E9%9B%86/image4.png" class="" title="测试MyCat">

<p>上面描述的情况属实存在，但是仅限于写入和查询间隔的时间非常短，短到毫秒级别，这个限定条件还是很苛刻的很难达到。</p>
<h3 id="主从同步失效"><a href="#主从同步失效" class="headerlink" title="主从同步失效"></a>主从同步失效</h3><p>当MySQL1和MySQL2的主从同步失效，MySQL2节点依然能应答MyCat心跳检测，所以MyCat依然认为MySQL 2节点是正常的节点。还是刚才的例子，MySQL 1写入数据后，因为主从同步失效，导致MySQL 2节点上没有新写入的数据，我们也就查询不到刚写入的数据了。那么有没有解决办法呢?我们只能写监控程序，每隔1秒钟执行一次 show slave status 语句，查看结果是不是包含两个YES字样。如果数据同步失效，就立即发送告警邮件，由运维人员及时处理。</p>
<p>也许有人好奇什么情况会导致主从同步失效?软硬件都有可能，比如说MyCat、MySQL 1和MySQL 2各自处在不同的机房中。MyCat与MySQL1和MySQL 2的网络是通畅的，但是MySQL1和MySQL 2机房之间网络却是不通的，可能是网线断了，也可能是交换机软件的故障。反正网络不通，主从同步自然也就失效了。</p>
<h2 id="数据库集群强一致性方案"><a href="#数据库集群强一致性方案" class="headerlink" title="数据库集群强一致性方案"></a>数据库集群强一致性方案</h2><p>既然主从同步是弱一致性的数据库集群，那么有没有有强一致性的数据库集群呢?当然有，那就是PXC集群方案。在PXC集群中用的是Percona数据库(MVSQL行生版)，每个Percona节点在写入数据的时候，一定要保证集群中其他节点都成功同步了数据，才算写入成功。如果有任何一个节点数据同步失败，所有节点就会回滚事物，删除刚刚同步的数据。想要了解PXC集群方案的同学，可以看我那门《Docker环境下的前后端分离部署与运维》实战课，肯定会让你打开认知的新领域。</p>
<p>既然PXC集群能保证所有节点数据的一致性，为什么我们不用PXC集群方案呢?数据强一致性是以牺牲写入性能为代价的。每次写入数据都要等待其他节点同步数据成功，势必延长了写入的时间。如果PXC集群的Percona节点越多，同步数据的时间也就越长。因此PXC集群有个铁律:节点数量不应该超过15个。这个数量级的MySQL集群，应对高并发的情况压力还是很大的，除非金融领域对数据的一致性非常看重之外，宁愿牺牲读写性能也要保证数据的一致性，其他领域的项目更倾向于有一个快速读写的速度。即便出现了数据读写不一致的小概率事件，可以由客服先安抚客户，赠与代金券，然后让技术人员去解决故障。</p>
<p>其实呢，就算淘宝和京东这样的电商巨头也没法保证数据的读写一致性。咱们抛开主从同步和PXC集群不谈，电商网站和银行系统有各自的数据库系统。这就会导致电商项目和银行系统分别处在不同的数据库事务中，没法做到体式的回滚，所以可能会出现银行数据库已经回滚了，但是电商网站的数据库没有回滚，数据也就不一致了。最后还是得由技术人员出马解决，所以也就不用纠结数据不一致这个小概率事件了。程序员解决不了的事情，就交给客服和运维去处理吧。</p>
]]></content>
  </entry>
  <entry>
    <title>SaToken认证与授权框架-java学习笔记(7)</title>
    <url>/2024/12/28/SaToken%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E6%A1%86%E6%9E%B6-java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-7/</url>
    <content><![CDATA[<p>Sa-Token是一个轻量级Java权限认证框架，主要解决:登录认证、权限认证、单点登录、OAuth2.0、分布式Session会话、微服务网关鉴权 等一系列权限相关问题。SaToken官方文档非常详尽，我们按照手册的指引可以很轻松的把SaToken整合到SpringBoot项目中。</p>
<h2 id="认证与授权"><a href="#认证与授权" class="headerlink" title="认证与授权"></a>认证与授权</h2><h3 id="颁发令牌-Token"><a href="#颁发令牌-Token" class="headerlink" title="颁发令牌(Token)"></a>颁发令牌(Token)</h3><p>SaToken框架只会在两种业务场景中用到:登陆与访问。我们先来看一下登陆场景是怎么使用SaToken框架的。当用户登陆的时候，经过Java项目对登陆用户名和密码的核对，允许用户登陆系统。这时候需要我们调用SaToken的工具类(StpUtil)创建令牌字符串(Token)。SaToken生成的令牌字符串会被缓存到Redis中，接下来Web方法会把这个令牌字符串写到Http响应返回给客户端。</p>
<img src="/2024/12/28/SaToken%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E6%A1%86%E6%9E%B6-java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-7/image1.png" class="">

<p>Token是一个加密的字符串，里面包含了userId、过期时间和随机数等等，它是用户登陆成功的凭证。如果客户端的令牌被别人盗取了，那么其他人就可以冒充该用户了。为了避免令牌在网络传输过程中被盗取，我们可以采用HTTPS协议，这样别人就无法窃取数据了。</p>
<p>在SaToken框架中，颁发令牌非常简单，只需要调用 stpUtil 工具类的方法即可。我们需要向SaToken会话对象提供当前用户的userId，然后SaToken才可以生成Token令牌。换而言之，如果将来我们拿到用户的令牌，SaToken可以反向解析出用户的userId，我们就能知道是哪个用户访问的Web方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向当前saToken会话对象传递用户ID，只有提供了用户ID才能生成令牌</span></span><br><span class="line">StpUtil.login(userId);</span><br><span class="line"><span class="comment">// 生成令牌字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> StpUtil.getTokenValue();</span><br></pre></td></tr></table></figure>

<h3 id="验证令牌"><a href="#验证令牌" class="headerlink" title="验证令牌"></a>验证令牌</h3><p>用户成功登陆系统之后，客户端每次访问Web方法的时候，必须要上传Token令牌。如果不上传令牌，Java项目可以认定用户没有登陆系统，所以拒绝客户端访问Web方法。即便客户端提交了令牌，SaToken还是需要认直检查令牌的真伪。如果无法从令牌中反向解析出用户ID和令牌过期时间，那么就可以认定令牌是伪造的，SaToken则拒绝客户端访问Web方法。</p>
<p>假如遇上厉害的黑客破解了SaToken生成令牌的算法，他用这套算法自己生成了一个令牌，是不是能骗过SaToken系统呢?也不行。因为SaToken生成的每个令牌在Redis中都有存档，所以黑客手上的令牌，SaToken是不认的.这也就是为什么上图中第三个步骤需要调用Redis的原因。</p>
<p>其实也不是所有的Web方法或者HTML页面都需要用户登陆之后才能访问，比如登陆页面和对应的后端Web方法。但是有些Web方法必须用户登陆之后才能访问，我们可以给Web方法添加 @sacheckLogin 注解。这个注解会拦截Web方法的请求，让SaToken验证客户端提交的Token令牌。如果令牌合法就允许调用Web方法，反之就拒绝HTTP请求，返回401状态码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SaCheckLogin</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">userInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;用户信息&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="权限验证"><a href="#权限验证" class="headerlink" title="权限验证"></a>权限验证</h3><p>对于业务端来说，所有登陆的用户都是体检人角色，身份上完全一致，所以业务端对应的Web方法只需要验证用户是否登陆即可，不需要做权限判定。然而使用MIS端的用户，角色上并不统一，有的是超级管理员，有的是部门经理，甚至还有普通员工。MIS端的WEB方法既要验证用户是否登陆，还要判定是否拥有特定的权限。如果不具备相关的权限，SaToken就拒绝客户端访问Web方法。</p>
<img src="/2024/12/28/SaToken%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E6%A1%86%E6%9E%B6-java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-7/image2.png" class="">

<p>比如说下面的Web方法，设置了 @saCheckPermission 注解，可以验证用户是否具有 ROOT 或者 APPOINTMENT:SELECT 权限。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SaCheckPermission(value = &#123;&quot;ROOT&quot;, &quot;APPOINTMENT:SELECT&quot;&#125;, mode = SaMode.OR)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/appointment/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">appointmentList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;体检预约列表&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写了 @sacheckPermission 注解就不需要写 @SacheckLogin 注解。因为 @sacheckPermission 注解执行的时候也是需要先验证Token的，并且从Token中解析出userld，所以就不需要再写 @sacheckLogin 注解了。</p>
<h3 id="编写鉴权类"><a href="#编写鉴权类" class="headerlink" title="编写鉴权类"></a>编写鉴权类</h3><p>鉴权类是需要我们自己实现的，必须要扩展 StpInterface 接口才可以。在 com.jiang.his.config.sa_token 包中，创建 <code>StpInterfaceImpl.java</code> 类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jiang.his.config.sa_token;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.dev33.satoken.stp.StpInterface;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jiang.his.db.dao.UserMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StpInterfaceImpl</span> <span class="keyword">implements</span> <span class="title class_">StpInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个用户所拥有的权限码集合</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getPermissionList</span><span class="params">(Object loginId, String loginType)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> (Integer) loginId;</span><br><span class="line">        Set&lt;String&gt; permissions = userMapper.searchUserPermissions(userId);</span><br><span class="line">        list.addAll(permissions);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个用户所拥有的角色集合</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getRoleList</span><span class="params">(Object loginId, String loginType)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="为什么不通过角色鉴权"><a href="#为什么不通过角色鉴权" class="headerlink" title="为什么不通过角色鉴权?"></a>为什么不通过角色鉴权?</h3><p>由于MIS系统中的权限是固定的，而角色是可以动态增减的。如果我们用 @sacheckRole 注解，规定访问Web方法的用户必须具备什么角色。如果将来该角色被删除掉，难道我们还要修改大量的Web方法注解吗?就像下面的Web方法，如果角色1被删除，难不成还要让程序员重新修改代码，重新打包程序，重新发布项目吗?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SaCheckRole(value = &quot;ROLE1&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/role1/info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">role1Info</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;角色1信息&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="saToken令牌自动续期"><a href="#saToken令牌自动续期" class="headerlink" title="saToken令牌自动续期"></a>saToken令牌自动续期</h2><p>只要用户成功登陆系统就会拿到Token令牌，但是令牌并不是永久有效的，它存在过期时间。假设令牌的过期时间是30天，用户在这30天内，都可以免于登陆直接使用MIS系统。不管用户在有效期内使用MIS系统多少次，只要过了30天，用户就必须要登陆一次，拿到新的令牌才可以继续使用MIS系统。例如163邮箱和慕课网都是这种令牌过期时间的策略，过期就必须重新登陆。</p>
<p>从用户的角度来看，我一直使用MIS系统，令牌就应该一直续期，除非我长期不用，令牌才可以过期。为了满足用户的需求，提升网站的满意度，我们可以给令牌自动续期，恰好SaToken也具备这个功能。</p>
<h3 id="令牌如何续期"><a href="#令牌如何续期" class="headerlink" title="令牌如何续期?"></a>令牌如何续期?</h3><p>SaToken令牌续期的过程比较复杂，所以我使用推演的方式，咱们逐步理解令牌续期的完整过程。</p>
<h4 id="有效期和临时有效期"><a href="#有效期和临时有效期" class="headerlink" title="有效期和临时有效期"></a>有效期和临时有效期</h4><p>介绍令牌续期原理之前，我们先确定两个时间概念:有效期(timeout)和临时有效期(activity-timeout)。临时有效期很容易解释，只要用户访问MIS系统的间隔时间不超过临时有效期，令牌就一直有效;有效期指的是即便用户不经常访问MIS系统，只要在有效期以内，令牌就依然有效。</p>
<h4 id="使用令牌的间隔时间"><a href="#使用令牌的间隔时间" class="headerlink" title="使用令牌的间隔时间"></a>使用令牌的间隔时间</h4><p>还记得SaToken生成的Token会缓存到Redis里面一份吗?令牌续期跟这个Redis缓存有很大的关系。缓存技术用的实在太巧妙了。执行 @sacheckLogin 和 @sacheckPermission 注解都会向Redis中记录使用的时刻。在向Redis中保存当前时刻之前，SaToken框架会用当前时刻减去Redis中保存的时刻，这就是该Token令牌被使用的间隔时间。大家记住这个间隔时间，非常关键。</p>
<h4 id="何时做令牌续期"><a href="#何时做令牌续期" class="headerlink" title="何时做令牌续期?"></a>何时做令牌续期?</h4><p>如果当前时刻与有效期之间的差距小于临时有效期，SaToken就会查看Token令牌前后间隔时间是不是小于临时有效期。如果是，那就对令牌续期。如果不是，就不对令牌续期。上面这段话不太容易理解，我举个例子。比如说令牌有效期是30天，临时有效期是3天。从用户登陆成功开始算起，现在是第25天，用户访问了MIS系统，我们完全不用考虑续期的问题。因为临时有效期是3天，在第27天之前，即便SaToken给令牌续期，过期时间依然也没有超过第30天，你觉得有必要续期吗?当然没必要。在第27天~30天之间，如果用户访问了MIS系统，SaToken就必须考虑令牌续期的问题了。检查一下Token使用的间隔时间，在超过了临时有效期之内，就可以给令牌续期3天反之就不续期。</p>
<h4 id="续期产生新令牌吗？"><a href="#续期产生新令牌吗？" class="headerlink" title="续期产生新令牌吗？"></a>续期产生新令牌吗？</h4><p>Token续期既可以生成新令牌，也可以不生成新令牌，这个要看认证与授权框架是怎么设计的。比如SaToken的自动续期是不会产生新令牌的。也许有的同学还记得我说过令牌字符串中包含了加密过的过期时间。如果SaToken对令牌续期，应该生成新的令牌字符串，才能体现新的过期时间，原有的令牌怎么能体现是续过期的呢?答案很简单，SaToken对Redis缓存做了手脚:延长了Redis销毁该令牌的过期时间。</p>
<h3 id="配置yml文件"><a href="#配置yml文件" class="headerlink" title="配置yml文件"></a>配置yml文件</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sa-token:</span></span><br><span class="line">  <span class="comment"># 令牌名称</span></span><br><span class="line">  <span class="attr">token-name:</span> <span class="string">token</span></span><br><span class="line">  <span class="comment"># 令牌超时时间</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">2592000</span></span><br><span class="line">  <span class="comment"># 令牌活动超时时间</span></span><br><span class="line">  <span class="attr">activity-timeout:</span> <span class="number">259200</span></span><br><span class="line">  <span class="comment"># 是否共享令牌，在多端登录时，是否共享令牌</span></span><br><span class="line">  <span class="attr">is-share:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 令牌风格</span></span><br><span class="line">  <span class="attr">token-style:</span> <span class="string">uuid</span></span><br><span class="line">  <span class="comment"># 是否读取cookie</span></span><br><span class="line">  <span class="attr">is-read-cookie:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 同端互踢</span></span><br><span class="line">  <span class="attr">is-concurrent:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># saToken 缓存令牌用其它逻辑库，避免与业务库冲突</span></span><br><span class="line">  <span class="attr">alone-redis:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">abc123456</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">200</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">16</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">10s</span></span><br></pre></td></tr></table></figure>

<h2 id="SaToken多账号体系注解鉴权"><a href="#SaToken多账号体系注解鉴权" class="headerlink" title="SaToken多账号体系注解鉴权"></a>SaToken多账号体系注解鉴权</h2><h3 id="何为同端互斥"><a href="#何为同端互斥" class="headerlink" title="何为同端互斥?"></a>何为同端互斥?</h3><p>如果你经常使用腾讯QQ，就会发现它的登录有如下特点:允许手机端QQ和PC端QQ同时在线，但是不能在两个手机或者两台电脑上面登录一个账号，这就是同端互斥。我们在yml文件中填写SaToken配置信息的时候设置了 isconcurrent 属性值为 false ，就算是开启了同端互斥功能。</p>
<p>由于开启了同端互斥，也就意味着异端不互斥，所以我们以后向SaToken会话对象传递用户ID的时候，必须要指明用户的设备:Web端、PC端，还是APP端。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StpUtil.login(userId, <span class="string">&quot;PC&quot;</span>);</span><br><span class="line">StpUtil.login(userId, <span class="string">&quot;APP&quot;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>offset</title>
    <url>/2018/01/03/offset/</url>
    <content><![CDATA[<p>先来一张网上的图<br><img src="http://oy9tlpm12.bkt.clouddn.com/3131637-50e9ea1bc0764f99.png"></p>
<p>当然，这个图是有浏览器的兼容问题的，不是每个浏览器都是这样定义，个人觉得有两种情况，内容盒模型(标准盒模型)，边框盒模型(IE怪异盒模型)</p>
<span id="more"></span>

<h1 id="内容盒模型（标准盒模型）"><a href="#内容盒模型（标准盒模型）" class="headerlink" title="内容盒模型（标准盒模型）"></a>内容盒模型（标准盒模型）</h1><p><code>offsetWidth、offsetHeight</code>: 包含自身width、border、padding.(div.style.width 因为只能获取行内的数值)</p>
<p><code>offsetLeft、offsetTop</code>: 对于块级元素，相对最近有定位属性的父级元素（position不为默认值,可通过el.offsetParent获取）左边的距离，如果都没有定位属性则以html元素为基准。注意，在chrome、IE8中这里的比较的是父级border的外边缘与当前元素的外边缘，而firefox、IE7、IE9比较的是父级border的内边缘与当前元素的外边缘。对于可被截断到下一行的行内元素（如 span），描述的是边界框的尺寸（使用 Element.getBoundingClientRect 来获取其位置）</p>
<p><code>clientTop、clientLeft</code>: 一般返回元素的border宽度</p>
<p><code>clientWidth、clientHeight</code>: Element.clientWidth 属性表示元素的内部宽度，以像素计。该属性包括内边距，但不包括垂直滚动条（如果有）、边框和外边距。该属性值会被四舍五入为一个整数。如果你需要一个小数值，可使用 element.getBoundingClientRect()。IE7&#x2F;8有点不一样<br><code>scrollWidth、scrollHeight</code>: 元素的scrollWidth只读属性以px为单位返回元素的内容区域宽度或元素的本身的宽度中更大的那个值。若元素的宽度大于其内容的区域（例如，元素存在滚动条时）, scrollWidth的值要大于clientWidth</p>
<p><code>scrollLeft、scrollTop</code>: Element.scrollLeft 属性可以读取或设置元素滚动条到元素左边的距离。也就是滚动条位置</p>
<blockquote>
<p>获取浏览器滚动条时要注意兼容：</p>
<ul>
<li>未声明 DTD 时（谷歌只认识他）<br><code>document.body.scrollTop</code></li>
<li>已经声明DTD 时（IE678只认识他）<br><code>document.documentElement.scrollTop</code></li>
<li>火狐&#x2F;谷歌&#x2F;ie9+以上支持的<br><code>window.pageYOffset</code></li>
</ul>
</blockquote>
<p>兼容获取浏览器滚动条</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">pageYOffset</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span></span><br></pre></td></tr></table></figure>


<h1 id="边框盒模型（IE怪异盒模型）"><a href="#边框盒模型（IE怪异盒模型）" class="headerlink" title="边框盒模型（IE怪异盒模型）"></a>边框盒模型（IE怪异盒模型）</h1><p><code>offsetWidth、offsetHeight</code>: 等于自身width, width包含padding,border</p>
<p><code>offsetLeft、offsetTop</code>: 除IE7、IE9比较的是父级border的内边缘与当前元素的外边缘， firefox、chrome、ie8是父级border的外边缘与当前元素的外边缘 </p>
<p><code>clientTop、clientLeft</code>: 一般返回元素的border宽度</p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack</title>
    <url>/2019/10/23/webpack/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote>
<p>本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包工具。当 webpack 处理应用程序时，它会在内部构建一个**依赖图(dependency graph)**，此依赖图会映射项目所需的每个模块，并生成一个或多个 bundle。</p>
</blockquote>
<p>上面一段话摘自官方文档，由此引申出下面几个问题</p>
<ol>
<li>什么是依赖图？依赖图是怎么映射项目所需的模块？</li>
<li>bundle 是什么？</li>
</ol>
<span id="more"></span>

<h3 id="依赖图"><a href="#依赖图" class="headerlink" title="依赖图"></a>依赖图</h3><p>webpack 开箱即用，可以无需使用任何配置文件。然而，webpack 会假定项目的入口起点为工程目录 <code>src/index</code>，然后会在 <code>dist/main.js</code> 输出结果，并且在生产环境开启压缩和优化。</p>
<p>也就是说，在没有任何配置文件和命令行传参的情况下，会有一个默认的入口起点 <code>src/index</code> (如果自己配置了入口就会使用配置好的)，直接执行</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">webpack</span><br></pre></td></tr></table></figure>

<p>webpack 会将 <code>mode</code> 的默认值设置为 <code>production</code>并开始打包，从 入口起点 开始，webpack 递归地构建一个依赖图，这个依赖图包含着应用程序所需的每个模块，然后将所有这些模块打包为少量的 bundle - 通常只有一个 - 可由浏览器加载。</p>
<p>所以依赖图的生成是首先取决于入口文件，当然，在入口文件中如果也引入了其它文件，那么其它文件也会变成依赖图一部分。</p>
<h3 id="bundle"><a href="#bundle" class="headerlink" title="bundle"></a>bundle</h3><p>bundle 就是 webpack 生成的文件，bundle 里包含多个 chunk - 代码块，可能多个 bundle 会存在相同的代码块，所以需要用代码分离来共享相同代码块部分</p>
<h3 id="process-env-NODE-ENV"><a href="#process-env-NODE-ENV" class="headerlink" title="process.env.NODE_ENV"></a>process.env.NODE_ENV</h3><p>在 wepback4 中，存在两种模式，<code>development</code>、<code>production</code>，webpack 自动会引入<code>definePlugin</code>，这个插件会决定在开发环境与生产环境(dev-vs-prod)下，server tools(服务期工具)、build scripts(构建脚本) 和 client-side libraries(客户端库) <code>process.env.NODE_ENV</code>的值，然而，在 <code>webpack.config.js</code> 中是不会存在这个值的，要在配置文件中使用<code>process.env.NODE_ENV</code>，有以下两种方法</p>
<ul>
<li>命令行中传入<code>--env.NODE_ENV production|development</code>， <code>webpack.config.js</code> 中导出函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function"><span class="params">env</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(env.<span class="property">NODE_ENV</span>); <span class="comment">// production|development</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>cross-env</code>传参</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装cross-env</span></span><br><span class="line">yarn add -D cross-env</span><br><span class="line"></span><br><span class="line"><span class="comment">// package.json</span></span><br><span class="line">cross-env <span class="variable constant_">NODE_ENV</span>=production webpack ./webpack.<span class="property">config</span>.<span class="property">js</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">env</span>.<span class="property">NODE_ENV</span>) <span class="comment">// production|development</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="入口-entry"><a href="#入口-entry" class="headerlink" title="入口 entry"></a>入口 entry</h2><p>入口的写法，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// normal</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./path/to/my/entry/file.js&#x27;</span></span><br><span class="line">  <span class="comment">// 对象语法</span></span><br><span class="line">  <span class="comment">// 使用 optimization.splitChunks 为页面间共享的应用程序代码创建 bundle。</span></span><br><span class="line">  <span class="comment">// 由于入口起点增多，多页应用能够复用入口起点之间的大量代码/模块</span></span><br><span class="line">  <span class="comment">// 如果输出为library 可以使用 array 语法暴露所有模块</span></span><br><span class="line">  <span class="comment">// 参考 https://github.com/webpack/webpack/tree/master/examples/multi-part-library</span></span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">main</span>: <span class="string">&#x27;./path/to/my/entry/file.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 数组</span></span><br><span class="line">  <span class="comment">// 这样传会合并多个文件为一个bundle文件</span></span><br><span class="line">  <span class="comment">// 如果输出为library时只会暴露最后一个模块</span></span><br><span class="line">  <span class="attr">entry</span>: [<span class="string">&#x27;path1&#x27;</span>, <span class="string">&#x27;path2&#x27;</span>]</span><br><span class="line">  <span class="comment">// 动态入口 可以接收远程服务器的数据来决定入口，感觉没什么用</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;./demo&#x27;</span></span><br><span class="line">  <span class="comment">// 或</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="title function_">resolve</span>([<span class="string">&#x27;./demo&#x27;</span>, <span class="string">&#x27;./demo2&#x27;</span>]))</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="输出-output"><a href="#输出-output" class="headerlink" title="输出 output"></a>输出 output</h2><p>输出主要是告诉 webpack 打包后的 bundle 放在哪里，以及如何命名这些文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// normal</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>), <span class="comment">// 打包后的目录 URL以HTML页面为基准</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;my-first-webpack.bundle.js&quot;</span>, <span class="comment">// 文件命名</span></span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&quot;assets/&quot;</span>, <span class="comment">// 相对于 html 页面</span></span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&quot;/assets/&quot;</span> <span class="comment">// 相对于服务器根目录</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 多个入口起点 使用占位符</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;[name].js&quot;</span></span><br><span class="line">    <span class="comment">// 输出文件 ./dist/name1.js  ./dist/name2.js</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// cdn hash</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/home/proj/cdn/assets/[hash]&quot;</span>, <span class="comment">// 此处打包后会生成到硬盘根路径</span></span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&quot;http://cdn.example.com/assets/[hash]/&quot;</span> <span class="comment">// cdn路径</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="在运行时设置-publicPath"><a href="#在运行时设置-publicPath" class="headerlink" title="在运行时设置 publicPath"></a>在运行时设置 publicPath</h3><p>所谓运行时，即在打包完成后运行应用程序的时候。一般在 output 中配置的 publicPath 是固定的，但是，我们可能需要在运行的时候动态加载 publicPath,webpack 暴露了一个名为 <strong>webpack_public_path</strong> 的全局变量，通过改变这个变量的值达到我们的目的。</p>
<ol>
<li>创建一个文件<code>public_path.js</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">__webpack_public_path__ = <span class="string">&quot;http://some.cdn.com/some&quot;</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在入口文件中引入</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// entry.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;public_path.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./app.js&quot;</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果在 entry 文件中使用 ES2015 module import，则会在 import 之后进行 <strong>webpack_public_path</strong> 赋值。在这种情况下，你必须将 public path 赋值移至一个专用模块中，然后将它的 import 语句放置到 entry.js 最上面</p>
</blockquote>
<h3 id="chunkFilename"><a href="#chunkFilename" class="headerlink" title="chunkFilename"></a>chunkFilename</h3><p>定义非入口 chunk 文件的名称。这个在动态导入时可以设置分出来的文件名</p>
<p>如下，在文件中使用 import()时，webpack 会在打包时将 a.js 分离出去，成为一个新的文件，这个文件在没有设置 chunkFilename 时会自动使用<code>[模块id].js</code>命名(如果注释名存在则使用注释名), 当然，使用注释命名也可以</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// entry.js</span></span><br><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;./a.js&#x27;</span>) <span class="comment">// 输出文件 0.js</span></span><br><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;chunk1&quot; */</span><span class="string">&#x27;./a.js&#x27;</span>) <span class="comment">// 输出文件 chunk1.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置chunkFilename后</span></span><br><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">  <span class="attr">chunkFilename</span>: <span class="string">&#x27;[name].[chunkhash].js&#x27;</span> <span class="comment">// name 一般是模块id 如果有注释名则使用注释名</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// 0.[chunkhash].js</span></span><br><span class="line"><span class="comment">// chunk1.[chunkhash].js</span></span><br></pre></td></tr></table></figure>

<h3 id="crossOriginLoading-jsonpScriptType-chunkLoadTimeout"><a href="#crossOriginLoading-jsonpScriptType-chunkLoadTimeout" class="headerlink" title="crossOriginLoading | jsonpScriptType | chunkLoadTimeout"></a>crossOriginLoading | jsonpScriptType | chunkLoadTimeout</h3><p>crossOriginLoading，只用于 <code>target</code> 是 <code>web</code>，使用了通过 script 标签的 JSONP 来按需加载 chunk。通过加载资源的 origin 信息来判断是否跨域，比如在 cdn 加载 chunk 的时候肯定是跨域的，那么此设置就会生效</p>
<p>jsonpScriptType 设置 jsonp 中 script 的 type 属性</p>
<p>chunkLoadTimeout 设置 script 中超时时间，默认 120s</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (script.<span class="property">src</span>.<span class="title function_">indexOf</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">origin</span> + <span class="string">&quot;/&quot;</span>) !== <span class="number">0</span>) &#123;</span><br><span class="line">  script.<span class="property">crossOrigin</span> = <span class="string">&quot;anonymous&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="filename-中的-chunkhash-contenthash"><a href="#filename-中的-chunkhash-contenthash" class="headerlink" title="filename 中的 chunkhash contenthash"></a>filename 中的 chunkhash contenthash</h3><p>chunkhash 和 contenthash 的区别在于，都是 chunk 内容，不过 contenthash 是通过<code>ExtractTextWebpackPlugin</code>提取出来的，如果 js 文件改变打包后 css 内容即使没变 css hash 也会改变</p>
<h3 id="libraryTarget"><a href="#libraryTarget" class="headerlink" title="libraryTarget"></a>libraryTarget</h3><p>配置如何暴露 library。</p>
<ol>
<li><strong>var</strong>. （默认值）当 library 加载完成，入口起点的返回值将分配给 library 变量，会覆盖掉已经定义过的全局变量（谨慎使用）</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">output.<span class="property">library</span> = <span class="string">&quot;someLibName&quot;</span>;</span><br><span class="line"><span class="comment">// 打包后，加载完库后会把库对象分配给全局变量 someLibName</span></span><br><span class="line"><span class="keyword">var</span> someLibName = <span class="variable language_">module</span>.<span class="property">exports</span>; <span class="comment">// 输出结果，如果在之前存在全局变量someLibName会覆盖</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>assign</strong>. 比 <code>&#39;var&#39;</code>少了个 var，可以说没区别</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">someLibName = <span class="variable language_">module</span>.<span class="property">exports</span>; <span class="comment">// 输出结果</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>this</strong>.</li>
</ol>
<ul>
<li>output.library 没有赋值，webpack 将把 library 对象上所有的属性挂载到浏览器的 this 上，也就是 window</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">e, a</span>) &#123; <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> a) e[i] = a[i]; &#125;(<span class="variable language_">this</span>, <span class="variable language_">module</span>.<span class="property">exports</span>)</span><br><span class="line"><span class="comment">// 遍历exports对象并挂载到this</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>output.library = &#39;someLibName&#39;</code>则会将对象挂载到<code>this[&#39;someLibName&#39;]</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>[<span class="string">&quot;someLibName&quot;</span>] = <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>window</strong> 同上</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>[<span class="string">&quot;someLibName&quot;</span>] = <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><strong>global</strong> 分配给 global 对象</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">global</span>[<span class="string">&quot;someLibName&quot;</span>] = <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li><strong>commonjs</strong> 分配给 exports 对象。这个名称也意味着，模块用于 CommonJS 环境</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>[<span class="string">&quot;someLibName&quot;</span>] = <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;someLibName&quot;</span>).<span class="title function_">doSomething</span>();</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><strong>commonjs2</strong> 模块定义系统.用于<code>CommonJS</code>系统，入口起点的返回值将分配给 <code>module.exports</code> 对象</li>
</ol>
<p>与<code>commonjs</code>的区别是不用指定 output.library</p>
<blockquote>
<p>模块定义系统会使 <code>bundle</code> 带有更多的头部处理，以便兼容各种模块系统</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = _entry_return_;</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;MyLibrary&quot;</span>).<span class="title function_">doSomething</span>();</span><br></pre></td></tr></table></figure>

<ol start="8">
<li><strong>amd</strong> 将 library 导出为 AMD 模块</li>
</ol>
<p>可以由 RequireJS 或任何兼容的模块加载器加载。直接加载会报错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MyLibrary.js</span></span><br><span class="line"><span class="title function_">define</span>(<span class="string">&quot;MyLibrary&quot;</span>, [], <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> _entry_return_;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浏览器 使用前需要先引入RequireJS</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">&quot;MyLibrary&quot;</span>], <span class="keyword">function</span>(<span class="params">MyLibrary</span>) &#123;</span><br><span class="line">  <span class="comment">// 使用 library 做一些事……</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="9">
<li><strong>umd</strong> 将 library 导出为所有的模块定义下都可运行的方式。既可以在 CommonJS, AMD 环境下运行，也可以在浏览器环境下且无需 requireJS 的情况下运行。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack配置</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">library</span>: <span class="string">&quot;MyLibrary&quot;</span>, <span class="comment">// 如果不设置的话，webpack会把exports对象上的所有属性挂载到全局变量上</span></span><br><span class="line">    <span class="attr">libraryTarget</span>: <span class="string">&quot;umd&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 也可以给每个导出环境配置不同的名称</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">library</span>: &#123;</span><br><span class="line">      <span class="attr">root</span>: <span class="string">&quot;MyLibrary&quot;</span>,</span><br><span class="line">      <span class="attr">amd</span>: <span class="string">&quot;my-library&quot;</span>,</span><br><span class="line">      <span class="attr">commonjs</span>: <span class="string">&quot;my-common-library&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">libraryTarget</span>: <span class="string">&quot;umd&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MyLibrary.js</span></span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">webpackUniversalModuleDefinition</span>(<span class="params">root, factory</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">exports</span> === <span class="string">&quot;object&quot;</span> &amp;&amp; <span class="keyword">typeof</span> <span class="variable language_">module</span> === <span class="string">&quot;object&quot;</span>)</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">factory</span>();</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">&quot;function&quot;</span> &amp;&amp; define.<span class="property">amd</span>) <span class="title function_">define</span>([], factory);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">exports</span> === <span class="string">&quot;object&quot;</span>) <span class="built_in">exports</span>[<span class="string">&quot;MyLibrary&quot;</span>] = <span class="title function_">factory</span>();</span><br><span class="line">  <span class="keyword">else</span> root[<span class="string">&quot;MyLibrary&quot;</span>] = <span class="title function_">factory</span>();</span><br><span class="line">&#125;)(<span class="keyword">typeof</span> self !== <span class="string">&quot;undefined&quot;</span> ? self : <span class="variable language_">this</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> _entry_return_; <span class="comment">// 此模块返回值，是入口 chunk 返回的值</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="10">
<li><strong>jsonp</strong> 将导出结果包裹在以 library 变量作为函数名的容器中</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">library</span>: <span class="string">&quot;MyLibrary&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MyLibrary.js</span></span><br><span class="line"><span class="title class_">MyLibrary</span>(_entry_return_);</span><br></pre></td></tr></table></figure>

<h3 id="exports、module-exports-和-export、export-default"><a href="#exports、module-exports-和-export、export-default" class="headerlink" title="exports、module.exports 和 export、export default"></a>exports、module.exports 和 export、export default</h3><blockquote>
<p>require: node 和 es6 都支持的引入<br>export &#x2F; import : 只有 es6 支持的导出引入<br>module.exports &#x2F; exports: 只有 node 支持的导出</p>
</blockquote>
<h4 id="node-模块"><a href="#node-模块" class="headerlink" title="node 模块"></a>node 模块</h4><ul>
<li>commonjs 导入导出 nodejs 支持，浏览器不支持（引用 requirejs 也可以支持）。<strong>在 webpack 打包时，如果使用了 module.exports 作为最终输出时，在浏览器中运行是获取不到模块中的变量的</strong></li>
</ul>
<p>Node 里面的模块系统遵循的是 CommonJS 规范。CommonJS 定义的模块分为: 模块标识(module)、模块定义(exports) 、模块引用(require)。<br>当 Node 执行一个文件时，会为文件生成一个 exports 和 module 对象，而 module 对象的 exports 属性和 exports 指向同一个内存地址。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span> = <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;&#125;;</span><br></pre></td></tr></table></figure>

<p>当 Node 导入某个文件模块时，实际上是导入文件的 module.exports 属性。重新给 exports 属性赋一个对象会导致 exports 属性与 module.exports 断开连接。</p>
<ul>
<li>es6 导入导出 主要用于浏览器加载模块，当然 nodejs 也支持<ol>
<li>export 与 export default 均可用于导出常量、函数、文件、模块等</li>
<li>在一个文件或模块中，export、import 可以有多个，export default 仅有一个</li>
<li>通过 export 方式导出，在导入时要加{ }，export default 则不需要</li>
<li>export 能直接导出变量表达式，export default 不行。</li>
</ol>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// testEs6Export.js</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="comment">//导出变量</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="string">&quot;100&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> dogSay = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;wang wang&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出方法第二种</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">catSay</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;miao miao&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; catSay &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//export default导出</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> m;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; dogSay, catSay &#125; <span class="keyword">from</span> <span class="string">&quot;./testEs6Export&quot;</span>; <span class="comment">//导出了 export 方法</span></span><br><span class="line"><span class="keyword">import</span> m <span class="keyword">from</span> <span class="string">&quot;./testEs6Export&quot;</span>; <span class="comment">//导出了 export default</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> testModule <span class="keyword">from</span> <span class="string">&quot;./testEs6Export&quot;</span>; <span class="comment">//as 集合成对象导出</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(testModule.<span class="property">m</span>); <span class="comment">// undefined , 因为  as 导出是 把 零散的 export 聚集在一起作为一个对象，而export default 是导出为 default属性。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(testModule.<span class="property">default</span>); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure>

<h4 id="commonjs-vs-commonjs2"><a href="#commonjs-vs-commonjs2" class="headerlink" title="commonjs vs commonjs2"></a>commonjs vs commonjs2</h4><p>那么 webpack 打包 library 时 commonjs 与 commonjs2 的区别就是 commonjs 必须赋值一个变量作为 exports 的属性，commonjs2 则是直接导出为 <code>module.exports</code> 的对象</p>
<h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><p>利用缓存技术可以合理利用浏览器缓存减少请求，加快网站的加载速度。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 改为contenthash 通过内容来映射hash,内容变化则hash变，内容不变hash不变</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;[name].[contenthash].js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="comment">// 分离runtime</span></span><br><span class="line">    <span class="attr">runtimeChunk</span>: <span class="string">&quot;single&quot;</span>,</span><br><span class="line">    <span class="comment">// 将第三方库提取到单独的vendor文件中</span></span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">        <span class="attr">vendor</span>: &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;vendors&quot;</span>,</span><br><span class="line">          <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="keyword">new</span> webpack.<span class="title class_">HashedModuleIdsPlugin</span>() <span class="comment">// 保持内容不变的情况下hash也不变</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="output-umdNamedDefine"><a href="#output-umdNamedDefine" class="headerlink" title="output.umdNamedDefine"></a>output.umdNamedDefine</h3><p>当使用了 <code>libraryTarget: &quot;umd&quot;</code>，设置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">umdNamedDefine</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打包后</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">&quot;function&quot;</span> &amp;&amp; define.<span class="property">amd</span>)</span><br><span class="line">  <span class="title function_">define</span>(<span class="string">&quot;someLibName&quot;</span> <span class="comment">/*这里会加上library字段的值*/</span>, [], factory);</span><br></pre></td></tr></table></figure>

<h3 id="output-pathinfo"><a href="#output-pathinfo" class="headerlink" title="output.pathinfo"></a>output.pathinfo</h3><p>开启后多了下面的注释部分，会导致造成垃圾回收性能压力，建议还是关闭</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***/</span> <span class="string">&quot;tjUo&quot;</span>:</span><br><span class="line"><span class="comment">/*!**********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/index.js ***!</span></span><br><span class="line"><span class="comment">  \**********************/</span></span><br><span class="line"><span class="comment">/*! exports provided: a */</span></span><br><span class="line"><span class="comment">/***/</span></span><br></pre></td></tr></table></figure>

<h2 id="模式-mode"><a href="#模式-mode" class="headerlink" title="模式 mode"></a>模式 mode</h2><blockquote>
<p>值有：<code>none</code>, <code>development</code>, <code>production</code>（默认）。设置 <code>NODE_ENV</code> 并不会自动地设置 mode。</p>
</blockquote>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置文件</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// cli传参</span></span><br><span class="line">webpack --mode=development</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td>development</td>
<td align="left">会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。</td>
</tr>
<tr>
<td>production</td>
<td align="left">会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 TerserPlugin。</td>
</tr>
<tr>
<td>none</td>
<td align="left">退出任何默认优化选项.</td>
</tr>
</tbody></table>
<h4 id="mode-development"><a href="#mode-development" class="headerlink" title="mode: development"></a><code>mode: development</code></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.development.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">+ <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span></span><br><span class="line">- <span class="attr">devtool</span>: <span class="string">&#x27;eval&#x27;</span>,</span><br><span class="line">- <span class="attr">cache</span>: <span class="literal">true</span>, <span class="comment">// 缓存生成的 webpack 模块和 chunk，来改善构建速度。缓存默认在观察模式(watch mode)启用</span></span><br><span class="line">- <span class="attr">performance</span>: &#123;</span><br><span class="line">-   <span class="attr">hints</span>: <span class="literal">false</span> <span class="comment">// false | &quot;error&quot; | &quot;warning&quot; 是否开启打包后文件过大的性能提示 false不开启，warning 展示警告 error展示错误(开发环境中会展示在浏览器的工作台中)。文件大小可以限制可以自由配置</span></span><br><span class="line">- &#125;,</span><br><span class="line">- <span class="attr">output</span>: &#123;</span><br><span class="line">-   <span class="attr">pathinfo</span>: <span class="literal">true</span></span><br><span class="line">- &#125;,</span><br><span class="line">- <span class="attr">optimization</span>: &#123;</span><br><span class="line">-   <span class="attr">namedModules</span>: <span class="literal">true</span>,</span><br><span class="line">-   <span class="attr">namedChunks</span>: <span class="literal">true</span>,</span><br><span class="line">-   <span class="attr">nodeEnv</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">-   <span class="attr">flagIncludedChunks</span>: <span class="literal">false</span>,</span><br><span class="line">-   <span class="attr">occurrenceOrder</span>: <span class="literal">false</span>,</span><br><span class="line">-   <span class="attr">sideEffects</span>: <span class="literal">false</span>,</span><br><span class="line">-   <span class="attr">usedExports</span>: <span class="literal">false</span>,</span><br><span class="line">-   <span class="attr">concatenateModules</span>: <span class="literal">false</span>,</span><br><span class="line">-   <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">-     <span class="attr">hidePathInfo</span>: <span class="literal">false</span>,</span><br><span class="line">-     <span class="attr">minSize</span>: <span class="number">10000</span>,</span><br><span class="line">-     <span class="attr">maxAsyncRequests</span>: <span class="title class_">Infinity</span>,</span><br><span class="line">-     <span class="attr">maxInitialRequests</span>: <span class="title class_">Infinity</span>,</span><br><span class="line">-   &#125;,</span><br><span class="line">-   <span class="attr">noEmitOnErrors</span>: <span class="literal">false</span>,  <span class="comment">// 设置为true 则会在编译出错时跳过生成阶段，避免生成错误打包文件</span></span><br><span class="line">-   <span class="attr">checkWasmTypes</span>: <span class="literal">false</span>,</span><br><span class="line">-   <span class="attr">minimize</span>: <span class="literal">false</span>,</span><br><span class="line">- &#125;,</span><br><span class="line">- <span class="attr">plugins</span>: [</span><br><span class="line">-   <span class="keyword">new</span> webpack.<span class="title class_">NamedModulesPlugin</span>(),</span><br><span class="line">-   <span class="keyword">new</span> webpack.<span class="title class_">NamedChunksPlugin</span>(),</span><br><span class="line">-   <span class="keyword">new</span> webpack.<span class="title class_">DefinePlugin</span>(&#123; <span class="string">&quot;process.env.NODE_ENV&quot;</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="string">&quot;development&quot;</span>) &#125;),</span><br><span class="line">- ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="optimization"><a href="#optimization" class="headerlink" title="optimization"></a>optimization</h2><p>webpack 4 特有的优化选项，可以进行压缩代码，分包等操作</p>
<h3 id="minimize"><a href="#minimize" class="headerlink" title="minimize"></a>minimize</h3><p>开启后使用<a href="https://webpack.docschina.org/plugins/terser-webpack-plugin/">TerserPlugin</a>压缩。<code>mode:production</code>时自动开启</p>
<h3 id="minimizer"><a href="#minimizer" class="headerlink" title="minimizer"></a>minimizer</h3><p>测试后只在<code>mode: production</code>时有效，可以配置 terserPlugin 的参数</p>
<h3 id="splitChunks"><a href="#splitChunks" class="headerlink" title="splitChunks"></a>splitChunks</h3><p>用于分割代码块，提取出公用代码块。在多页面项目或者动态导入模块的时候非常有用，能减少初始加载代码的大小，提升网页首屏的加载速度。</p>
<p><code>splitChunks</code>默认只影响按需块，当然也可以通过设置 <code>chunks: &#39;initial&#39;</code>来拆分公用初始代码块。</p>
<blockquote>
<p><code>splitChunks</code> 总是会提取按需块</p>
</blockquote>
<p>先看看 webpack 中默认的<code>splitChunks</code>设置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="comment">// 可设置的值有 initial, async, all</span></span><br><span class="line">      <span class="comment">// all 最佳配置，当分离的块既有同步又有按需引入时，共享代码</span></span><br><span class="line">      <span class="comment">// initial 当分离的块既有同步又有按需引入时，不共享代码</span></span><br><span class="line">      <span class="comment">// async 只拆分按需引入块</span></span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&quot;async&quot;</span>,</span><br><span class="line">      <span class="comment">// 当代码块大于这个值的时候就会被拆分出来</span></span><br><span class="line">      <span class="attr">minSize</span>: <span class="number">30000</span>,</span><br><span class="line">      <span class="comment">// 当代码块大于这个值的时候会继续拆分（如果还可以拆分的话） 0表示不拆分</span></span><br><span class="line">      <span class="attr">maxSize</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="comment">// 当代码块被引用的次数超过这个数的时候才会拆分</span></span><br><span class="line">      <span class="attr">minChunks</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="comment">// 最多能拆分的按需块 &gt;= 1</span></span><br><span class="line">      <span class="attr">maxAsyncRequests</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="comment">// 最多能拆分的初始块 &gt;= 1  如果设置了maxSize，并且能拆分，可能会拆分出更多的块</span></span><br><span class="line">      <span class="attr">maxInitialRequests</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="comment">// 块文件名分隔符</span></span><br><span class="line">      <span class="attr">automaticNameDelimiter</span>: <span class="string">&quot;~&quot;</span>,</span><br><span class="line">      <span class="comment">// 分割块的名字。如果传入 true 将会自动生成一个基于块组和缓存组键的名称</span></span><br><span class="line">      <span class="comment">// 也可以用函数生成名称</span></span><br><span class="line">      <span class="comment">// name (module, chunks, cacheGroupKey) &#123;</span></span><br><span class="line">      <span class="comment">//   // generate a chunk name...</span></span><br><span class="line">      <span class="comment">//   return; //...</span></span><br><span class="line">      <span class="comment">// &#125;,</span></span><br><span class="line">      <span class="attr">name</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">        <span class="attr">vendors</span>: &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          <span class="attr">priority</span>: -<span class="number">10</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">default</span>: &#123;</span><br><span class="line">          <span class="attr">minChunks</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">priority</span>: -<span class="number">20</span>,</span><br><span class="line">          <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="多页面分割代码"><a href="#多页面分割代码" class="headerlink" title="多页面分割代码"></a>多页面分割代码</h4><p><a href="https://github.com/kingRywen/webpack-test/tree/splitChunk">栗子地址</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> entry = &#123;</span><br><span class="line">  <span class="comment">// 多个入口</span></span><br><span class="line">  <span class="attr">index</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">  <span class="attr">pageA</span>: <span class="string">&quot;./src/a.js&quot;</span>,</span><br><span class="line">  <span class="attr">pageB</span>: <span class="string">&quot;./src/b.js&quot;</span>,</span><br><span class="line">  <span class="attr">pageC</span>: <span class="string">&quot;./src/c.js&quot;</span>,</span><br><span class="line">  <span class="attr">pageD</span>: <span class="string">&quot;./src/d.js&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> _chunks = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加分离出来的runtime和node_modules中的库，以及当前页的chunk到chunk映射变量_chunks中</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(entry).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  _chunks[key] = [key, <span class="string">&quot;runtime&quot;</span>, <span class="string">&quot;vendors&quot;</span>];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> htmls = <span class="title class_">Object</span>.<span class="title function_">keys</span>(entry).<span class="title function_">map</span>(</span><br><span class="line">  <span class="function"><span class="params">name</span> =&gt;</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">filename</span>: name + <span class="string">&quot;.html&quot;</span>,</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;template.pug&quot;</span>,</span><br><span class="line">      <span class="attr">title</span>: name,</span><br><span class="line">      <span class="attr">chunks</span>: _chunks[name]</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">  entry,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">crossOriginLoading</span>: <span class="string">&quot;anonymous&quot;</span>,</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;[name].[contenthash].js&quot;</span>,</span><br><span class="line">    <span class="attr">pathinfo</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">performance</span>: &#123;</span><br><span class="line">    <span class="attr">hints</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">minimize</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">runtimeChunk</span>: <span class="string">&quot;single&quot;</span>,</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">      <span class="attr">minSize</span>: <span class="number">30000</span>,</span><br><span class="line">      <span class="attr">maxSize</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">minChunks</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">maxAsyncRequests</span>: <span class="number">20</span>,</span><br><span class="line">      <span class="attr">maxInitialRequests</span>: <span class="number">20</span>,</span><br><span class="line">      <span class="attr">automaticNameDelimiter</span>: <span class="string">&quot;~&quot;</span>,</span><br><span class="line">      <span class="comment">// 关键命名函数，将引入次数2次以上的公共业务代码分割出来，并命名</span></span><br><span class="line">      <span class="comment">// 命名的同时将chunk推入_chunks中，改变入口htmlwebpack中chunks的引入</span></span><br><span class="line">      <span class="title function_">name</span>(<span class="params"><span class="variable language_">module</span>, chunks, cacheGroupKey</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> name = chunks.<span class="title function_">map</span>(<span class="function"><span class="params">el</span> =&gt;</span> el.<span class="property">name</span>).<span class="title function_">join</span>(<span class="string">&quot;~&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; chunks.<span class="property">length</span>; index++) &#123;</span><br><span class="line">          <span class="keyword">const</span> c = chunks[index];</span><br><span class="line">          <span class="keyword">if</span> (c.<span class="property">name</span> &amp;&amp; _chunks[c.<span class="property">name</span>] &amp;&amp; !~_chunks[c.<span class="property">name</span>].<span class="title function_">indexOf</span>(name)) &#123;</span><br><span class="line">            _chunks[c.<span class="property">name</span>].<span class="title function_">push</span>(name);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">        <span class="comment">// 分割库代码</span></span><br><span class="line">        <span class="attr">commons</span>: &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;vendors&quot;</span>,</span><br><span class="line">          <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="模块-module"><a href="#模块-module" class="headerlink" title="模块(module)"></a>模块(module)</h3><p>webpack 模块是管理各种文件资源的途径，通过 loader 能解析非.js 文件</p>
<h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4><h5 id="普通-css"><a href="#普通-css" class="headerlink" title="普通 css"></a>普通 css</h5><p>通过<code>import &#39;./style.css&#39;</code>方法引入样式文件，在没有配置 module 的情况下 webpack 是不会正常解析 css 文件的，所以我们必须引入<code>style-loader</code>来将引入的 css 文件解析出来。当然也要引入<code>css-loader</code>来解析 css 文件的内容,css-loader 也能解析 css 中的引入：<code>@import</code>及<code>url()</code>（可以配置不解析某些资源）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">yarn add -D style-loader</span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="comment">// 区分生产环境和开发环境,生产环境时提取css作为单独文件</span></span><br><span class="line">          process.<span class="property">env</span>.<span class="property">NODE_ENV</span> == <span class="string">&#x27;production&#x27;</span> ? <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span> : <span class="string">&#x27;style-loader&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>:&#123;</span><br><span class="line">              <span class="attr">modules</span>: <span class="literal">true</span>, <span class="comment">// css 模块化</span></span><br><span class="line">              <span class="attr">sourceMap</span>: <span class="literal">true</span> <span class="comment">// 开启 sourceMap</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="sass"><a href="#sass" class="headerlink" title="sass"></a>sass</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">yarn add sass-loader node-sass -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          process.<span class="property">env</span>.<span class="property">NODE_ENV</span> == <span class="string">&#x27;production&#x27;</span> ? <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span> : <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">sourceMap</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&#x27;sass-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="postcss"><a href="#postcss" class="headerlink" title="postcss"></a>postcss</h5><p>在<a href="http://postcss.org/">PostCSS</a>官网有着这样的对 PostCSS 特性介绍，箭头后面是对应功能的插件及其 github 地址。</p>
<ol>
<li>increase code readability （增加代码可读性，补全） → <a href="https://github.com/postcss/autoprefixer">Autoprefixer</a></li>
<li>Use tomorrow’s CSS ,today!（使用下代 css） → <a href="https://github.com/MoOx/postcss-cssnext/">postcss-cssnext</a></li>
<li>The end of global CSS（模块化 css）→ <a href="https://github.com/css-modules/postcss-modules">postcss-modules</a></li>
<li>Avoid errors in your CSS（错误提示） → <a href="https://github.com/stylelint/stylelint">stylelint</a></li>
<li>Powerful grid CSS（栅格系统） → lost →<a href="https://github.com/peterramsing/lost">lost</a></li>
</ol>
<h5 id="webpack-中使用-postcss"><a href="#webpack-中使用-postcss" class="headerlink" title="webpack 中使用 postcss"></a>webpack 中使用 postcss</h5><p><code>PostCSS Preset Env</code>可以将现代 CSS 转换为大多数浏览器可以理解的内容，并根据目标浏览器或运行时环境确定所需的 polyfill。</p>
<p>启用 sourceMap 支持，postcss-loader 将使用其他加载器提供的先前的 sourceMap 并进行相应的更新。除<code>style-loader</code>之外的 loader 都需要配置<code>sourceMap: true</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">yarn add -D postcss-preset-env</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      <span class="attr">use</span>: [</span><br><span class="line">      <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">sourceMap</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="comment">// 必须配置，影响@import导入的文件中的加载器的数量，</span></span><br><span class="line">          <span class="comment">// 如果不配置@import导入文件将不会应用后面的加载器</span></span><br><span class="line">          <span class="attr">importLoaders</span>: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">sourceMap</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">indent</span>: <span class="string">&#x27;postcss&#x27;</span>,</span><br><span class="line">          <span class="attr">plugins</span>: <span class="function">() =&gt;</span> [</span><br><span class="line">            <span class="comment">// 使用 PostCSS Preset Env</span></span><br><span class="line">            <span class="comment">// postcss-preset-env已经预置autoprefixer，无需单独添加它</span></span><br><span class="line">            <span class="title function_">postcssPresetEnv</span>(&#123;</span><br><span class="line">              <span class="attr">stage</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="comment">// 支持任何标准的browserslist配置，可以是.browserslistrc文件，package.json中的browserslist或browserslist环境变量。</span></span><br><span class="line">              <span class="attr">browsers</span>: <span class="string">&#x27;last 2 versions&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="images-图像"><a href="#images-图像" class="headerlink" title="images 图像"></a>images 图像</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">yarn add -D url-loader</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">        <span class="comment">// url-loader将少于limit的图像文件转化为dataUrl来减少请求</span></span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="comment">// 当图像大于limit时，会使用备用的loader</span></span><br><span class="line">          <span class="attr">fallback</span>: &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;img/[name].[hash:8].[ext]&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">limit</span>: <span class="number">4096</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="fonts-字体"><a href="#fonts-字体" class="headerlink" title="fonts 字体"></a>fonts 字体</h4><p><code>file-loader</code> 和 <code>url-loader</code> 可以接收并加载任何文件，所以也可以用来加载 fonts 字体文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;url-loader&quot;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">fallback</span>: &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;file-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&quot;img/[name].[hash:8].[ext]&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">limit</span>: <span class="number">4096</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="数据-json-xml"><a href="#数据-json-xml" class="headerlink" title="数据 json xml"></a>数据 json xml</h4><p>加载的资源还有数据，如 JSON 文件，CSV、TSV 和 XML。类似于 NodeJS，JSON 支持实际上是内置的，也就是说 <code>import Data from &#39;./data.json&#39;</code> 默认将正常运行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">+       &#123;</span><br><span class="line">+         <span class="attr">test</span>: <span class="regexp">/\.(csv|tsv)$/</span>,</span><br><span class="line">+         <span class="attr">use</span>: [</span><br><span class="line">+           <span class="string">&#x27;csv-loader&#x27;</span></span><br><span class="line">+         ]</span><br><span class="line">+       &#125;,</span><br><span class="line">+       &#123;</span><br><span class="line">+         <span class="attr">test</span>: <span class="regexp">/\.xml$/</span>,</span><br><span class="line">+         <span class="attr">use</span>: [</span><br><span class="line">+           <span class="string">&#x27;xml-loader&#x27;</span></span><br><span class="line">+         ]</span><br><span class="line">+       &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>java学习笔记(3)-搭建其余后端中间件</title>
    <url>/2024/12/08/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3-%E6%90%AD%E5%BB%BA%E5%85%B6%E4%BD%99%E5%90%8E%E7%AB%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    <content><![CDATA[<p>攻克了数据库集群这一关，接下来轮到Redis、MongoDB、RabbitMQ这几个中间件了。我们依旧还是用Docker环境来创建这些中间件的容器。不得不说有了Docker环境，我们搭建后端这些中间件真的是非常方便。</p>
<span id="more"></span>

<h2 id="创建Redis容器"><a href="#创建Redis容器" class="headerlink" title="创建Redis容器"></a>创建Redis容器</h2><p>用Redis缓存Token令牌和一些业务数据。创建容器:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name redis -p 6379:6379 redis:6.2.6</span><br></pre></td></tr></table></figure>

<p>本地创建 <code>redis.conf</code> 配置文件，然后添加如下内容。如果你用的是云主机，强烈建议你给Redis设置的密码又长有复杂一些。因为黑客经常会黑掉云主机的Redis，然后注入挖矿脚本，云主机的CPU负载就会飙升到100%，影响云主机的正常使用。为了避免Redis密码不被轻易破解，所以密码还是复杂一些吧。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">protected-mode <span class="built_in">yes</span></span><br><span class="line">port 6379</span><br><span class="line">tcp-backlog 511</span><br><span class="line"><span class="built_in">timeout</span> 0</span><br><span class="line">tcp-keepalive 0</span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">&quot;&quot;</span></span><br><span class="line">databases 4</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">stop-writes-on-bgsave-error <span class="built_in">yes</span></span><br><span class="line">rdbcompression <span class="built_in">yes</span></span><br><span class="line">rdbchecksum <span class="built_in">yes</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"><span class="built_in">dir</span> ./</span><br><span class="line">requirepass abc123456</span><br></pre></td></tr></table></figure>

<p>执行命令，创建Redis容器，然后用Redis客户端连接CentOS系统的6379端口。因为Redis是缓存数据，既然数据都是临时的，所以我们就不必把Redis数据文件映射到CentOS系统上面。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -d --name redis -p 6379:6379 \</span><br><span class="line">--net mynet --ip 172.18.0.9 -m 400m \</span><br><span class="line">-v ./redis/conf:/etc/redis \</span><br><span class="line">-e TZ=Asia/Shanghai \</span><br><span class="line">redis:6.2.6 redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>

<h2 id="创建MongoDB容器"><a href="#创建MongoDB容器" class="headerlink" title="创建MongoDB容器"></a>创建MongoDB容器</h2><p>用MongoDB数据库存储商品快照。什么是商品快照。比如说订单记录直接关联商品id，如果你买的是苹果手机。店家修改了商品信息，苹果手机变成了小米手机，那么我们用表连接查询出来的该订单买的就是小米手机，你觉得你能容忍么?肯定不能。为了避免店家修改商品信息影响到已有的订单，所以在项目中引入了商品快照。简单的说，就是店家每次修改商品信息，都会产生一个商品快照记录。买家的订单关联的是快照记录ID。店家不管怎么修改商品信息，都只生成新的快照记录，但是该订单关联的原有快照记录是不会改变的。其实具体过程要比这复杂很多，等我们写到这部分代码的时候，我再详细说明。</p>
<p>由于店家修改商品记录会产生新的快照记录，那么日积月累下来快照表保存的记录就会很多，所以用MVSOL保存快照记录就不太适合了。我们可以用MongoDB或者HBase来存储。这两个数据库都适合保存海量数据，MongoDB可以存储TB级别的数据，HBase更是可以保存PB级别的记录。至于它们两个该选哪一个也是有参考标准的。如果需要对保存的数据做复杂条件查询，建议用HBase数据库。HBase挂载了Phoenix之后，可以支持SQL语句，各种复杂的CRUD操作都不在话下。由于MongoDB不支持SQL语句，所以MongoDB只适合数据的简单读写，太复杂的查询条件是不可以的。因为本课程保存的商品快照，需要的查询条件并不复杂，所以用MongoDB就够了。</p>
<p>创建 <code>mongodb/conf/mongod.conf</code> 文件，填入配置信息。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">net:</span></span><br><span class="line">  <span class="string">port:27017</span></span><br><span class="line">  <span class="string">bindIp:&quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="comment"># storage:</span></span><br><span class="line"><span class="comment">#   dbPath:&quot;/data/db&quot;</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="string">authorization:enabled</span></span><br></pre></td></tr></table></figure>

<p>执行命令，创建MongoDB容器。分配的内存上限是500M，而且数据目录要映射到CentOS系统。容器创建成功之后，在Navicat上面创建MongoDB连接，访问CentOS的27017端口。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name mongodb -p 27017:27017 \</span><br><span class="line">--net mynet --ip 172.18.0.10 -m 800m \</span><br><span class="line">-v ./mongodb/conf:/etc/mongodb \</span><br><span class="line">-v ./mongodb/data:/data/db \</span><br><span class="line">-e MONGO_INITDB_ROOT_USERNAME=admin \</span><br><span class="line">-e MONGO_INITDB_ROOT_PASSWORD=abc123456 \</span><br><span class="line">-e TZ=Asia/Shanghai \</span><br><span class="line">mongo:4.4.7 mongod --config /etc/mongodb/mongod.conf</span><br></pre></td></tr></table></figure>

<h2 id="创建RabbitMQ容器"><a href="#创建RabbitMQ容器" class="headerlink" title="创建RabbitMQ容器"></a>创建RabbitMQ容器</h2><p>使用RabbitMQ实现系统之间的数据传递，比如说某个医疗设备的检测结果想要发送给咱们的体检系统，可以向RabbitMQ的队列发送消息，我们的体检系统从RabbitMQ队列中获取消息，然后把体检数据保存到数据库里面。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -d --name mq \</span><br><span class="line">-p 4369:4369 -p 5671:5671 -p 5672:5672 \</span><br><span class="line">--net mynet --ip 172.18.0.11 -m 400m \</span><br><span class="line">-e RABBITMQ_DEFAULT_USER=admin \</span><br><span class="line">-e RABBITMQ_DEFAULT_PASS=abc123456 \</span><br><span class="line">-e TZ=Asia/Shanghai \</span><br><span class="line">rabbitmq:3.8.9</span><br></pre></td></tr></table></figure>

<h2 id="创建minio容器"><a href="#创建minio容器" class="headerlink" title="创建minio容器"></a>创建minio容器</h2><p>用Minio来保存文件。Minio是亚马逊S3的开源替代品，可以保存TB级别的文件。Minio的安装和配置非常简单，直接用Docker安装即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> -R 777 /root/minio/data/</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -d --name minio_jk \</span><br><span class="line">-p 9000:9000 -p 9001:9001 \</span><br><span class="line">--net mynet --ip 172.18.0.12 -m 400m \</span><br><span class="line">-v ./minio/data:/data \</span><br><span class="line">-e TZ=Asia/Shanghai --privileged=<span class="literal">true</span> \</span><br><span class="line">--<span class="built_in">env</span> MINIO_ROOT_USER=<span class="string">&quot;root&quot;</span> \</span><br><span class="line">--<span class="built_in">env</span> MINIO_ROOT_PASSWORD=<span class="string">&quot;abc123456&quot;</span> \</span><br><span class="line">--<span class="built_in">env</span> MINIO_SKIP_CLIENT=<span class="string">&quot;yes&quot;</span> \  <span class="comment"># 在断网的情况下，也能正常访问</span></span><br><span class="line">minio/minio server /data --console-address <span class="string">&quot;:9001&quot;</span> --address <span class="string">&quot;:9000&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习笔记（1） - MySQL集群</title>
    <url>/2024/11/30/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/</url>
    <content><![CDATA[<h1 id="MySQL集群"><a href="#MySQL集群" class="headerlink" title="MySQL集群"></a>MySQL集群</h1><h2 id="1-数据库的安装"><a href="#1-数据库的安装" class="headerlink" title="1. 数据库的安装"></a>1. 数据库的安装</h2><p>安装MySQL集群，需要先安装MySQL的<code>5.7.41</code>版本，不能使用8.0版本。</p>
<h3 id="1-1-安装MySQL"><a href="#1-1-安装MySQL" class="headerlink" title="1.1 安装MySQL"></a>1.1 安装MySQL</h3><img src="/2024/11/30/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/java_mysql.png" class="">

<p>由于Docker容器的IP地址是动态分配的，每次启动相同容器，它的IP地址都会有变化。这就非常影响数据库集群的搭建，比如说MySQL 2要同步MySQL 1的数据，MySQL1容器的IP地址经常变来变去肯定是不行的，所以我们要给每个Docker容器都分配固定的IP地址。</p>
<span id="more"></span>

<p>Docker默认的网段是 172.17.0.x的，有时候不同项目用到的容器都在同一个网段里面，难免我们使用的时候会弄混淆了。所以不同项目用到的容器最好放在不同的网段。于是我们要为咱们的项目创建一个新的网段，创建容器的时候，把它们的IP地址绑定到该网段。执行下面的命令，创建新的网段:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create --subnet=172.18.0.0/18 mynet</span><br></pre></td></tr></table></figure>

<h2 id="2-创建MySQL-1容器"><a href="#2-创建MySQL-1容器" class="headerlink" title="2 创建MySQL_1容器"></a>2 创建MySQL_1容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker run -it -d --name mysql_1 -p 7001:3306 \</span><br><span class="line">--net mynet --ip 172.18.0.2 \</span><br><span class="line">-m 400m -v ./mysql_1/data:/var/lib/mysql \</span><br><span class="line">-v ./mysql_1/config:/etc/mysql/conf.d \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=abc123456 \</span><br><span class="line">-e TZ=Asia/shanghai --privileged=<span class="literal">true</span> \</span><br><span class="line">mysql:5.7.41 \</span><br><span class="line">--lower_case_table_names=1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>用Navicat连接本地电脑的7001端口。如果你用的是云主机，就去连接云主机的7001端口。</p>
<p>在Navicat上面给MySQL_1创建一个新账户，将来MSQL_2和MySQL_3订阅binlog日志的时候就用这个帐户登陆MySQL_1节点。</p>
<img src="/2024/11/30/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/image1.png" class="">

<p>我们切换到服务器权限选项卡，然后勾选下面的三个权限，这三个权限都是订阅日志所必须的。</p>
<img src="/2024/11/30/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/image2.png" class="">

<p>接下来我们要修改配置文件，所以要先关闭MySQL容器。运行Docker命令，关闭MySQL 1容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop mysql_1</span><br></pre></td></tr></table></figure>
<p>在 <code>/root/mysql_1/config</code> 目录里创建 <code>my.cnf</code> 文件。配置文件的内容如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">#数据库字符集</span><br><span class="line">character_set_server = utf8</span><br><span class="line">#MySQL编号(只可以是数字)</span><br><span class="line">server_id = 1</span><br><span class="line">#开启binlog日志，规定日志文件名称</span><br><span class="line">log_bin = mysql_bin</span><br><span class="line">#开启relaylog日志，规定日志文件名称</span><br><span class="line">relay_log = relay_bin</span><br><span class="line">#从库的写操作是否写入binlog日志</span><br><span class="line">log-slave-updates = 1</span><br><span class="line">#采用严格的SOL语句模式</span><br><span class="line">sql_mode = NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br></pre></td></tr></table></figure>

<p>改好配置文件，我们就可以重新启动MySQL 1节点了:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start mysql_1</span><br></pre></td></tr></table></figure>

<h2 id="3-创建MySQL-2容器"><a href="#3-创建MySQL-2容器" class="headerlink" title="3 创建MySQL_2容器"></a>3 创建MySQL_2容器</h2><p>创建MySQL 2节点的命令如下，用该命令我们创建MySQL 2节点出来。容器创建成功后，你可以用Navicat去连接试试。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -d --name mysql_2 -p 7002:3306 \</span><br><span class="line">--net mynet --ip 172.18.0.3 \</span><br><span class="line">-m 400m -v ./mysql_2/data:/var/lib/mysql \</span><br><span class="line">-v ./mysql_2/config:/etc/mysql/conf.d \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=abc123456 \</span><br><span class="line">-e TZ=Asia/shanghai --privileged=<span class="literal">true</span> \</span><br><span class="line">mysql:5.7.41 \</span><br><span class="line">--lower_case_table_names=1</span><br></pre></td></tr></table></figure>

<p>丛节点配���文件内容如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">#数据库字符集</span><br><span class="line">character_set_server = utf8</span><br><span class="line">#MySQL编号(只可以是数字)</span><br><span class="line">server_id = 2</span><br><span class="line">#为什么从节点要开启binlog日志?(下面有解答)</span><br><span class="line">log_bin = mysql_bin</span><br><span class="line">relay_log = relay_bin</span><br><span class="line">#限制普通帐户无法INSERT、DELETE、UPDATE语句，但是该配置对管理员帐户无效</span><br><span class="line">read-only = 1</span><br><span class="line">sql_mode = NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br></pre></td></tr></table></figure>

<p>作为从节点来说，为什么要开启binlog日志呢?这是为了将来挂载更多读节点而准备的。现在我们是两个从节点与主节点同步数据，主节点的压力并不大。如果将来挂载更多的从节点，那么主节点的磁盘和网络压力就很大了所以我们要分担主节点的压力。让从节点跟从节点去同步数据。例如下面的示意图，A3要把数据同步给A4，A3节点必须要开启binloq日志才可以。</p>
<img src="/2024/11/30/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/image3.png" class="">

<p>在Navicat上面通过MySQL 2节点执行SQL语句，让MySQL 2订阅MySQL 1的日志文件，实现数据同步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#停止数据同步服务</span></span><br><span class="line">stop slave;</span><br><span class="line"><span class="comment">#设置与MySQL 1同步数据</span></span><br><span class="line">change master to master_host=<span class="string">&#x27;172.18.0.2&#x27;</span>,master_port=3306,master_user=<span class="string">&#x27;sync&#x27;</span>,master_password=<span class="string">&#x27;abc123456&#x27;</span>;</span><br><span class="line"><span class="comment">#开启数据同步服务</span></span><br><span class="line">start slave;</span><br><span class="line"><span class="comment">#查询数据同步状态</span></span><br><span class="line">show slave status;</span><br></pre></td></tr></table></figure>

<p>如果SQL语句执行结果中出现两个YES，说明主从同步就配置成功了。如果不成功，你就再检查上述的步骤，然后重新运行这几行SQL语句。或者先停掉容器，再删除容器和映射到 &#x2F;root 目录的mysql目录，重新创建容器，严格遵守每个配置步骤，重新弄一遍主从同步。</p>
<img src="/2024/11/30/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/image4.png" class="">

<h2 id="4-创建MySQL-3容器"><a href="#4-创建MySQL-3容器" class="headerlink" title="4 创建MySQL_3容器"></a>4 创建MySQL_3容器</h2><p>创建MySQL 3节点的命令如下，用该命令我们创建MySQL 3节点出来。容器创建成功后，你可以用Navicat去连接试试。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -d --name mysql_3 -p 7003:3306 \</span><br><span class="line">--net mynet --ip 172.18.0.4 \</span><br><span class="line">-m 400m -v ./mysql_3/data:/var/lib/mysql \</span><br><span class="line">-v ./mysql_3/config:/etc/mysql/conf.d \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=abc123456 \</span><br><span class="line">-e TZ=Asia/shanghai --privileged=<span class="literal">true</span> \</span><br><span class="line">mysql:5.7.41 \</span><br><span class="line">--lower_case_table_names=1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>丛节点配置文件内容如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">#数据库字符集</span><br><span class="line">character_set_server = utf8</span><br><span class="line">#MySQL编号(只可以是数字)</span><br><span class="line">server_id = 3</span><br><span class="line">#为什么从节点要开启binlog日志?(下面有解答)</span><br><span class="line">log_bin = mysql_bin</span><br><span class="line">relay_log = relay_bin</span><br><span class="line">#限制普通帐户无法INSERT、DELETE、UPDATE语句，但是该配置对管理员帐户无效</span><br><span class="line">read-only = 1</span><br><span class="line">sql_mode = NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br></pre></td></tr></table></figure>

<h2 id="5-创建MySQL-4容器"><a href="#5-创建MySQL-4容器" class="headerlink" title="5 创建MySQL_4容器"></a>5 创建MySQL_4容器</h2><p>因为MySQL 4是主节点，功能与MySQL 1是相同的。我们先把节点创建出来，下节课我们再去配置这两个节点的双向同步。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -d --name mysql_4 -p 7004:3306 \</span><br><span class="line">--net mynet --ip 172.18.0.5 \</span><br><span class="line">-m 400m -v ./mysql_4/data:/var/lib/mysql \</span><br><span class="line">-v ./mysql_4/config:/etc/mysql/conf.d \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=abc123456 \</span><br><span class="line">-e TZ=Asia/shanghai --privileged=<span class="literal">true</span> \</span><br><span class="line">mysql:5.7.41 \</span><br><span class="line">--lower_case_table_names=1</span><br></pre></td></tr></table></figure>

<p>还是照例创建 sync 帐户，密码是 abc123456，然后设置好三个权限。接下来还是老规矩，停掉MySQL容器:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop mysql_4</span><br></pre></td></tr></table></figure>

<p>在 &#x2F;root&#x2F;mysql 4&#x2F;config 目录里创建 my.cnf 文件。配置文件的内容如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">#数据库字符集</span><br><span class="line">character_set_server = utf8</span><br><span class="line">#MySQL编号(只可以是数字)</span><br><span class="line">server_id = 4</span><br><span class="line">#开启binlog日志，规定日志文件名称</span><br><span class="line">log_bin = mysql_bin</span><br><span class="line">#开启relaylog日志，规定日志文件名称</span><br><span class="line">relay_log = relay_bin</span><br><span class="line">#从库的写操作是否写入binlog日志</span><br><span class="line">log-slave-updates = 1</span><br><span class="line">#采用严格的SOL语句模式</span><br><span class="line">sql_mode = NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br></pre></td></tr></table></figure>

<p>执行Docker命令重新启动MySQL容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start mysql_4</span><br></pre></td></tr></table></figure>

<h2 id="6-配置MySQL-5节点"><a href="#6-配置MySQL-5节点" class="headerlink" title="6 配置MySQL 5节点"></a>6 配置MySQL 5节点</h2><p>先执行命令，创建出MySQL容器，该节点是读节点。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -d --name mysql_5 -p 7005:3306 \</span><br><span class="line">--net mynet --ip 172.18.0.6 \</span><br><span class="line">-m 400m -v ./mysql_5/data:/var/lib/mysql \</span><br><span class="line">-v ./mysql_5/config:/etc/mysql/conf.d \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=abc123456 \</span><br><span class="line">-e TZ=Asia/shanghai --privileged=<span class="literal">true</span> \</span><br><span class="line">mysql:5.7.41 \</span><br><span class="line">--lower_case_table_names=1</span><br></pre></td></tr></table></figure>

<p>按照上面丛节点创建步骤，创建出MySQL 5节点。</p>
<p>执行SQL语句有变化，查看结果是不是有两个YES</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#停止数据同步服务</span></span><br><span class="line">stop slave;</span><br><span class="line"><span class="comment">#设置与MySQL 4同步数据</span></span><br><span class="line">change master to master_host=<span class="string">&#x27;172.18.0.5&#x27;</span>,master_port=3306,master_user=<span class="string">&#x27;sync&#x27;</span>,master_password=<span class="string">&#x27;abc123456&#x27;</span>;</span><br><span class="line"><span class="comment">#开启数据同步服务</span></span><br><span class="line">start slave;</span><br><span class="line"><span class="comment">#查询数据同步状态</span></span><br><span class="line">show slave status;</span><br></pre></td></tr></table></figure>

<h2 id="7-配置MySQL-6节点"><a href="#7-配置MySQL-6节点" class="headerlink" title="7 配置MySQL 6节点"></a>7 配置MySQL 6节点</h2><p>先执行命令，创建出MySQL容器，该节点是读节点。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -d --name mysql_6 -p 7006:3306 \</span><br><span class="line">--net mynet --ip 172.18.0.7 \</span><br><span class="line">-m 400m -v ./mysql_6/data:/var/lib/mysql \</span><br><span class="line">-v ./mysql_6/config:/etc/mysql/conf.d \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=abc123456 \</span><br><span class="line">-e TZ=Asia/shanghai --privileged=<span class="literal">true</span> \</span><br><span class="line">mysql:5.7.41 \</span><br><span class="line">--lower_case_table_names=1</span><br></pre></td></tr></table></figure>

<p>按照上面丛节点创建步骤，创建出MySQL 6节点。</p>
<p>执行SQL语句有变化，查看结果是不是有两个YES</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#停止数据同步服务</span></span><br><span class="line">stop slave;</span><br><span class="line"><span class="comment">#设置与MySQL 4同步数据</span></span><br><span class="line">change master to master_host=<span class="string">&#x27;172.18.0.5&#x27;</span>,master_port=3306,master_user=<span class="string">&#x27;sync&#x27;</span>,master_password=<span class="string">&#x27;abc123456&#x27;</span>;</span><br><span class="line"><span class="comment">#开启数据同步服务</span></span><br><span class="line">start slave;</span><br><span class="line"><span class="comment">#查询数据同步状态</span></span><br><span class="line">show slave status;</span><br></pre></td></tr></table></figure>

<h1 id="配置主从双向同步"><a href="#配置主从双向同步" class="headerlink" title="配置主从双向同步"></a>配置主从双向同步</h1><p>MySQL 1和MySQL 4之间要配置双向主从同步，其实很简单。就是先到MySQL 1节点上执行4条SQL语句，然后再切换到MySQL 4节点，依旧执行4条SQL语句，双向主从同步就配置完成了。</p>
<h2 id="配置MySQL-1节点"><a href="#配置MySQL-1节点" class="headerlink" title="配置MySQL 1节点"></a>配置MySQL 1节点</h2><p>在Navicat上面，到MySQL 1节点上执行4条SQL语句。以MySQL 4为主节点，订阅日志同步数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#停止数据同步服务</span></span><br><span class="line">stop slave;</span><br><span class="line"><span class="comment">#跳过错误事件</span></span><br><span class="line"><span class="built_in">set</span> GLOBAL SQL_SLAVE_SKIP_COUNTER=1;</span><br><span class="line"><span class="comment">#设置与MySQL 4同步数据</span></span><br><span class="line">change master to master_host=<span class="string">&#x27;172.18.0.5&#x27;</span>,master_port=3306,master_user=<span class="string">&#x27;sync&#x27;</span>,master_password=<span class="string">&#x27;abc123456&#x27;</span>;</span><br><span class="line"><span class="comment">#开启数据同步服务</span></span><br><span class="line">start slave;</span><br><span class="line"><span class="comment">#查询数据同步状态</span></span><br><span class="line">show slave status;</span><br></pre></td></tr></table></figure>

<h2 id="配置MySQL-4节点"><a href="#配置MySQL-4节点" class="headerlink" title="配置MySQL 4节点"></a>配置MySQL 4节点</h2><p>在Navicat上面，到MySQL 4节点上执行4条SQL语句。以MySQL 1为主节点，订阅日志同步数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#停止数据同步服务</span></span><br><span class="line">stop slave;</span><br><span class="line"><span class="comment">#跳过错误事件</span></span><br><span class="line"><span class="built_in">set</span> GLOBAL SQL_SLAVE_SKIP_COUNTER=1;</span><br><span class="line"><span class="comment">#设置与MySQL 1同步数据</span></span><br><span class="line">change master to master_host=<span class="string">&#x27;172.18.0.2&#x27;</span>,master_port=3306,master_user=<span class="string">&#x27;sync&#x27;</span>,master_password=<span class="string">&#x27;abc123456&#x27;</span>;</span><br><span class="line"><span class="comment">#开启数据同步服务</span></span><br><span class="line">start slave;</span><br><span class="line"><span class="comment">#查询数据同步状态</span></span><br><span class="line">show slave status;</span><br></pre></td></tr></table></figure>

<h2 id="导入SQL文件"><a href="#导入SQL文件" class="headerlink" title="导入SQL文件"></a>导入SQL文件</h2><p>由于MySQL 1和MySQL 4都是主节点，我们在这两个节点中任意一个MySQL上面导入SQL文件，那么数据表都会同步到其余的5个MySQL节点上面。例如在MySQL1节点上新建逻辑库，命名为 his，然后把SQL文件导入到该逻辑库中。</p>
<img src="/2024/11/30/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/image5.png" class="">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create database his;</span><br><span class="line">use his;</span><br><span class="line"><span class="built_in">source</span> /root/his.sql;</span><br></pre></td></tr></table></figure>

<h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><p>在创建数据库时，同步成功，但是删除数据库时，同步失败，提示错误信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Warning] Slave: Can<span class="string">&#x27;t drop database &#x27;</span>his<span class="string">&#x27;; database doesn&#x27;</span>t exist Error_code: 1008</span><br></pre></td></tr></table></figure>

<p>解决办法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br><span class="line"><span class="built_in">set</span> global sql_slave_skip_counter=1;</span><br><span class="line">start slave;</span><br><span class="line">show slave status;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>创建 spring boot 项目 4</title>
    <url>/2024/12/21/%E5%88%9B%E5%BB%BA-spring-boot-%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><img src="/2024/12/21/%E5%88%9B%E5%BB%BA-spring-boot-%E9%A1%B9%E7%9B%AE/image1.png" class="" title="思维导图">

<h3 id="利用Maven创建SpringBoot项目"><a href="#利用Maven创建SpringBoot项目" class="headerlink" title="利用Maven创建SpringBoot项目"></a>利用Maven创建SpringBoot项目</h3><p>在IDEA工具上面新建SpringBoot项目，项目的名称为 <code>his-api</code> 需要注意Java语法版本没有15，所以我们选择低版本的JDK语法，后续在 pom.xml文件中改成JDK15语法即可。</p>
<span id="more"></span>

<img src="/2024/12/21/%E5%88%9B%E5%BB%BA-spring-boot-%E9%A1%B9%E7%9B%AE/image2.png" class="" title="创建SpringBoot项目">

<h3 id="配置Jetty"><a href="#配置Jetty" class="headerlink" title="配置Jetty"></a>配置Jetty</h3><p>在pom.xml文件中配置Jetty，Jetty是SpringBoot默认的Web容器，但是Jetty的性能不如Tomcat，所以我们可以配置Jetty为Web容器。</p>
<img src="/2024/12/21/%E5%88%9B%E5%BB%BA-spring-boot-%E9%A1%B9%E7%9B%AE/image3.png" class="" title="配置Jetty">

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment"># 端口号</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7700</span></span><br><span class="line">  <span class="comment"># jetty配置</span></span><br><span class="line">  <span class="attr">jetty:</span></span><br><span class="line">    <span class="attr">threads:</span></span><br><span class="line">      <span class="comment"># 接受连接的线程数</span></span><br><span class="line">      <span class="attr">acceptors:</span> <span class="number">4</span></span><br><span class="line">      <span class="comment"># 选择连接的线程数</span></span><br><span class="line">      <span class="attr">selectors:</span> <span class="number">8</span></span><br><span class="line">      <span class="comment"># 最小线程数</span></span><br><span class="line">      <span class="attr">min:</span> <span class="number">8</span></span><br><span class="line">      <span class="comment"># 最大线程数</span></span><br><span class="line">      <span class="attr">max:</span> <span class="number">200</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/his-api</span></span><br></pre></td></tr></table></figure>

<h3 id="配置Druid连接池和MyBatis"><a href="#配置Druid连接池和MyBatis" class="headerlink" title="配置Druid连接池和MyBatis"></a>配置Druid连接池和MyBatis</h3><h4 id="配置Druid连接池"><a href="#配置Druid连接池" class="headerlink" title="配置Druid连接池"></a>配置Druid连接池</h4><p>既然要用JDBC连接数据库，那么必然少不了数据库连接池。虽然Java领域有很多知名的数据库连接池产品，但是其中功能最丰富、稳定性最好的产品当属阿里巴巴出品的Druid连接池。该连接池不仅功能齐全，而且还内置了监控功能，我们可以利用Web页面查看数据库连接池的负载情况。</p>
<p>在 application.yml 文件中，添加Druid连接池和MyCat连接信息。如果你用的是云主机，要把 localhost 写成云主机的IP地址</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="comment"># 是否启用多部分文件上传</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 单个文件最大大小</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">20MB</span></span><br><span class="line">      <span class="comment"># 请求最大大小</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">20MB</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="comment"># 这里需要注意，MySQL8.0以上版本使用com.mysql.cj.jdbc.Driver，MySQL8.0以下版本使用com.mysql.jdbc.Driver， mycat 使用 com.mysql.jdbc.Driver，且mysql-connector-java 版本需要是5.1.47</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:8066/his?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">abc123456</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">8</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">8</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">16</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">test-on-borrow:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">SELECT</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h4 id="配置MyBatis"><a href="#配置MyBatis" class="headerlink" title="配置MyBatis"></a>配置MyBatis</h4><p>在 application.yml 文件中，添加MyBatis配置信息。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.jiang.his.db.pojo</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 打印sql</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">info</span></span><br><span class="line">    <span class="attr">com.jiang.his.db.dao:</span> <span class="string">warn</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">console:</span> <span class="string">&#x27;%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p [%c&#123;1&#125;] - %msg%n&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="生成MyBatis代码"><a href="#生成MyBatis代码" class="headerlink" title="生成MyBatis代码"></a>生成MyBatis代码</h4><p>接下来我们创建 com.example.his.api.db.dao 和 com.example.his.api.db.pojo 两个package，用来存放MyBatis用到的DAO接口和POJO映射类。</p>
<h5 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a>连接MySQL</h5><p>打开IDEA工具，给IDEA内置的DataGrip程序配置数据库连接。DataDrip是一种相当于Navicat的数据库客户端程序，但是功能性和兼容性不如Navicat。我们配置DataGrip的目的是让MyBatisX插件能根据数据表生成POJO类和DAO接口。</p>
<p>连接MySQL数据库，在IDEA工具中，点击左上角的DataGrip图标，然后点击+号，选择MySQL，输入数据库连接信息，点击测试连接，如果连接成功，点击确定。</p>
<h5 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h5><p>选中所有的数据表然后点击右键，选择菜单中第一个选项，调用MyBatisX插件生成代码。</p>
<blockquote>
<p>IDEA的MyBatisX插件不能用，在这里提供一个<a href="https://github.com/forlornMWS/MybatisX/releases/tag/plugin">MyBatisX插件</a>，下载后本地安装。</p>
</blockquote>
<p>在MyBatis插件的面板中配置参数。比如说生成的POJO类没有 <code>tb</code> 前缀，每个POJO的结尾都要加上 <code>Entity</code> 字样。</p>
<img src="/2024/12/21/%E5%88%9B%E5%BB%BA-spring-boot-%E9%A1%B9%E7%9B%AE/image3.png" class="" title="配置MyBatisX">

<p>点击next按钮。</p>
<img src="/2024/12/21/%E5%88%9B%E5%BB%BA-spring-boot-%E9%A1%B9%E7%9B%AE/image4.png" class="" title="点击next按钮">

<p>点击Generate按钮，MyBatisX插件会根据数据表生成POJO类和DAO接口。</p>
<h5 id="修改数据映射类型"><a href="#修改数据映射类型" class="headerlink" title="修改数据映射类型"></a>修改数据映射类型</h5><p>打开生成的POJO映射类，如果属性变量是 <code>Date</code> 或者 <code>Object</code> 类型的，我们都改成 <code>string</code> 类型。首先我来解答为什么映射类中不使用Date数据类型，这是因为后端向前端返回JSON数据的时候，Date对象转化成字符串的时候结果不可控，很可能把毫秒时间和时区都给带上了，为了避免这种情况发生，所以映射类中不要有Date数据类型。至于说Object类型是怎么产生的呢?如果数据表字段是Enum类型或者JSON类型，MvBatisX插件生成代码的时候就会出现Object类型，于是需要我们自己把映射类中的Object修改成String类型。<br>新建一个 <code>db.pojo</code> 包，将修改后的entity类复制到 <code>db.pojo</code> 包中。<br>将mapper文件夹中的文件改成dao后缀文件。新建一个 <code>db.dao</code> 包，将生成的DAO接口复制到 <code>db.dao</code> 包中。</p>
<h3 id="配置pom-xml文件"><a href="#配置pom-xml文件" class="headerlink" title="配置pom.xml文件"></a>配置pom.xml文件</h3><p>在pom.xml文件中，配置SpringBoot的版本，以及SpringBoot的依赖包。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jiang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>his<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>his<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>15<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.6.13<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- redis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mail --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mongodb --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 工具类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- http状态码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpcore<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后端验证 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- satoken --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.dev33<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sa-token-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.34.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.dev33<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sa-token-dao-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.34.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.dev33<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sa-token-spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.34.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.dev33<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sa-token-alone-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.34.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 对象池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成二维码图片 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.zxing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 微信支付 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.felord<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>payment-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.17.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 腾讯云 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.tencentcloudapi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tencentcloud-sdk-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.416<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- minio --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文件上传 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- okio --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- amqp-client --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- amqp --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- websocket --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 规则引擎 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>QLExpress<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- poi --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-scratchpad<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 华为云 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;com.huawei.apigateway&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;java-sdk-core&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;3.0.2&lt;/version&gt;</span></span><br><span class="line"><span class="comment">            &lt;exclusions&gt;</span></span><br><span class="line"><span class="comment">                &lt;exclusion&gt;</span></span><br><span class="line"><span class="comment">                    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">                    &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">                &lt;/exclusion&gt;</span></span><br><span class="line"><span class="comment">                &lt;exclusion&gt;</span></span><br><span class="line"><span class="comment">                    &lt;groupId&gt;log4j&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">                    &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">                &lt;/exclusion&gt;</span></span><br><span class="line"><span class="comment">                &lt;exclusion&gt;</span></span><br><span class="line"><span class="comment">                    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">                    &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">                &lt;/exclusion&gt;</span></span><br><span class="line"><span class="comment">            &lt;/exclusions&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 腾讯云 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.tencentyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tls-sig-api-v2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.huaweicloud.sdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>huaweicloud-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.87<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>15<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>15<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.jiang.his.HisApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>了解一下JS的正则表达式</title>
    <url>/2017/09/22/%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8BJS%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="定义-Define"><a href="#定义-Define" class="headerlink" title="定义 Define"></a>定义 Define</h2><p>正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象。这些模式或者说对象被用于 RegExp 的 exec 和 test 方法, 以及 String 的 match、replace、search 和 split 方法。</p>
<p>RegExp 是一个用于创建正则表达式对象的构造函数，用于将文本与一个模式匹配。</p>
<h2 id="创建一个正则表达式"><a href="#创建一个正则表达式" class="headerlink" title="创建一个正则表达式"></a>创建一个正则表达式</h2><p>有两种方法创建一个正则表达式。</p>
<span id="more"></span>

<h3 id="1-字面量方式"><a href="#1-字面量方式" class="headerlink" title="1. 字面量方式"></a>1. 字面量方式</h3><p>由包含在斜杠之间的模式组成，如下所示:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   /pattern/flags </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/pattern/</span>;</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/ab+c/</span>;</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^[a-zA-Z]+[0-9]*\W?_$/gi</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在加载脚本后，正则表达式字面值提供正则表达式的编译。当正则表达式保持不变时，使用此方法可获得更好的性能。</p>
<h3 id="2-RegExp实例创建"><a href="#2-RegExp实例创建" class="headerlink" title="2. RegExp实例创建"></a>2. RegExp实例创建</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    new RegExp(pattern [, flags])</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;ab+c&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/ab+c/</span>); <span class="comment">// 与上面等价</span></span><br><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/^[a-zA-Z]+[0-9]*\W?_$/</span>, <span class="string">&quot;gi&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;^[a-zA-Z]+[0-9]*\W?_$&quot;</span>, <span class="string">&quot;gi&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>字面量方式和实例创建的方式在正则中的区别?<br>1、字面量形式提供正则表达式的编译（compilation）状态，当正则表达式保持为常量时使用字面量。而构造函数方式，如<code>new RegExp(&#39;ab+c&#39;)</code>提供了正则表达式运行时编译（runtime compilation）。<br>2、字面量方式中出现的一切都是元字符,所以不能进行变量值的拼接，而实例创建的方式是可以的。实例创建方式的好处在于可以在运行时编译，这个特性可以方便用来处理用户输入。<br>3、字面量中直接写\d就可以，而在实例中有两种情况，如果直接使用&#x2F;pattern&#x2F;这种方式创建与字面量方式书写无区别，即\d，如果是带双引号，双引号内的需要把它转译\\d</li>
</ul>
</blockquote>
<p>比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Jack&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d+name+\d+$/</span>; <span class="comment">//这样写是无效的 必须得用实例创建</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RexExp</span>(<span class="string">&quot;^\\d&quot;</span> + name + <span class="string">&quot;\\d+$&quot;</span>,<span class="string">&quot;g&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="RegExp对象的参数"><a href="#RegExp对象的参数" class="headerlink" title="RegExp对象的参数"></a>RegExp对象的参数</h4><p><code>pattern</code>:正则表达式的文本。</p>
<p><code>flags</code>:可以具有以下值的任意组合：</p>
<blockquote>
<p><code>g</code>：全局匹配;找到所有匹配，而不是在第一个匹配后停止<br><code>i</code>：忽略大小写<br><code>m</code>：多行; 将开始和结束字符（^和$）视为在多行上工作（例如，分别匹配每一行的开始和结束（由 \n 或 \r 分割），而不只是只匹配整个输入字符串的最开始和最末尾处。<br><code>u</code>：Unicode; 将模式视为Unicode序列点的序列<br><code>y</code>：粘性匹配; 仅匹配目标字符串中此正则表达式的lastIndex属性指示的索引(并且不尝试从任何后续的索引匹配)。</p>
</blockquote>
<p><strong>从ECMAScript 6开始</strong>，当第一个参数为正则表达式而第二个标志参数存在时，<code>new RegExp(/ab+c/, &#39;i&#39;)</code>不再抛出TypeError （“当从其他正则表达式进行构造时不支持标志”）的异常，取而代之，将使用这些参数创建一个新的正则表达式。</p>
<h2 id="写一个正则表达式"><a href="#写一个正则表达式" class="headerlink" title="写一个正则表达式"></a>写一个正则表达式</h2><p>一个正则表达式模式是由简单的字符所构成的，比如<code>/abc/</code>, 或者是简单和特殊字符的组合，比如 <code>/ab*c/</code> 或 <code>/Chapter (\d+)\.\d*/</code>。后者用到了括号，它在正则表达式中可以被用作是一个记忆设备。这一部分正则所匹配的字符将会被记住，在后面可以被利用。正如 <a href="#%E4%BD%BF%E7%94%A8%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D">使用括号的子字符串匹配</a>。</p>
<h3 id="简单模式"><a href="#简单模式" class="headerlink" title="简单模式"></a>简单模式</h3><p>简单模式是由你找到的直接匹配所构成的。比如，&#x2F;abc&#x2F;这个模式就匹配了在一个字符串中，仅仅字符 <code>&#39;abc&#39;</code> 同时出现并按照这个顺序。在 <code>&quot;Hi, do you know your abc&#39;s?&quot;</code> 和 <code>&quot;The latest airplane designs evolved from slabcraft.&quot;</code> 就会匹配成功。在上面的两个实例中，匹配的是子字符串 <code>&#39;abc&#39;</code>。在字符串 <code>&quot;Grab crab&quot;</code> 中将不会被匹配，因为它不包含任何的 ‘abc’ 子字符串。</p>
<h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><p>当你需要搜索一个比直接匹配需要更多条件的匹配时，比如寻找一个或多个 ‘b’，或者寻找空格，那么这时模式将要包含特殊字符。比如， 模式<code>/ab*c/</code>匹配了一个单独的 ‘a’ 后面跟了零个或者多个 ‘b’（*的意思是前面一项出现了零个或者多个），且后面跟着 ‘c’ 的任何字符组合。在字符串 <code>&quot;cbbabbbbcdebc&quot;</code> 中，这个模式匹配了子字符串 <code>&quot;abbbbc&quot;</code>。</p>
<h4 id="正则表达式中的特殊字符"><a href="#正则表达式中的特殊字符" class="headerlink" title="正则表达式中的特殊字符"></a>正则表达式中的特殊字符</h4><ul>
<li><a href="#%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%88%AB">字符类别（Character Classes）</a></li>
<li><a href="#%E5%AD%97%E7%AC%A6%E9%9B%86%E5%90%88">字符集合（Character Sets）</a></li>
<li><a href="%E8%BE%B9%E7%95%8C">边界（Boundaries）</a></li>
<li><a href="#%E5%88%86%E7%BB%84%E4%B8%8E%E5%8F%8D%E5%90%91%E5%BC%95%E7%94%A8">分组（grouping）与反向引用（back references）</a></li>
<li><a href="#%E6%95%B0%E9%87%8F%E8%AF%8D">数量词（Quantifiers）</a></li>
<li><a href="#%E6%96%AD%E8%A8%80">断言（Assertions）</a></li>
</ul>
<h4 id="字符类别"><a href="#字符类别" class="headerlink" title="字符类别"></a>字符类别</h4><h5 id="点号，小数点"><a href="#点号，小数点" class="headerlink" title=".(点号，小数点)"></a><code>.(点号，小数点)</code></h5><p>匹配任意单个字符，但是行结束符除外：<code>\n \r \u2028</code> 或 <code>\u2029</code>。</p>
<p>在字符集中，点( . )失去其特殊含义，并匹配一个字面点( . )。</p>
<p>需要注意的是，m 多行（multiline）标志不会改变点号的表现。因此为了匹配多行中的字符集，可使用[^] （当然你不是打算用在旧版本 IE 中），它将会匹配任意字符，包括换行符。</p>
<p>例如，<code>/.y/</code> 匹配 <code>&quot;yes make my day&quot;</code> 中的 <code>&quot;my&quot;</code> 和 <code>&quot;ay&quot;</code>，但是不匹配 <code>&quot;yes&quot;</code>。</p>
<h5 id="d"><a href="#d" class="headerlink" title="\d"></a><code>\d</code></h5><p>匹配任意阿拉伯数字。等价于[0-9]。</p>
<p>例如，<code>/\d/</code> 或 <code>/[0-9]/</code> 匹配 “B2 is the suite number.” 中的 ‘2’。 </p>
<blockquote>
<ul>
<li><code>\d</code> 表示数字，即 digit，<code>\w</code> 表示单词，等同于 <code>[A-Za-z0-9_]</code>，原文就是 word。</li>
</ul>
</blockquote>
<h5 id="D"><a href="#D" class="headerlink" title="\D"></a><code>\D</code></h5><p>匹配任意一个不是阿拉伯数字的字符。等价于[^0-9]。</p>
<p>例如，<code>/\D/</code> 或 <code>/[^0-9]/</code> 匹配 “B2 is the suite number.” 中的 ‘B’。</p>
<h5 id="w"><a href="#w" class="headerlink" title="\w"></a><code>\w</code></h5><p>匹配任意来自基本拉丁字母表中的字母数字字符，还包括下划线。等价于 <code>[A-Za-z0-9_]</code>。</p>
<p>例如，<code>/\w/</code> 匹配 “apple” 中的 ‘a’，”$5.28” 中的 ‘5’ 和 “3D” 中的 ‘3’。</p>
<h5 id="W"><a href="#W" class="headerlink" title="\W"></a><code>\W</code></h5><p>匹配任意不是基本拉丁字母表中单词（字母数字下划线）字符的字符。等价于 <code>[^A-Za-z0-9_]</code>。</p>
<p>例如，<code>/\W/</code> 或 &#x2F;[^A-Za-z0-9_]&#x2F; 匹配 “50%” 中的 ‘%’。</p>
<h5 id="s"><a href="#s" class="headerlink" title="\s"></a><code>\s</code></h5><p>匹配一个空白符，包括空格、制表符、换页符、换行符和其他 Unicode 空格。</p>
<p>等价于 <code>[ \f\n\r\t\v​\u00a0\u1680​\u180e\u2000​\u2001\u2002​\u2003\u2004​ \u2005\u2006​\u2007\u2008​\u2009\u200a​\u2028\u2029​​\u202f\u205f​ \u3000]</code>。</p>
<p>例如 <code>/\s\w*/</code> 匹配 “foo bar” 中的 ‘ bar’。</p>
<h5 id="S"><a href="#S" class="headerlink" title="\S"></a><code>\S</code></h5><p>匹配一个非空白符。等价于 <code>[^ \f\n\r\t\v​\u00a0\u1680​\u180e\u2000​\u2001\u2002​\u2003\u2004​ \u2005\u2006​\u2007\u2008​\u2009\u200a​\u2028\u2029​\u202f\u205f​\u3000]</code>。</p>
<p>例如，<code>/\S\w*/</code> 匹配 “foo bar” 中的 ‘foo’。</p>
<h5 id="t"><a href="#t" class="headerlink" title="\t"></a><code>\t</code></h5><p>匹配一个水平制表符（tab）</p>
<h5 id="r"><a href="#r" class="headerlink" title="\r"></a><code>\r</code></h5><p>匹配一个回车符（carriage return）</p>
<blockquote>
<ul>
<li>回车 <code>\r</code> 本义是光标重新回到本行开头，r 即 return。</li>
</ul>
</blockquote>
<h5 id="n"><a href="#n" class="headerlink" title="\n"></a><code>\n</code></h5><p>匹配一个换行符（linefeed）</p>
<h5 id="v"><a href="#v" class="headerlink" title="\v"></a><code>\v</code></h5><p>匹配一个垂直制表符（vertical tab）</p>
<h5 id="f"><a href="#f" class="headerlink" title="\f"></a><code>\f</code></h5><p>匹配一个换页符（form-feed）</p>
<h5 id="b"><a href="#b" class="headerlink" title="[\b]"></a><code>[\b]</code></h5><p>匹配一个退格符（backspace）（不要与 \b 混淆）</p>
<h5 id="0"><a href="#0" class="headerlink" title="\0"></a><code>\0</code></h5><p>匹配一个 NUL 字符。不要在此后面跟小数点。</p>
<h5 id="cX"><a href="#cX" class="headerlink" title="\cX"></a><code>\cX</code></h5><p>X 是 A - Z 的一个字母。匹配字符串中的一个控制字符。</p>
<p>例如，<code>/\cM/</code> 匹配字符串中的 control-M。</p>
<h5 id="xhh"><a href="#xhh" class="headerlink" title="\xhh"></a><code>\xhh</code></h5><p>匹配编码为 <code>hh</code> （两个十六进制数字）的字符。</p>
<h5 id="uhhhh"><a href="#uhhhh" class="headerlink" title="\uhhhh"></a><code>\uhhhh</code></h5><p>匹配 Unicode 值为 hhhh （四个十六进制数字）的字符。</p>
<h5 id="反斜杠"><a href="#反斜杠" class="headerlink" title="\(反斜杠)"></a><code>\(反斜杠)</code></h5><p>对于那些通常被认为字面意义的字符来说，表示下一个字符具有特殊用处，并且不会被按照字面意义解释。</p>
<p>例如 <code>/b/</code> 匹配字符 ‘b’。在 b 前面加上一个反斜杠，即使用 <code>/\b/</code>，则该字符变得特殊，以为这匹配一个单词边界。</p>
<p>或</p>
<p>对于那些通常特殊对待的字符，表示下一个字符不具有特殊用途，会被按照字面意义解释。</p>
<p>例如，<code>*</code> 是一个特殊字符，表示匹配某个字符 0 或多次，如 <code>/a*/</code> 意味着 0 或多个 “a”。 为了匹配字面意义上的 <code>*</code> ，在它前面加上一个反斜杠，例如，<code>/a\*/</code>匹配 ‘a*’。</p>
<h4 id="字符集合"><a href="#字符集合" class="headerlink" title="字符集合"></a>字符集合</h4><h5 id="xyz"><a href="#xyz" class="headerlink" title="[xyz]"></a><code>[xyz]</code></h5><p>一个字符集合，也叫字符组。匹配集合中的任意一个字符。你可以使用连字符’<code>-</code>‘指定一个范围。</p>
<p>例如，<code>[abcd]</code> 等价于 <code>[a-d]</code>，匹配”<code>brisket</code>“中的’b’和”<code>chop</code>“中的’c’。</p>
<h5 id="xyz-1"><a href="#xyz-1" class="headerlink" title="[^xyz]"></a><code>[^xyz]</code></h5><p>一个反义或补充字符集，也叫反义字符组。也就是说，它匹配任意不在括号内的字符。你也可以通过使用连字符 ‘-‘ 指定一个范围内的字符。</p>
<p>例如，<code>[^abc]</code> 等价于 <code>[^a-c]</code>。 第一个匹配的是 “bacon” 中的’o’ 和 “chop” 中的 ‘h’。</p>
<h4 id="边界"><a href="#边界" class="headerlink" title="边界"></a>边界</h4><h5 id=""><a href="#" class="headerlink" title="^"></a><code>^</code></h5><p>匹配输入开始。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符后的开始处。</p>
<p>例如，<code>/^A/</code> 不匹配 “an A” 中的 “A”，但匹配 “An A” 中的 “A”。</p>
<blockquote>
<ul>
<li>换行 <code>\n</code> 本义是光标往下一行（不一定到下一行行首），n 即 newline。</li>
</ul>
</blockquote>
<h5 id="-1"><a href="#-1" class="headerlink" title="$"></a><code>$</code></h5><p>匹配输入结尾。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符的前的结尾处。</p>
<p>例如，<code>/t$/</code> 不匹配 “eater” 中的 “t”，但匹配 “eat” 中的 “t”。</p>
<h5 id="b-1"><a href="#b-1" class="headerlink" title="\b"></a><code>\b</code></h5><p>匹配一个零宽单词边界（zero-width word boundary），如一个字母与一个空格之间。 （不要和 <code>[\b]</code> 混淆）</p>
<p>例如，<code>/\bno/</code> 匹配 “at noon” 中的 “no”，<code>/ly\b/</code> 匹配 “possibly yesterday.” 中的 “ly”。</p>
<h5 id="B"><a href="#B" class="headerlink" title="\B"></a><code>\B</code></h5><p>匹配一个零宽非单词边界（zero-width non-word boundary），如两个字母之间或两个空格之间。</p>
<p>例如，<code>/\Bon/</code> 匹配 “at noon” 中的 “on”，<code>/ye\B/</code> 匹配 “possibly yesterday.” 中的 “ye”。</p>
<h4 id="分组与反向引用"><a href="#分组与反向引用" class="headerlink" title="分组与反向引用"></a>分组与反向引用</h4><h5 id="x"><a href="#x" class="headerlink" title="(x)"></a><code>(x)</code></h5><p>匹配 <code>x</code> 并且捕获匹配项。 这被称为捕获括号（capturing parentheses）。</p>
<p>例如，<code>/(foo)/</code> 匹配且捕获 “foo bar.” 中的 “foo”。被匹配的子字符串可以在结果数组的元素 <code>[1], ..., [n]</code> 中找到，或在被定义的 RegExp 对象的属性 $1, …, $9 中找到。</p>
<p>捕获组（Capturing groups）有性能惩罚。如果不需再次访问被匹配的子字符串，最好使用非捕获括号（non-capturing parentheses），见下面。</p>
<h5 id="x-1"><a href="#x-1" class="headerlink" title="(?:x)"></a><code>(?:x)</code></h5><p>匹配 <code>x</code> 不会捕获匹配项。这被称为非捕获括号（non-capturing parentheses）。匹配项不能够从结果数组的元素 <code>[1], ..., [n]</code> 或已被定义的 <code>RegExp</code> 对象的属性 <code>$1, ..., $9</code> 再次访问到。</p>
<h5 id="n-1"><a href="#n-1" class="headerlink" title="\n"></a><code>\n</code></h5><p><code>n</code> 是一个正整数。一个反向引用（back reference），指向正则表达式中第 n 个括号（从左开始数）中匹配的子字符串。</p>
<p>例如，<code>/apple(,)\sorange\1/</code> 匹配 “apple, orange, cherry, peach.” 中的 “apple,orange,”。一个更全面的例子在下面。</p>
<h4 id="数量词"><a href="#数量词" class="headerlink" title="数量词"></a>数量词</h4><h5 id="x-2"><a href="#x-2" class="headerlink" title="x*"></a><code>x*</code></h5><p>匹配前面的模式 x 0 或多次。</p>
<p>例如，<code>/bo*/</code> 匹配 “A ghost booooed” 中的 “boooo”，”A bird warbled” 中的 “b”，但是不匹配 “A goat grunted”。</p>
<h5 id="x-3"><a href="#x-3" class="headerlink" title="x+"></a><code>x+</code></h5><p>匹配前面的模式 x 1 或多次。等价于 <code>&#123;1,&#125;</code>。</p>
<p>例如，<code>/a+/</code> 匹配 “candy” 中的 “a”，”caaaaaaandy” 中所有的 “a”。</p>
<h5 id="x-x"><a href="#x-x" class="headerlink" title="x*? x+?"></a><code>x*?</code> <code>x+?</code></h5><p>像上面的 * 和 + 一样匹配前面的模式 x，然而匹配是最小可能匹配。</p>
<p>例如，<code>/&quot;.*?&quot;/</code> 匹配 ‘“foo” “bar”‘ 中的 ‘“foo”‘，而 * 后面没有 ? 时匹配 ‘“foo” “bar”‘。</p>
<h5 id="x-4"><a href="#x-4" class="headerlink" title="x?"></a><code>x?</code></h5><p>匹配前面的模式 x 0 或 1 次。</p>
<p>例如，<code>/e?le?/</code> 匹配 “angel” 中的 “el”，”angle” 中的 “le”。</p>
<p>如果在数量词 <code>*</code>、<code>+</code>、<code>?</code> 或 <code>&#123;&#125;</code>, 任意一个后面紧跟该符号（?），会使数量词变为非贪婪（ non-greedy） ，即匹配次数最小化。反之，默认情况下，是贪婪的（greedy），即匹配次数最大化。</p>
<p>在使用于向前断言（lookahead assertions）时，见该表格中 <code>(?=)、``(?!)</code> 和 <code>(?:)</code> 的说明。</p>
<h5 id="x-y"><a href="#x-y" class="headerlink" title="x(?=y)"></a><code>x(?=y)</code></h5><p>只有当 <code>x</code> 后面不是紧跟着 <code>y</code> 时，才匹配 <code>x</code>。例如，<code>/\d+(?!\.)/</code> 只有当一个数字后面没有紧跟着一个小数点时，才会匹配该数字。</p>
<p><code>/\d+(?!\.)/.exec(&quot;3.141&quot;)</code> 匹配 141 而不是 3.141。</p>
<h5 id="x-y-1"><a href="#x-y-1" class="headerlink" title="x|y"></a><code>x|y</code></h5><p>匹配 <code>x</code> 或 <code>y</code></p>
<p>例如，<code>/green|red/</code> 匹配 “green apple” 中的 ‘green’，”red apple.” 中的 ‘red’。</p>
<h5 id="x-n"><a href="#x-n" class="headerlink" title="x{n}"></a><code>x&#123;n&#125;</code></h5><p><code>n</code> 是一个正整数。前面的模式 <code>x</code> 连续出现 <code>n</code> 次时匹配。</p>
<p>例如，<code>/a&#123;2&#125;/</code> 不匹配 “candy,” 中的 “a”，但是匹配 “caandy,” 中的两个 “a”，且匹配 “caaandy.” 中的前两个 “a”。</p>
<h5 id="x-n-1"><a href="#x-n-1" class="headerlink" title="x{n,}"></a><code>x&#123;n,&#125;</code></h5><p><code>n</code> 是一个正整数。前面的模式 x 连续出现至少 n 次时匹配。</p>
<p>例如，<code>/a&#123;2,&#125;/</code> 不匹配 “candy” 中的 “a”，但是匹配 “caandy” 和 “caaaaaaandy.” 中所有的 “a”。</p>
<h5 id="x-n-m"><a href="#x-n-m" class="headerlink" title="x{n,m}"></a><code>x&#123;n,m&#125;</code></h5><p><code>n</code> 和 <code>m</code> 为正整数。前面的模式 x 连续出现至少 n 次，至多 m 次时匹配。</p>
<p>例如，<code>/a&#123;1,3&#125;/</code> 不匹配 “cndy”，匹配 “candy,” 中的 “a”，”caandy,” 中的两个 “a”，匹配 “caaaaaaandy” 中的前面三个 “a”。注意，当匹配 “caaaaaaandy” 时，即使原始字符串拥有更多的 “a”，匹配项也是 “aaa”。</p>
<h4 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h4><h5 id="x-y-2"><a href="#x-y-2" class="headerlink" title="x(?=y)"></a><code>x(?=y)</code></h5><p>仅匹配被y跟随的x。</p>
<p>举个例子，<code>/Jack(?=Sprat)/</code>，如果”Jack”后面跟着sprat，则匹配之。</p>
<p><code>/Jack(?=Sprat|Frost)/</code> ，如果”Jack”后面跟着”Sprat”或者”Frost”，则匹配之。但是，”Sprat” 和”Frost” 都不会在匹配结果中出现。</p>
<h5 id="x-y-3"><a href="#x-y-3" class="headerlink" title="x(?!y)"></a><code>x(?!y)</code></h5><p>仅匹配不被y跟随的x。</p>
<p>举个例子，<code>/\d+(?!\.)/</code> 只会匹配不被点（.）跟随的数字。<br><code>/\d+(?!\.)/.exec(&#39;3.141&#39;)</code> 匹配”141”，而不是”3.141”</p>
]]></content>
      <tags>
        <tag>Javascript</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序配置本地接口</title>
    <url>/2018/02/09/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p>之前在做公司小程序开发的时候，没有发现本地调试的方法，所以每次写完接口必须要把代码上传远程服务器进行测试，这种处理不仅不优雅，更要命的是极度拖延了开发进度，不过因为第一次接触小程序，完全不熟悉其开发原理，所以一直没有机会去改善开发逻辑。直至公司小程序开发完成后，才在网上去搜寻解决文案，终于找到本地开发调试的方法，并记录下来。</p>
<span id="more"></span>
<h1 id="安装charles"><a href="#安装charles" class="headerlink" title="安装charles"></a>安装charles</h1><p>charles是一个http代理软件(以前用过fiddle,应该类似于fiddle，不过前者功能更强大)，有windows和mac版，软件收费，基于java，所以需要电脑上装有<a href="http://www.java.com/">java</a>，所以我下载的是<a href="https://pan.baidu.com/s/1dHaY9ah">破解版</a>(穷，有钱的可以支持一下正版)， 密码：3ghf。下载后直接解压运行。</p>
<h1 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h1><p>如果已经安装好了软件，那么就开始配置。</p>
<ul>
<li>首先打开Charles，安装证书到本地, 点击‘安装证书’，全点下一步，安装完成</li>
</ul>
<p><img src="http://oy9tlpm12.bkt.clouddn.com/1.png"></p>
<ul>
<li>打开 <code>工具-&gt;远程映射</code> 添加线上域名于本地（开发环境）服务的映射</li>
</ul>
<p><img src="http://oy9tlpm12.bkt.clouddn.com/22.png"></p>
<ul>
<li><p>打开 <code>代理 -&gt; 代理设置</code> 选择<code>代理</code>选项卡，默认的HTTP Proxy的值是8888，这个端口号需要记着，后边在微信web开发者工具里边要用到的</p>
</li>
<li><p>选择<code>ssl</code>选项卡,如下设置</p>
</li>
</ul>
<p><img src="http://oy9tlpm12.bkt.clouddn.com/6.png"></p>
<ul>
<li>选择<code>windows</code>选项卡，点击启用以下选项</li>
</ul>
<p><img src="http://oy9tlpm12.bkt.clouddn.com/3.png"></p>
<ul>
<li>确认 <code>工具-&gt;windows代理</code> 打上勾</li>
</ul>
<p><img src="http://oy9tlpm12.bkt.clouddn.com/4.png"></p>
<ul>
<li>登录微信开发者工具，选择手动设置代理，然后填写本地的IP，以及前边在Charles中设置的代理端口号。enjoy it!</li>
</ul>
]]></content>
      <tags>
        <tag>小程序</tag>
        <tag>本地调试</tag>
        <tag>charles代理</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的工具库</title>
    <url>/2018/01/26/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E5%BA%93/</url>
    <content><![CDATA[<h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><ul>
<li><a href="https://greensock.com/gsap">GreenSock | GSAP</a>: CSS动画类库</li>
<li><a href="http://robertpenner.com/easing/">easing</a>: 函数式动画库</li>
</ul>
<span id="more"></span>

<h2 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h2><ul>
<li><a href="https://github.com/ecomfe/echarts">Echarts</a>: 百度开发的图表库</li>
</ul>
<h2 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h2><ul>
<li><a href="http://cssreference.io/">cssreference</a>: 一个动态展示各种CSS的学习库</li>
</ul>
]]></content>
      <tags>
        <tag>工具</tag>
        <tag>网站</tag>
      </tags>
  </entry>
  <entry>
    <title>配置MongoDB、Redis以及消息队列 5</title>
    <url>/2024/12/23/%E9%85%8D%E7%BD%AEMongoDB%E3%80%81Redis%E4%BB%A5%E5%8F%8A%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h2 id="配置MongoDB"><a href="#配置MongoDB" class="headerlink" title="配置MongoDB"></a>配置MongoDB</h2><p>在 <code>application.yml</code> 文件中，配置MongoDB连接。因为MongoDB自带数据库连接池，所以我们不需要在Java项目中重复配置连接池。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">      <span class="attr">database:</span> <span class="string">his</span></span><br><span class="line">      <span class="attr">authentication-database:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">abc123456</span></span><br></pre></td></tr></table></figure>

<h2 id="配置Redis"><a href="#配置Redis" class="headerlink" title="配置Redis"></a>配置Redis</h2><p>在 <code>application.yml</code> 文件中，配置Redis连接。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">abc123456</span></span><br></pre></td></tr></table></figure>

<h3 id="避免RedisTemplate保存乱码数据"><a href="#避免RedisTemplate保存乱码数据" class="headerlink" title="避免RedisTemplate保存乱码数据"></a>避免RedisTemplate保存乱码数据</h3><p>因为SpringBoot Data中默认的RedisTemplate存在序列化机制的问题，向Redis里面保存Hash类型数据通常是乱码的，为了解决这个问题，我们需要自己定义配置类，修改RedisTemplate使用的序列化机制。</p>
<p>在<code>com.example.his.api.config</code>包中，创建 <code>RedisTemplateconfig</code> 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jiang.his.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTemplateConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setValueSerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setHashValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置RabbitMQ消息队列"><a href="#配置RabbitMQ消息队列" class="headerlink" title="配置RabbitMQ消息队列"></a>配置RabbitMQ消息队列</h2><p>在 application.yml 文件中，我们填上消息队列的配置信息。Java项目启动后，SpringBoot会自动接收RabbitMQ中的消息。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">abc123456</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
