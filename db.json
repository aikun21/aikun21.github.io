{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"a26b502a3e55b0dc37027614cddacba86e9ac2a5","modified":1685552175175},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1685552176090},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1685552176090},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1685552176090},{"_id":"themes/next/.gitignore","hash":"b2085a3bc986cb6f9d6cb78c978db1e7b887d95f","modified":1685552176091},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1685552176091},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1685552176092},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1685552176092},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1685552176092},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1685552176092},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1685552176093},{"_id":"themes/next/README.md","hash":"efcdc4b0ca791c3fc64afa28c8721e137f2d11ea","modified":1685552176093},{"_id":"themes/next/README.cn.md","hash":"b878b73f3fcdef47849453c94420871903d487b3","modified":1685552176093},{"_id":"themes/next/_config.yml","hash":"e70cb4c281c56b6c8efd2e42ad10c8369d5e1e60","modified":1685552176094},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1685552176094},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1685552176094},{"_id":"source/_posts/Hexo博客从一台电脑迁移到其他电脑.md","hash":"dce5d11e18e6abb1b9d9fd06f06de3f2c9ff9338","modified":1685552175177},{"_id":"source/_posts/Flex布局.md","hash":"35d58f4b1bce4c6272c3e0841d64622438fe7fb3","modified":1685552175175},{"_id":"source/_posts/JS常用原生函数汇总.md","hash":"cb0ba99ffe4e203df5d1e3f3a01c9e7163b499c5","modified":1685552175177},{"_id":"source/_posts/Git常用操作命令.md","hash":"1221f4993b09bdd259c0bd152eb79680bee57eb3","modified":1685552175177},{"_id":"source/_posts/offset.md","hash":"7f7fd3fb2ed3ed885d61845bbbfb4d4a7aec155f","modified":1685552175178},{"_id":"source/_posts/Linux常用命令集合.md","hash":"6f7f0d2f97e6d9e5f820734c92076419a96cbd54","modified":1685552175178},{"_id":"source/_posts/了解一下JS的正则表达式.md","hash":"a754dca06535e11ad5864add9c870162a2f22549","modified":1685552175289},{"_id":"source/_posts/小程序配置本地接口.md","hash":"2728c5e4a7310aa842019458a033d73227e69b16","modified":1685552175289},{"_id":"source/_posts/webpack.md","hash":"04777ab12065a2a135eee859733db61be7d1cbb6","modified":1685552175288},{"_id":"source/_posts/常用的工具库.md","hash":"350e6977d863f039155038f5c5891cb4bf3af3a2","modified":1685552175289},{"_id":"source/images/alipay.jpg","hash":"401c89fe29f5e1c78e55a2e6c051282f69e04f05","modified":1685552175291},{"_id":"source/images/avatar.jpg","hash":"1636de159d8de3bb2f1d3fe9fa6602be1b5332b9","modified":1685552175291},{"_id":"source/tags/index.md","hash":"21717f59067a4f3234e5becb8ad648b133d04f38","modified":1685552175293},{"_id":"source/images/wechatpay.jpg","hash":"3251a07ffd5e20e638f47db32083e754570cdd70","modified":1685552175292},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1685552176090},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1685552176091},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1685552176091},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1685552176091},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1685552176095},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1685552176095},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1685552176095},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1685552176095},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1685552176290},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1685552176095},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1685552176096},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1685552176290},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1685552176291},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1685552176291},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1685552176291},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1685552176292},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1685552176292},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1685552176292},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1685552176292},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1685552176291},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1685552176293},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1685552176509},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1685552176509},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1685552176509},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1685552176509},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1685552176509},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1685552176509},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1685552176510},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1685552176510},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1685552176511},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1685552179132},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1685552179133},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1685552179133},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1685552177909},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1685552176292},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1685552176293},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1685552176293},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1685552176295},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1685552176294},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1685552176295},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1685552176295},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1685552176295},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1685552176295},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1685552176296},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1685552176295},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1685552176296},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1685552176299},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1685552176296},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1685552176303},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1685552176302},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1685552176301},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1685552176503},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1685552176300},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1685552176504},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1685552176504},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1685552176505},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1685552176505},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1685552176505},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1685552176504},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1685552176511},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1685552176511},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1685552176522},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1685552176523},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1685552176712},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1685552176512},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1685552176713},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1685552176713},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1685552176513},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1685552177909},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1685552177909},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1685552177910},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1685552177910},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1685552177911},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1685552178105},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1685552177910},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1685552178105},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1685552178107},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1685552178107},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1685552178108},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1685552178108},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1685552178108},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1685552178108},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1685552178109},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1685552178109},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1685552178109},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1685552178109},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1685552178109},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1685552176302},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1685552176302},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1685552177708},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1685552177709},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1685552177709},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1685552177908},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1685552177909},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1685552176296},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1685552176300},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1685552176296},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1685552176301},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1685552176300},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1685552176301},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1685552176300},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1685552176301},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1685552176302},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1685552176302},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1685552176301},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1685552176302},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1685552176303},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1685552176303},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1685552176303},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1685552176304},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1685552176498},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1685552176498},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1685552176303},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1685552176499},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1685552176498},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1685552176499},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1685552176499},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1685552176500},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1685552176500},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1685552176499},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1685552176500},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1685552176500},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1685552176499},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1685552176500},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1685552176503},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1685552176501},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1685552176503},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1685552176503},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1685552176507},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1685552176507},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1685552176507},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1685552176507},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1685552177708},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1685552177708},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1685552177709},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1685552177709},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1685552177908},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1685552177908},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1685552177908},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1685552177909},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1685552178110},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1685552178110},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1685552178110},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1685552178111},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1685552178111},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1685552178309},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1685552178309},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1685552178111},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1685552178310},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1685552178311},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1685552178310},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1685552178320},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1685552178317},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1685552178321},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1685552178321},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1685552178512},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1685552178513},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1685552178513},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1685552178513},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1685552178513},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1685552178916},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1685552178321},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1685552178918},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1685552178919},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1685552178918},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1685552178918},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1685552179116},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1685552178919},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1685552179119},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1685552179119},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1685552179119},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1685552179118},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1685552179123},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1685552179123},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1685552179123},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1685552179124},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1685552179124},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1685552179124},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1685552179124},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1685552179124},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1685552179125},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1685552179125},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1685552179126},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1685552179125},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1685552179126},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1685552179118},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1685552179117},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1685552179117},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1685552178510},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1685552178511},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1685552178511},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1685552178511},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1685552179130},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1685552179130},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1685552179131},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1685552179132},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1685552179132},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1685552178917},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1685552176506},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1685552176506},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1685552176715},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1685552176715},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1685552176716},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1685552176715},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1685552177707},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1685552176715},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1685552176914},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1685552177311},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1685552177707},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1685552177707},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1685552177708},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1685552177708},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1685552177708},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1685552177707},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1685552177710},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1685552177711},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1685552177710},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1685552177711},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1685552177711},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1685552177710},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1685552177905},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1685552177905},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1685552177902},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1685552177905},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1685552177709},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1685552177906},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1685552177907},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1685552177906},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1685552177906},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1685552177907},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1685552177907},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1685552177907},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1685552177907},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1685552178309},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1685552178322},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1685552178323},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1685552178323},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1685552178322},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1685552178506},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1685552178322},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1685552178509},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1685552178510},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1685552178510},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1685552178314},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1685552178316},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1685552178316},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1685552178514},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1685552178514},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1685552178514},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1685552178512},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1685552179129},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1685552178512},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1685552179129},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1685552178315},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1685552178722},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1685552178916},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1685552179131},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1685552176911},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1685552176911},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1685552176912},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1685552176912},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1685552176913},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1685552176912},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1685552176913},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1685552176912},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1685552176913},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1685552176911},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1685552176913},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1685552176914},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1685552176914},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1685552177114},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1685552177115},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1685552177114},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1685552176913},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1685552177115},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1685552177310},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1685552177115},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1685552177311},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1685552176914},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1685552177310},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1685552176915},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1685552176915},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1685552177112},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1685552177311},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1685552177310},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1685552176915},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1685552177112},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1685552177112},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1685552177113},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1685552176915},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1685552177113},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1685552177113},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1685552177312},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1685552177113},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1685552177114},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1685552177312},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1685552177114},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1685552177114},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1685552177312},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1685552177312},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1685552177508},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1685552177508},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1685552177509},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1685552177507},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1685552177312},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1685552177508},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1685552177704},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1685552177705},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1685552177509},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1685552177520},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1685552177520},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1685552177706},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1685552177510},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1685552177706},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1685552177706},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1685552177904},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1685552177903},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1685552177906},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1685552178507},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1685552178508},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1685552178508},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1685552178507},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1685552178509},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1685552178508},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1685552178312},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1685552178313},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1685552178313},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1685552178312},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1685552178314},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1685552178712},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1685552178713},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1685552178719},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1685552178320},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1685552179128},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1685552178715},{"_id":"public/search.xml","hash":"cac8136ca3dc9a9298fe7a10b3b0e64e0de569b3","modified":1685552525212},{"_id":"public/404.html","hash":"c6fb0d8c4730129e16db82a8763b237b2411e322","modified":1685552525224},{"_id":"public/2018/02/09/小程序配置本地接口/index.html","hash":"cffb1a85cc7625b71c9bbf001256cd170841c9ae","modified":1685552525224},{"_id":"public/tags/index.html","hash":"c3ca8cb814b0fb32d07809250da8e1a9dfa21f2d","modified":1685552525224},{"_id":"public/2019/10/23/webpack/index.html","hash":"8e896380ead63b8dccb3084bfc57780d1c2d60d0","modified":1685552525224},{"_id":"public/2018/01/26/常用的工具库/index.html","hash":"4e3928948335949ac6ec6f3935049d572d9c2a18","modified":1685552525224},{"_id":"public/2018/01/03/offset/index.html","hash":"4189d38a606b07e584f5d621197f9f1bd5c46e53","modified":1685552525224},{"_id":"public/2017/11/09/JS常用原生函数汇总/index.html","hash":"75feec5fddd017705f9b02a1a2391e3e263dd576","modified":1685552525224},{"_id":"public/2017/10/31/Git常用操作命令/index.html","hash":"e2e3dc742a72a8a99ec4577c13f10f001d120602","modified":1685552525224},{"_id":"public/2017/10/23/Flex布局/index.html","hash":"0177fd5806032348e8d8ba965a414dd5f4b576f7","modified":1685552525224},{"_id":"public/2017/10/23/Hexo博客从一台电脑迁移到其他电脑/index.html","hash":"184a8c724deaba34d61014bb184d3cf7e2914670","modified":1685552525224},{"_id":"public/index.html","hash":"73e773507006a8794b52bd3a9138b904567f1042","modified":1685552525224},{"_id":"public/2017/10/23/Linux常用命令集合/index.html","hash":"c1baea8e30a698e56f28216f25d63e4bb454a6de","modified":1685552525224},{"_id":"public/2017/09/22/了解一下JS的正则表达式/index.html","hash":"0ef3716d950db722894d553b18f072803b578026","modified":1685552525224},{"_id":"public/tags/hexo本地更新/index.html","hash":"bd6e5c03ea5ee0ff78d61be1b68b531cdd53ae96","modified":1685552525224},{"_id":"public/tags/Git/index.html","hash":"788b4be37df142c63588a71f4916becc4f4368e4","modified":1685552525224},{"_id":"public/tags/Git命令/index.html","hash":"68493c6a1e76f44756a27d52ced026cbd15509ab","modified":1685552525224},{"_id":"public/tags/原生函数/index.html","hash":"0a23a7e53c9d012d690d58cd56abe70edfa47e1a","modified":1685552525224},{"_id":"public/tags/实用/index.html","hash":"72d3a7195d0d9f5c0880b9c768d3d4fd1e9851ad","modified":1685552525224},{"_id":"public/tags/服务器配置/index.html","hash":"eb0a454134dbb62f3522e27cfa5011081c0124fe","modified":1685552525224},{"_id":"public/tags/linux/index.html","hash":"cdee426746e580ece26490ca40e24d0976c992d6","modified":1685552525224},{"_id":"public/tags/后台/index.html","hash":"1d0d1d398c2ee47b6104cc10322e0ac2e8366dab","modified":1685552525224},{"_id":"public/tags/Javascript/index.html","hash":"b8a79efdf481fbd3740c07bc01b42711b5a7ea37","modified":1685552525224},{"_id":"public/tags/正则表达式/index.html","hash":"a59977efe480c781e9113892fcab7fb95e0f3258","modified":1685552525224},{"_id":"public/tags/CSS/index.html","hash":"5dbd1d94a4e75d819d3de72d76cbd7ba5914143d","modified":1685552525224},{"_id":"public/tags/小程序/index.html","hash":"a6d4455fc4fbb3d8a168aafea38e64d7a7c44787","modified":1685552525224},{"_id":"public/tags/本地调试/index.html","hash":"c35fa7067ff664cb169257e96844bf9dce2ae840","modified":1685552525224},{"_id":"public/tags/charles代理/index.html","hash":"8c78a7063337f394919c4298939734217fdf25d2","modified":1685552525224},{"_id":"public/tags/工具/index.html","hash":"2b27c745695d42c8e53144403b8f83f9733ed8db","modified":1685552525224},{"_id":"public/tags/网站/index.html","hash":"59a8a5b5d3d0d8ae3f01e8458f835e64397df9c9","modified":1685552525224},{"_id":"public/tags/webpack/index.html","hash":"d195a8d4fd1cad9c4dc08f8f429b5d5a6d0b3cae","modified":1685552525225},{"_id":"public/archives/index.html","hash":"3d1280fb995eac5fe0580759236079d6f87d22a4","modified":1685552525225},{"_id":"public/archives/2017/index.html","hash":"154756371141da875352598c0919b0412f20b69e","modified":1685552525225},{"_id":"public/archives/2017/09/index.html","hash":"407846eca96dcd4abf7cb1e82746640bf6796b31","modified":1685552525225},{"_id":"public/archives/2017/10/index.html","hash":"756f372298d5381a8f058d486adbcd48495392c3","modified":1685552525225},{"_id":"public/archives/2017/11/index.html","hash":"d1f13d3d2630e355e5583d5e24cc5677c7672a08","modified":1685552525225},{"_id":"public/archives/2018/index.html","hash":"1009c3f76f97689b9bdbadc1b7c2fdcbac55fbd2","modified":1685552525225},{"_id":"public/archives/2018/01/index.html","hash":"f3c099ea127c9c9604d4a94cf9cb060bcc3fc715","modified":1685552525225},{"_id":"public/archives/2018/02/index.html","hash":"a876afe106e61f294070da884c152e096071791a","modified":1685552525225},{"_id":"public/archives/2019/index.html","hash":"22c6a1cce96d0b5b031b3c83ca57ea591dc898e2","modified":1685552525225},{"_id":"public/archives/2019/10/index.html","hash":"07e31affc91bc65f0f8c50a00fcb9fc269e563c5","modified":1685552525225},{"_id":"public/images/alipay.jpg","hash":"401c89fe29f5e1c78e55a2e6c051282f69e04f05","modified":1685552525225},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1685552525225},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1685552525225},{"_id":"public/images/wechatpay.jpg","hash":"3251a07ffd5e20e638f47db32083e754570cdd70","modified":1685552525225},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1685552525225},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1685552525225},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1685552525225},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1685552525225},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1685552525225},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1685552525225},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1685552525225},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1685552525225},{"_id":"public/images/avatar.jpg","hash":"1636de159d8de3bb2f1d3fe9fa6602be1b5332b9","modified":1685552525225},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1685552525225},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1685552525225},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1685552525587},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1685552525588},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1685552525589},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1685552525589},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1685552525589},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1685552525589},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1685552525589},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1685552525589},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1685552525589},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1685552525589},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1685552525589},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1685552525589},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1685552525589},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1685552525589},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1685552525589},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1685552525589},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1685552525589},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1685552525589},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1685552525589},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1685552525590},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1685552525590},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1685552525605},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1685552525606},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1685552525609},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1685552525609},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1685552525609},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1685552525609},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1685552525609},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1685552525609},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1685552525609},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1685552525609},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1685552525609},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1685552525609},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1685552525609},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1685552525609},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1685552525609},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1685552525609},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1685552525609},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1685552525609},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1685552525609},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1685552525609},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1685552525609},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1685552525609},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1685552525609},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1685552525609},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1685552525609},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1685552525609},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1685552525609},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1685552525609},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1685552525609},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1685552525609},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1685552525610},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1685552525610},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1685552525610},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1685552525610},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bfb6e229fc36e493d45499b4ac30a7c298786ab4","modified":1685552525610},{"_id":"public/css/main.css","hash":"1270aef72af7ec6aefe02ff200d2bd115208594b","modified":1685552525610},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1685552525610},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1685552525610},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1685552525610},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1685552525610},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1685552525610},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1685552525610},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1685552525610},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1685552525614},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1685552525614},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1685552525614},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1685552525614},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1685552525614},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1685552525614},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1685552525614},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1685552525614},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1685552525614},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1685552525614},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1685552525614},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1685552525614},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1685552525614},{"_id":"public/lib/fastclick/README.html","hash":"287b2e24cae1f7d01877dda79b76c24f81123895","modified":1685552525614},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1685552525614},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1685552525614},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1685552525614},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1685552525614},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1685552525614},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1685552525614},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1685552525614},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1685552525614},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1685552525614},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1685552525614},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1685552525614},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1685552525614},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1685552525614},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1685552525614},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1685552525614},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1685552525614},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1685552525614},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1685552525614},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1685552525829}],"Category":[],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html> ","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html> ","date":"2023-05-31T16:56:15.175Z","updated":"2023-05-31T16:56:15.175Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"clibygb330000f4fmy6uue6dd","content":"<!DOCTYPE HTML>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.9.0\">\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html> ","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.9.0\">\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html> "},{"title":"tags","date":"2017-09-22T05:24:05.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-09-22 13:24:05\ntype: \"tags\"\ncomments: false\n---\n","updated":"2023-05-31T16:56:15.293Z","path":"tags/index.html","layout":"page","_id":"clibygb5v000vf4fmythubx6j","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Flex布局","date":"2017-10-23T09:57:36.000Z","_content":"\n## Flex 布局是什么？\n\nFlex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。\n任何一个容器都可以指定为 Flex 布局。\n\n<!-- more -->\n\n```css\n.box{\n  display: flex;\n}\n```\n\n行内元素也可以使用 Flex 布局。\n\n```css\n.box{\n  display: inline-flex;\n}\n```\n\nWebkit 内核的浏览器，必须加上`-webkit`前缀。\n\n```css\n.box{\n  display: -webkit-flex; /* Safari */\n  display: flex;\n}\n```\n\n> 注意，设为 Flex 布局以后，子元素的`float`、`clear`和`vertical-align`属性将失效。\n\n## 基本概念\n\n采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\"项目\"。\n\n![](http://oy9tlpm12.bkt.clouddn.com/bg2015071004.png)\n\n","source":"_posts/Flex布局.md","raw":"---\ntitle: Flex布局\ndate: 2017-10-23 17:57:36\ntags:\n---\n\n## Flex 布局是什么？\n\nFlex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。\n任何一个容器都可以指定为 Flex 布局。\n\n<!-- more -->\n\n```css\n.box{\n  display: flex;\n}\n```\n\n行内元素也可以使用 Flex 布局。\n\n```css\n.box{\n  display: inline-flex;\n}\n```\n\nWebkit 内核的浏览器，必须加上`-webkit`前缀。\n\n```css\n.box{\n  display: -webkit-flex; /* Safari */\n  display: flex;\n}\n```\n\n> 注意，设为 Flex 布局以后，子元素的`float`、`clear`和`vertical-align`属性将失效。\n\n## 基本概念\n\n采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\"项目\"。\n\n![](http://oy9tlpm12.bkt.clouddn.com/bg2015071004.png)\n\n","slug":"Flex布局","published":1,"updated":"2023-05-31T16:56:15.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clibygb3k0001f4fm2xsh9qa0","content":"<h2 id=\"Flex-布局是什么？\"><a href=\"#Flex-布局是什么？\" class=\"headerlink\" title=\"Flex 布局是什么？\"></a>Flex 布局是什么？</h2><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br>任何一个容器都可以指定为 Flex 布局。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>行内元素也可以使用 Flex 布局。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Webkit 内核的浏览器，必须加上<code>-webkit</code>前缀。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-flex; <span class=\"comment\">/* Safari */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，设为 Flex 布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p>\n</blockquote>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p>\n<p><img src=\"http://oy9tlpm12.bkt.clouddn.com/bg2015071004.png\" alt></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Flex-布局是什么？\"><a href=\"#Flex-布局是什么？\" class=\"headerlink\" title=\"Flex 布局是什么？\"></a>Flex 布局是什么？</h2><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br>任何一个容器都可以指定为 Flex 布局。</p>","more":"<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>行内元素也可以使用 Flex 布局。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Webkit 内核的浏览器，必须加上<code>-webkit</code>前缀。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-flex; <span class=\"comment\">/* Safari */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，设为 Flex 布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p>\n</blockquote>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p>\n<p><img src=\"http://oy9tlpm12.bkt.clouddn.com/bg2015071004.png\" alt></p>"},{"title":"Hexo博客从一台电脑迁移到其他电脑","date":"2017-10-23T09:35:11.000Z","_content":"\nhexo官方给了一些迁移的方法，不过它上面介绍的方法都是把博客文章从hexo系统迁移到其他博客系统的方法。然而我们这里要讨论的是：\n\n当我们更换电脑的时候我们应该怎么办？\n\n所以默认你已经成功利用hexo和github发布博客，如果还没有，可以看一下[教程](http://lixiaolai.com/2016/06/22/makecs-build-a-blog-with-hexo-on-github/)\n\n具体的思路是：在生成的已经推到github上的hexo静态代码出建立一个分支，利用这个分支来管理自己hexo的源文件。\n\n<!-- more -->\n\n如果能在刚刚配置hexo的时候就想好以后的迁移的问题就太好了，可以省掉很多麻烦，可实际使用中，刚刚配置hexo的时候，好多人都是初学，不会想到以后的问题，我就是这样的。\n\n具体的操作：\n\n克隆gitHub上面生成的静态文件到本地\n\n```javascript\ngit clone https://github.com/yourname/hexo-test.github.io.git\n```\n把克隆到本地的文件除了git的文件都删掉，找不到git的文件的话就到删了吧。不要用`hexo init`初始化。\n\n将之前使用hexo写博客时候的整个目录（所有文件）搬过来。把该忽略的文件忽略了\n```\ntouch .gitignore\n```\n创建一个叫hexo的分支\n```\ngit checkout -b hexo\n```\n提交复制过来的文件到暂存区\n```\ngit add --all\n```\n提交\n```\ngit commit -m \"新建分支源文件\"\n```\n推送分支到github\n```\ngit push --set-upstream origin hexo\n```\n到这里基本上就搞定了，以后再推就可以直接git push了，hexo的操作跟以前一样。\n\n今后无论什么时候想要在其他电脑上面用hexo写博客，就直接把创建的分支克隆下来，`npm install`安装依赖之后就可以用了。\n\n克隆分支的操作\n```\ngit clone -b hexo https://github.com/yourname/hexo-test.github.io.git\n```\n因为上面创建的是一个名字叫hexo的分支，所以这里-b后面的是hexo，再把后面的gitHub的地址换成你自己的hexo博客的地址就可以了。\n\n这样做完了以后，每次写完博客发布之后不要忘了还要git push把源文件推到分支上。\n","source":"_posts/Hexo博客从一台电脑迁移到其他电脑.md","raw":"---\ntitle: Hexo博客从一台电脑迁移到其他电脑\ndate: 2017-10-23 17:35:11\ntags:\n    - hexo本地更新\n---\n\nhexo官方给了一些迁移的方法，不过它上面介绍的方法都是把博客文章从hexo系统迁移到其他博客系统的方法。然而我们这里要讨论的是：\n\n当我们更换电脑的时候我们应该怎么办？\n\n所以默认你已经成功利用hexo和github发布博客，如果还没有，可以看一下[教程](http://lixiaolai.com/2016/06/22/makecs-build-a-blog-with-hexo-on-github/)\n\n具体的思路是：在生成的已经推到github上的hexo静态代码出建立一个分支，利用这个分支来管理自己hexo的源文件。\n\n<!-- more -->\n\n如果能在刚刚配置hexo的时候就想好以后的迁移的问题就太好了，可以省掉很多麻烦，可实际使用中，刚刚配置hexo的时候，好多人都是初学，不会想到以后的问题，我就是这样的。\n\n具体的操作：\n\n克隆gitHub上面生成的静态文件到本地\n\n```javascript\ngit clone https://github.com/yourname/hexo-test.github.io.git\n```\n把克隆到本地的文件除了git的文件都删掉，找不到git的文件的话就到删了吧。不要用`hexo init`初始化。\n\n将之前使用hexo写博客时候的整个目录（所有文件）搬过来。把该忽略的文件忽略了\n```\ntouch .gitignore\n```\n创建一个叫hexo的分支\n```\ngit checkout -b hexo\n```\n提交复制过来的文件到暂存区\n```\ngit add --all\n```\n提交\n```\ngit commit -m \"新建分支源文件\"\n```\n推送分支到github\n```\ngit push --set-upstream origin hexo\n```\n到这里基本上就搞定了，以后再推就可以直接git push了，hexo的操作跟以前一样。\n\n今后无论什么时候想要在其他电脑上面用hexo写博客，就直接把创建的分支克隆下来，`npm install`安装依赖之后就可以用了。\n\n克隆分支的操作\n```\ngit clone -b hexo https://github.com/yourname/hexo-test.github.io.git\n```\n因为上面创建的是一个名字叫hexo的分支，所以这里-b后面的是hexo，再把后面的gitHub的地址换成你自己的hexo博客的地址就可以了。\n\n这样做完了以后，每次写完博客发布之后不要忘了还要git push把源文件推到分支上。\n","slug":"Hexo博客从一台电脑迁移到其他电脑","published":1,"updated":"2023-05-31T16:56:15.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clibygb3n0002f4fmeixejv08","content":"<p>hexo官方给了一些迁移的方法，不过它上面介绍的方法都是把博客文章从hexo系统迁移到其他博客系统的方法。然而我们这里要讨论的是：</p>\n<p>当我们更换电脑的时候我们应该怎么办？</p>\n<p>所以默认你已经成功利用hexo和github发布博客，如果还没有，可以看一下<a href=\"http://lixiaolai.com/2016/06/22/makecs-build-a-blog-with-hexo-on-github/\" target=\"_blank\" rel=\"noopener\">教程</a></p>\n<p>具体的思路是：在生成的已经推到github上的hexo静态代码出建立一个分支，利用这个分支来管理自己hexo的源文件。</p>\n<a id=\"more\"></a>\n<p>如果能在刚刚配置hexo的时候就想好以后的迁移的问题就太好了，可以省掉很多麻烦，可实际使用中，刚刚配置hexo的时候，好多人都是初学，不会想到以后的问题，我就是这样的。</p>\n<p>具体的操作：</p>\n<p>克隆gitHub上面生成的静态文件到本地</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:<span class=\"comment\">//github.com/yourname/hexo-test.github.io.git</span></span><br></pre></td></tr></table></figure>\n<p>把克隆到本地的文件除了git的文件都删掉，找不到git的文件的话就到删了吧。不要用<code>hexo init</code>初始化。</p>\n<p>将之前使用hexo写博客时候的整个目录（所有文件）搬过来。把该忽略的文件忽略了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch .gitignore</span><br></pre></td></tr></table></figure></p>\n<p>创建一个叫hexo的分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b hexo</span><br></pre></td></tr></table></figure></p>\n<p>提交复制过来的文件到暂存区<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add --all</span><br></pre></td></tr></table></figure></p>\n<p>提交<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;新建分支源文件&quot;</span><br></pre></td></tr></table></figure></p>\n<p>推送分支到github<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --set-upstream origin hexo</span><br></pre></td></tr></table></figure></p>\n<p>到这里基本上就搞定了，以后再推就可以直接git push了，hexo的操作跟以前一样。</p>\n<p>今后无论什么时候想要在其他电脑上面用hexo写博客，就直接把创建的分支克隆下来，<code>npm install</code>安装依赖之后就可以用了。</p>\n<p>克隆分支的操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b hexo https://github.com/yourname/hexo-test.github.io.git</span><br></pre></td></tr></table></figure></p>\n<p>因为上面创建的是一个名字叫hexo的分支，所以这里-b后面的是hexo，再把后面的gitHub的地址换成你自己的hexo博客的地址就可以了。</p>\n<p>这样做完了以后，每次写完博客发布之后不要忘了还要git push把源文件推到分支上。</p>\n","site":{"data":{}},"excerpt":"<p>hexo官方给了一些迁移的方法，不过它上面介绍的方法都是把博客文章从hexo系统迁移到其他博客系统的方法。然而我们这里要讨论的是：</p>\n<p>当我们更换电脑的时候我们应该怎么办？</p>\n<p>所以默认你已经成功利用hexo和github发布博客，如果还没有，可以看一下<a href=\"http://lixiaolai.com/2016/06/22/makecs-build-a-blog-with-hexo-on-github/\" target=\"_blank\" rel=\"noopener\">教程</a></p>\n<p>具体的思路是：在生成的已经推到github上的hexo静态代码出建立一个分支，利用这个分支来管理自己hexo的源文件。</p>","more":"<p>如果能在刚刚配置hexo的时候就想好以后的迁移的问题就太好了，可以省掉很多麻烦，可实际使用中，刚刚配置hexo的时候，好多人都是初学，不会想到以后的问题，我就是这样的。</p>\n<p>具体的操作：</p>\n<p>克隆gitHub上面生成的静态文件到本地</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:<span class=\"comment\">//github.com/yourname/hexo-test.github.io.git</span></span><br></pre></td></tr></table></figure>\n<p>把克隆到本地的文件除了git的文件都删掉，找不到git的文件的话就到删了吧。不要用<code>hexo init</code>初始化。</p>\n<p>将之前使用hexo写博客时候的整个目录（所有文件）搬过来。把该忽略的文件忽略了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch .gitignore</span><br></pre></td></tr></table></figure></p>\n<p>创建一个叫hexo的分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b hexo</span><br></pre></td></tr></table></figure></p>\n<p>提交复制过来的文件到暂存区<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add --all</span><br></pre></td></tr></table></figure></p>\n<p>提交<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;新建分支源文件&quot;</span><br></pre></td></tr></table></figure></p>\n<p>推送分支到github<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --set-upstream origin hexo</span><br></pre></td></tr></table></figure></p>\n<p>到这里基本上就搞定了，以后再推就可以直接git push了，hexo的操作跟以前一样。</p>\n<p>今后无论什么时候想要在其他电脑上面用hexo写博客，就直接把创建的分支克隆下来，<code>npm install</code>安装依赖之后就可以用了。</p>\n<p>克隆分支的操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b hexo https://github.com/yourname/hexo-test.github.io.git</span><br></pre></td></tr></table></figure></p>\n<p>因为上面创建的是一个名字叫hexo的分支，所以这里-b后面的是hexo，再把后面的gitHub的地址换成你自己的hexo博客的地址就可以了。</p>\n<p>这样做完了以后，每次写完博客发布之后不要忘了还要git push把源文件推到分支上。</p>"},{"title":"Git常用操作命令","date":"2017-10-31T08:45:30.000Z","_content":"\n## git 分支操作\n\n### 查看本地分支\n`git branch`\n\n### 查看远程分支\n`git branch -a`\n\n\n### 创建本地分支\n`git branch (br)`\n\n<!-- more -->\n\n### 把分支推到远程分支 \n\n`git push origin (br)`\n\n### 切换分支\n`git checkout (br)`\n\n### git 删除本地分支\n\n`git branch -D (br)`\n\n### git 删除远程分支\n\n`git push origin :br  (origin 后面有空格)`\n\n### git代码库回滚: 指的是将代码库某分支退回到以前的某个commit id\n\n#### 本地代码库回滚\n\n`git reset --hard commit-id :回滚到commit-id，讲commit-id之后提交的commit都去除`\n`git reset --hard HEAD~3：将最近3次的提交回滚`\n\n#### 远程代码库回滚\n\n\n应用场景：自动部署系统发布后发现问题，需要回滚到某一个commit，再重新发布\n\n原理：先将本地分支退回到某个commit，删除远程分支，再重新push本地分支\n\n操作步骤：\n\n```javascript\n1、git checkout the_branch\n\n2、git pull\n\n3、git branch the_branch_backup //备份一下这个分支当前的情况\n\n4、git reset --hard the_commit_id //把the_branch本地回滚到the_commit_id\n\n5、git push origin :the_branch //删除远程 the_branch\n\n6、git push origin the_branch //用回滚后的本地分支重新建立远程分支\n\n7、git push origin :the_branch_backup //如果前面都成功了，删除这个备份分支\n\n```\n\n如果使用了gerrit做远程代码中心库和code review平台，需要确保操作git的用户具备分支的push权限，并且选择了 Force Push选项（在push权限设置里有这个选项）\n\n另外，gerrit中心库是个bare库，将HEAD默认指向了master，因此master分支是不能进行删除操作的，最好不要选择删除master分支的策略，换用其他分支。如果一定要这样做，可以考虑到gerrit服务器上修改HEAD指针。。。不建议这样搞\n\n转载自：http://www.cnblogs.com/hqbhonker/p/5092300.html\n\n\n## git删除远程仓库文件或目录\n\n```\n\ngit rm --cached ./file.txt //删除目录下的file.txt文件\n\ngit rm -r --cached folder  //删除目录folder\n\ngit commit -m \"删除操作\"\n\ngit push\n\n```\n","source":"_posts/Git常用操作命令.md","raw":"---\ntitle: Git常用操作命令\ndate: 2017-10-31 16:45:30\ntags:\n    - Git\n    - Git命令\n---\n\n## git 分支操作\n\n### 查看本地分支\n`git branch`\n\n### 查看远程分支\n`git branch -a`\n\n\n### 创建本地分支\n`git branch (br)`\n\n<!-- more -->\n\n### 把分支推到远程分支 \n\n`git push origin (br)`\n\n### 切换分支\n`git checkout (br)`\n\n### git 删除本地分支\n\n`git branch -D (br)`\n\n### git 删除远程分支\n\n`git push origin :br  (origin 后面有空格)`\n\n### git代码库回滚: 指的是将代码库某分支退回到以前的某个commit id\n\n#### 本地代码库回滚\n\n`git reset --hard commit-id :回滚到commit-id，讲commit-id之后提交的commit都去除`\n`git reset --hard HEAD~3：将最近3次的提交回滚`\n\n#### 远程代码库回滚\n\n\n应用场景：自动部署系统发布后发现问题，需要回滚到某一个commit，再重新发布\n\n原理：先将本地分支退回到某个commit，删除远程分支，再重新push本地分支\n\n操作步骤：\n\n```javascript\n1、git checkout the_branch\n\n2、git pull\n\n3、git branch the_branch_backup //备份一下这个分支当前的情况\n\n4、git reset --hard the_commit_id //把the_branch本地回滚到the_commit_id\n\n5、git push origin :the_branch //删除远程 the_branch\n\n6、git push origin the_branch //用回滚后的本地分支重新建立远程分支\n\n7、git push origin :the_branch_backup //如果前面都成功了，删除这个备份分支\n\n```\n\n如果使用了gerrit做远程代码中心库和code review平台，需要确保操作git的用户具备分支的push权限，并且选择了 Force Push选项（在push权限设置里有这个选项）\n\n另外，gerrit中心库是个bare库，将HEAD默认指向了master，因此master分支是不能进行删除操作的，最好不要选择删除master分支的策略，换用其他分支。如果一定要这样做，可以考虑到gerrit服务器上修改HEAD指针。。。不建议这样搞\n\n转载自：http://www.cnblogs.com/hqbhonker/p/5092300.html\n\n\n## git删除远程仓库文件或目录\n\n```\n\ngit rm --cached ./file.txt //删除目录下的file.txt文件\n\ngit rm -r --cached folder  //删除目录folder\n\ngit commit -m \"删除操作\"\n\ngit push\n\n```\n","slug":"Git常用操作命令","published":1,"updated":"2023-05-31T16:56:15.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clibygb3p0003f4fmi5p6cn34","content":"<h2 id=\"git-分支操作\"><a href=\"#git-分支操作\" class=\"headerlink\" title=\"git 分支操作\"></a>git 分支操作</h2><h3 id=\"查看本地分支\"><a href=\"#查看本地分支\" class=\"headerlink\" title=\"查看本地分支\"></a>查看本地分支</h3><p><code>git branch</code></p>\n<h3 id=\"查看远程分支\"><a href=\"#查看远程分支\" class=\"headerlink\" title=\"查看远程分支\"></a>查看远程分支</h3><p><code>git branch -a</code></p>\n<h3 id=\"创建本地分支\"><a href=\"#创建本地分支\" class=\"headerlink\" title=\"创建本地分支\"></a>创建本地分支</h3><p><code>git branch (br)</code></p>\n<a id=\"more\"></a>\n<h3 id=\"把分支推到远程分支\"><a href=\"#把分支推到远程分支\" class=\"headerlink\" title=\"把分支推到远程分支\"></a>把分支推到远程分支</h3><p><code>git push origin (br)</code></p>\n<h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><p><code>git checkout (br)</code></p>\n<h3 id=\"git-删除本地分支\"><a href=\"#git-删除本地分支\" class=\"headerlink\" title=\"git 删除本地分支\"></a>git 删除本地分支</h3><p><code>git branch -D (br)</code></p>\n<h3 id=\"git-删除远程分支\"><a href=\"#git-删除远程分支\" class=\"headerlink\" title=\"git 删除远程分支\"></a>git 删除远程分支</h3><p><code>git push origin :br  (origin 后面有空格)</code></p>\n<h3 id=\"git代码库回滚-指的是将代码库某分支退回到以前的某个commit-id\"><a href=\"#git代码库回滚-指的是将代码库某分支退回到以前的某个commit-id\" class=\"headerlink\" title=\"git代码库回滚: 指的是将代码库某分支退回到以前的某个commit id\"></a>git代码库回滚: 指的是将代码库某分支退回到以前的某个commit id</h3><h4 id=\"本地代码库回滚\"><a href=\"#本地代码库回滚\" class=\"headerlink\" title=\"本地代码库回滚\"></a>本地代码库回滚</h4><p><code>git reset --hard commit-id :回滚到commit-id，讲commit-id之后提交的commit都去除</code><br><code>git reset --hard HEAD~3：将最近3次的提交回滚</code></p>\n<h4 id=\"远程代码库回滚\"><a href=\"#远程代码库回滚\" class=\"headerlink\" title=\"远程代码库回滚\"></a>远程代码库回滚</h4><p>应用场景：自动部署系统发布后发现问题，需要回滚到某一个commit，再重新发布</p>\n<p>原理：先将本地分支退回到某个commit，删除远程分支，再重新push本地分支</p>\n<p>操作步骤：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、git checkout the_branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、git pull</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>、git branch the_branch_backup <span class=\"comment\">//备份一下这个分支当前的情况</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>、git reset --hard the_commit_id <span class=\"comment\">//把the_branch本地回滚到the_commit_id</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span>、git push origin :the_branch <span class=\"comment\">//删除远程 the_branch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6</span>、git push origin the_branch <span class=\"comment\">//用回滚后的本地分支重新建立远程分支</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">7</span>、git push origin :the_branch_backup <span class=\"comment\">//如果前面都成功了，删除这个备份分支</span></span><br></pre></td></tr></table></figure>\n<p>如果使用了gerrit做远程代码中心库和code review平台，需要确保操作git的用户具备分支的push权限，并且选择了 Force Push选项（在push权限设置里有这个选项）</p>\n<p>另外，gerrit中心库是个bare库，将HEAD默认指向了master，因此master分支是不能进行删除操作的，最好不要选择删除master分支的策略，换用其他分支。如果一定要这样做，可以考虑到gerrit服务器上修改HEAD指针。。。不建议这样搞</p>\n<p>转载自：<a href=\"http://www.cnblogs.com/hqbhonker/p/5092300.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/hqbhonker/p/5092300.html</a></p>\n<h2 id=\"git删除远程仓库文件或目录\"><a href=\"#git删除远程仓库文件或目录\" class=\"headerlink\" title=\"git删除远程仓库文件或目录\"></a>git删除远程仓库文件或目录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git rm --cached ./file.txt //删除目录下的file.txt文件</span><br><span class=\"line\"></span><br><span class=\"line\">git rm -r --cached folder  //删除目录folder</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m &quot;删除操作&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"git-分支操作\"><a href=\"#git-分支操作\" class=\"headerlink\" title=\"git 分支操作\"></a>git 分支操作</h2><h3 id=\"查看本地分支\"><a href=\"#查看本地分支\" class=\"headerlink\" title=\"查看本地分支\"></a>查看本地分支</h3><p><code>git branch</code></p>\n<h3 id=\"查看远程分支\"><a href=\"#查看远程分支\" class=\"headerlink\" title=\"查看远程分支\"></a>查看远程分支</h3><p><code>git branch -a</code></p>\n<h3 id=\"创建本地分支\"><a href=\"#创建本地分支\" class=\"headerlink\" title=\"创建本地分支\"></a>创建本地分支</h3><p><code>git branch (br)</code></p>","more":"<h3 id=\"把分支推到远程分支\"><a href=\"#把分支推到远程分支\" class=\"headerlink\" title=\"把分支推到远程分支\"></a>把分支推到远程分支</h3><p><code>git push origin (br)</code></p>\n<h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><p><code>git checkout (br)</code></p>\n<h3 id=\"git-删除本地分支\"><a href=\"#git-删除本地分支\" class=\"headerlink\" title=\"git 删除本地分支\"></a>git 删除本地分支</h3><p><code>git branch -D (br)</code></p>\n<h3 id=\"git-删除远程分支\"><a href=\"#git-删除远程分支\" class=\"headerlink\" title=\"git 删除远程分支\"></a>git 删除远程分支</h3><p><code>git push origin :br  (origin 后面有空格)</code></p>\n<h3 id=\"git代码库回滚-指的是将代码库某分支退回到以前的某个commit-id\"><a href=\"#git代码库回滚-指的是将代码库某分支退回到以前的某个commit-id\" class=\"headerlink\" title=\"git代码库回滚: 指的是将代码库某分支退回到以前的某个commit id\"></a>git代码库回滚: 指的是将代码库某分支退回到以前的某个commit id</h3><h4 id=\"本地代码库回滚\"><a href=\"#本地代码库回滚\" class=\"headerlink\" title=\"本地代码库回滚\"></a>本地代码库回滚</h4><p><code>git reset --hard commit-id :回滚到commit-id，讲commit-id之后提交的commit都去除</code><br><code>git reset --hard HEAD~3：将最近3次的提交回滚</code></p>\n<h4 id=\"远程代码库回滚\"><a href=\"#远程代码库回滚\" class=\"headerlink\" title=\"远程代码库回滚\"></a>远程代码库回滚</h4><p>应用场景：自动部署系统发布后发现问题，需要回滚到某一个commit，再重新发布</p>\n<p>原理：先将本地分支退回到某个commit，删除远程分支，再重新push本地分支</p>\n<p>操作步骤：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、git checkout the_branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、git pull</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>、git branch the_branch_backup <span class=\"comment\">//备份一下这个分支当前的情况</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>、git reset --hard the_commit_id <span class=\"comment\">//把the_branch本地回滚到the_commit_id</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span>、git push origin :the_branch <span class=\"comment\">//删除远程 the_branch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6</span>、git push origin the_branch <span class=\"comment\">//用回滚后的本地分支重新建立远程分支</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">7</span>、git push origin :the_branch_backup <span class=\"comment\">//如果前面都成功了，删除这个备份分支</span></span><br></pre></td></tr></table></figure>\n<p>如果使用了gerrit做远程代码中心库和code review平台，需要确保操作git的用户具备分支的push权限，并且选择了 Force Push选项（在push权限设置里有这个选项）</p>\n<p>另外，gerrit中心库是个bare库，将HEAD默认指向了master，因此master分支是不能进行删除操作的，最好不要选择删除master分支的策略，换用其他分支。如果一定要这样做，可以考虑到gerrit服务器上修改HEAD指针。。。不建议这样搞</p>\n<p>转载自：<a href=\"http://www.cnblogs.com/hqbhonker/p/5092300.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/hqbhonker/p/5092300.html</a></p>\n<h2 id=\"git删除远程仓库文件或目录\"><a href=\"#git删除远程仓库文件或目录\" class=\"headerlink\" title=\"git删除远程仓库文件或目录\"></a>git删除远程仓库文件或目录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git rm --cached ./file.txt //删除目录下的file.txt文件</span><br><span class=\"line\"></span><br><span class=\"line\">git rm -r --cached folder  //删除目录folder</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m &quot;删除操作&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>"},{"title":"JS常用原生函数汇总","date":"2017-11-09T01:56:26.000Z","_content":"\n工作中经常用到的方法。\n\n<!-- more -->\n\n## type 类型判断\n```javascript\nisString (o) { //是否字符串\n    return Object.prototype.toString.call(o).slice(8, -1) === 'String'\n}\n\nisNumber (o) { //是否数字\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Number'\n}\n\nisObj (o) { //是否对象\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Object'\n}\n\nisArray (o) { //是否数组\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Array'\n}\n\nisDate (o) { //是否时间\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Date'\n}\n\nisBoolean (o) { //是否boolean\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Boolean'\n}\n\nisFunction (o) { //是否函数\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Function'\n}\n\nisNull (o) { //是否为null\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Null'\n}\n\nisUndefined (o) { //是否undefined\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Undefined'\n}\n\nisFalse (o) {\n    if (!o || o === 'null' || o === 'undefined' || o === 'false' || o === 'NaN') return true\n        return false\n}\n\nisTrue (o) {\n    return !this.isFalse(o)\n}\n\nisIos () {\n    var u = navigator.userAgent;\n    if (u.indexOf('Android') > -1 || u.indexOf('Linux') > -1) {//安卓手机\n        // return \"Android\";\n        return false\n    } else if (u.indexOf('iPhone') > -1) {//苹果手机\n        // return \"iPhone\";\n        return true\n    } else if (u.indexOf('iPad') > -1) {//iPad\n        // return \"iPad\";\n        return false\n    } else if (u.indexOf('Windows Phone') > -1) {//winphone手机\n        // return \"Windows Phone\";\n        return false\n    }else{\n        return false\n    }\n}\n\nisPC () { //是否为PC端\n    var userAgentInfo = navigator.userAgent;\n    var Agents = [\"Android\", \"iPhone\",\n                \"SymbianOS\", \"Windows Phone\",\n                \"iPad\", \"iPod\"];\n    var flag = true;\n    for (var v = 0; v < Agents.length; v++) {\n        if (userAgentInfo.indexOf(Agents[v]) > 0) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nbrowserType(){\n    var userAgent = navigator.userAgent; //取得浏览器的userAgent字符串\n    var isOpera = userAgent.indexOf(\"Opera\") > -1; //判断是否Opera浏览器\n    var isIE = userAgent.indexOf(\"compatible\") > -1 && userAgent.indexOf(\"MSIE\") > -1 && !isOpera; //判断是否IE浏览器\n    var isEdge = userAgent.indexOf(\"Edge\") > -1; //判断是否IE的Edge浏览器\n    var isFF = userAgent.indexOf(\"Firefox\") > -1; //判断是否Firefox浏览器\n    var isSafari = userAgent.indexOf(\"Safari\") > -1 && userAgent.indexOf(\"Chrome\") == -1; //判断是否Safari浏览器\n    var isChrome = userAgent.indexOf(\"Chrome\") > -1 && userAgent.indexOf(\"Safari\") > -1; //判断Chrome浏览器\n    if (isIE) {\n        var reIE = new RegExp(\"MSIE (\\\\d+\\\\.\\\\d+);\");\n        reIE.test(userAgent);\n        var fIEVersion = parseFloat(RegExp[\"$1\"]);\n        if(fIEVersion == 7) return \"IE7\"\n        else if(fIEVersion == 8) return \"IE8\";\n        else if(fIEVersion == 9) return \"IE9\";\n        else if(fIEVersion == 10) return \"IE10\";\n        else if(fIEVersion == 11) return \"IE11\";\n        else return \"IE7以下\"//IE版本过低\n    }\n\n    if (isFF) return \"FF\";\n    if (isOpera) return \"Opera\";\n    if (isEdge) return \"Edge\";\n    if (isSafari) return \"Safari\";\n    if (isChrome) return \"Chrome\";\n}\n\ncheckStr (str, type) {\n    switch (type) {\n        case 'phone':   //手机号码\n            return /^1[3|4|5|7|8][0-9]{9}$/.test(str);\n        case 'tel':     //座机\n            return /^(0\\d{2,3}-\\d{7,8})(-\\d{1,4})?$/.test(str);\n        case 'card':    //身份证\n            return /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/.test(str);\n        case 'pwd':     //密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线\n            return /^[a-zA-Z]\\w{5,17}$/.test(str)\n        case 'postal':  //邮政编码\n            return /[1-9]\\d{5}(?!\\d)/.test(str);\n        case 'QQ':      //QQ号\n            return /^[1-9][0-9]{4,9}$/.test(str);\n        case 'email':   //邮箱\n            return /^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/.test(str);\n        case 'money':   //金额(小数点2位)\n            return /^\\d*(?:\\.\\d{0,2})?$/.test(str);\n        case 'URL':     //网址\n            return /(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&:/~\\+#]*[\\w\\-\\@?^=%&/~\\+#])?/.test(str)\n        case 'IP':      //IP\n            return /((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))/.test(str);\n        case 'date':    //日期时间\n            return /^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2})(?:\\:\\d{2}|:(\\d{2}):(\\d{2}))$/.test(str) || /^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/.test(str)\n        case 'number':  //数字\n            return /^[0-9]$/.test(str);\n        case 'english': //英文\n            return /^[a-zA-Z]+$/.test(str);\n        case 'chinese': //中文\n            return /^[\\u4E00-\\u9FA5]+$/.test(str);\n        case 'lower':   //小写\n            return /^[a-z]+$/.test(str);\n        case 'upper':   //大写\n            return /^[A-Z]+$/.test(str);\n        case 'HTML':    //HTML标记\n            return /<(\"[^\"]*\"|'[^']*'|[^'\">])*>/.test(str);\n        default:\n            return true;\n    }\n}\n```\n\n## Date\n```javascript\n/**\n * 格式化时间\n * \n * @param  {time} 时间\n * @param  {cFormat} 格式\n * @return {String} 字符串\n *\n * @example formatTime('2018-1-29', '{y}/{m}/{d} {h}:{i}:{s}') // -> 2018/01/29 00:00:00\n */\nfunction formatTime(time, cFormat) {\n    if (arguments.length === 0) return null\n    if ((time + '').length === 10) {\n        time = +time * 1000\n    }\n\n    var format = cFormat || '{y}-{m}-{d} {h}:{i}:{s}', date\n    if (typeof time === 'object') {\n        date = time\n    } else {\n        date = new Date(time)\n    }\n\n    var formatObj = {\n        y: date.getFullYear(),\n        m: date.getMonth() + 1,\n        d: date.getDate(),\n        h: date.getHours(),\n        i: date.getMinutes(),\n        s: date.getSeconds(),\n        a: date.getDay()\n    }\n    var time_str = format.replace(/{(y|m|d|h|i|s|a)+}/g, (result, key) => {\n        var value = formatObj[key]\n        if (key === 'a') return ['一', '二', '三', '四', '五', '六', '日'][value - 1]\n        if (result.length > 0 && value < 10) {\n            value = '0' + value\n        }\n        return value || 0\n    })\n    return time_str\n}\n```\n\n## Array\n```javascript\n/*判断一个元素是否在数组中*/\ncontains (arr, val) {\n    return arr.indexOf(val) != -1 ? true : false;\n}\n```\n\n## 获取url参数\n\n```javascript\nfunction getQueryString(name) {\n  var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\");\n  var r = window.location.search.substr(1).match(reg);\n  if (r != null) return unescape(r[2]); return null;\n}\n```\n\n## 简单去抖函数\n\n```javascript\nfunction debounce(time, fn) {\n  var timer;\n  return function () {\n    var ctx = this,\n        args = arguments;\n    clearTimeout(timer)\n    timer = setTimeout(function(){\n      fn.apply(ctx, args)\n    }, time)\n  }\n}\n```\n\n","source":"_posts/JS常用原生函数汇总.md","raw":"---\ntitle: JS常用原生函数汇总\ndate: 2017-11-09 09:56:26\ntags:\n    - 原生函数\n    - 实用\n---\n\n工作中经常用到的方法。\n\n<!-- more -->\n\n## type 类型判断\n```javascript\nisString (o) { //是否字符串\n    return Object.prototype.toString.call(o).slice(8, -1) === 'String'\n}\n\nisNumber (o) { //是否数字\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Number'\n}\n\nisObj (o) { //是否对象\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Object'\n}\n\nisArray (o) { //是否数组\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Array'\n}\n\nisDate (o) { //是否时间\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Date'\n}\n\nisBoolean (o) { //是否boolean\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Boolean'\n}\n\nisFunction (o) { //是否函数\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Function'\n}\n\nisNull (o) { //是否为null\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Null'\n}\n\nisUndefined (o) { //是否undefined\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Undefined'\n}\n\nisFalse (o) {\n    if (!o || o === 'null' || o === 'undefined' || o === 'false' || o === 'NaN') return true\n        return false\n}\n\nisTrue (o) {\n    return !this.isFalse(o)\n}\n\nisIos () {\n    var u = navigator.userAgent;\n    if (u.indexOf('Android') > -1 || u.indexOf('Linux') > -1) {//安卓手机\n        // return \"Android\";\n        return false\n    } else if (u.indexOf('iPhone') > -1) {//苹果手机\n        // return \"iPhone\";\n        return true\n    } else if (u.indexOf('iPad') > -1) {//iPad\n        // return \"iPad\";\n        return false\n    } else if (u.indexOf('Windows Phone') > -1) {//winphone手机\n        // return \"Windows Phone\";\n        return false\n    }else{\n        return false\n    }\n}\n\nisPC () { //是否为PC端\n    var userAgentInfo = navigator.userAgent;\n    var Agents = [\"Android\", \"iPhone\",\n                \"SymbianOS\", \"Windows Phone\",\n                \"iPad\", \"iPod\"];\n    var flag = true;\n    for (var v = 0; v < Agents.length; v++) {\n        if (userAgentInfo.indexOf(Agents[v]) > 0) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nbrowserType(){\n    var userAgent = navigator.userAgent; //取得浏览器的userAgent字符串\n    var isOpera = userAgent.indexOf(\"Opera\") > -1; //判断是否Opera浏览器\n    var isIE = userAgent.indexOf(\"compatible\") > -1 && userAgent.indexOf(\"MSIE\") > -1 && !isOpera; //判断是否IE浏览器\n    var isEdge = userAgent.indexOf(\"Edge\") > -1; //判断是否IE的Edge浏览器\n    var isFF = userAgent.indexOf(\"Firefox\") > -1; //判断是否Firefox浏览器\n    var isSafari = userAgent.indexOf(\"Safari\") > -1 && userAgent.indexOf(\"Chrome\") == -1; //判断是否Safari浏览器\n    var isChrome = userAgent.indexOf(\"Chrome\") > -1 && userAgent.indexOf(\"Safari\") > -1; //判断Chrome浏览器\n    if (isIE) {\n        var reIE = new RegExp(\"MSIE (\\\\d+\\\\.\\\\d+);\");\n        reIE.test(userAgent);\n        var fIEVersion = parseFloat(RegExp[\"$1\"]);\n        if(fIEVersion == 7) return \"IE7\"\n        else if(fIEVersion == 8) return \"IE8\";\n        else if(fIEVersion == 9) return \"IE9\";\n        else if(fIEVersion == 10) return \"IE10\";\n        else if(fIEVersion == 11) return \"IE11\";\n        else return \"IE7以下\"//IE版本过低\n    }\n\n    if (isFF) return \"FF\";\n    if (isOpera) return \"Opera\";\n    if (isEdge) return \"Edge\";\n    if (isSafari) return \"Safari\";\n    if (isChrome) return \"Chrome\";\n}\n\ncheckStr (str, type) {\n    switch (type) {\n        case 'phone':   //手机号码\n            return /^1[3|4|5|7|8][0-9]{9}$/.test(str);\n        case 'tel':     //座机\n            return /^(0\\d{2,3}-\\d{7,8})(-\\d{1,4})?$/.test(str);\n        case 'card':    //身份证\n            return /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/.test(str);\n        case 'pwd':     //密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线\n            return /^[a-zA-Z]\\w{5,17}$/.test(str)\n        case 'postal':  //邮政编码\n            return /[1-9]\\d{5}(?!\\d)/.test(str);\n        case 'QQ':      //QQ号\n            return /^[1-9][0-9]{4,9}$/.test(str);\n        case 'email':   //邮箱\n            return /^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/.test(str);\n        case 'money':   //金额(小数点2位)\n            return /^\\d*(?:\\.\\d{0,2})?$/.test(str);\n        case 'URL':     //网址\n            return /(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&:/~\\+#]*[\\w\\-\\@?^=%&/~\\+#])?/.test(str)\n        case 'IP':      //IP\n            return /((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))/.test(str);\n        case 'date':    //日期时间\n            return /^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2})(?:\\:\\d{2}|:(\\d{2}):(\\d{2}))$/.test(str) || /^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/.test(str)\n        case 'number':  //数字\n            return /^[0-9]$/.test(str);\n        case 'english': //英文\n            return /^[a-zA-Z]+$/.test(str);\n        case 'chinese': //中文\n            return /^[\\u4E00-\\u9FA5]+$/.test(str);\n        case 'lower':   //小写\n            return /^[a-z]+$/.test(str);\n        case 'upper':   //大写\n            return /^[A-Z]+$/.test(str);\n        case 'HTML':    //HTML标记\n            return /<(\"[^\"]*\"|'[^']*'|[^'\">])*>/.test(str);\n        default:\n            return true;\n    }\n}\n```\n\n## Date\n```javascript\n/**\n * 格式化时间\n * \n * @param  {time} 时间\n * @param  {cFormat} 格式\n * @return {String} 字符串\n *\n * @example formatTime('2018-1-29', '{y}/{m}/{d} {h}:{i}:{s}') // -> 2018/01/29 00:00:00\n */\nfunction formatTime(time, cFormat) {\n    if (arguments.length === 0) return null\n    if ((time + '').length === 10) {\n        time = +time * 1000\n    }\n\n    var format = cFormat || '{y}-{m}-{d} {h}:{i}:{s}', date\n    if (typeof time === 'object') {\n        date = time\n    } else {\n        date = new Date(time)\n    }\n\n    var formatObj = {\n        y: date.getFullYear(),\n        m: date.getMonth() + 1,\n        d: date.getDate(),\n        h: date.getHours(),\n        i: date.getMinutes(),\n        s: date.getSeconds(),\n        a: date.getDay()\n    }\n    var time_str = format.replace(/{(y|m|d|h|i|s|a)+}/g, (result, key) => {\n        var value = formatObj[key]\n        if (key === 'a') return ['一', '二', '三', '四', '五', '六', '日'][value - 1]\n        if (result.length > 0 && value < 10) {\n            value = '0' + value\n        }\n        return value || 0\n    })\n    return time_str\n}\n```\n\n## Array\n```javascript\n/*判断一个元素是否在数组中*/\ncontains (arr, val) {\n    return arr.indexOf(val) != -1 ? true : false;\n}\n```\n\n## 获取url参数\n\n```javascript\nfunction getQueryString(name) {\n  var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\");\n  var r = window.location.search.substr(1).match(reg);\n  if (r != null) return unescape(r[2]); return null;\n}\n```\n\n## 简单去抖函数\n\n```javascript\nfunction debounce(time, fn) {\n  var timer;\n  return function () {\n    var ctx = this,\n        args = arguments;\n    clearTimeout(timer)\n    timer = setTimeout(function(){\n      fn.apply(ctx, args)\n    }, time)\n  }\n}\n```\n\n","slug":"JS常用原生函数汇总","published":1,"updated":"2023-05-31T16:56:15.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clibygb3r0005f4fmg318jaqe","content":"<p>工作中经常用到的方法。</p>\n<a id=\"more\"></a>\n<h2 id=\"type-类型判断\"><a href=\"#type-类型判断\" class=\"headerlink\" title=\"type 类型判断\"></a>type 类型判断</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isString (o) &#123; <span class=\"comment\">//是否字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'String'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isNumber (o) &#123; <span class=\"comment\">//是否数字</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Number'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isObj (o) &#123; <span class=\"comment\">//是否对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Object'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isArray (o) &#123; <span class=\"comment\">//是否数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Array'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isDate (o) &#123; <span class=\"comment\">//是否时间</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Date'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isBoolean (o) &#123; <span class=\"comment\">//是否boolean</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Boolean'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isFunction (o) &#123; <span class=\"comment\">//是否函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Function'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isNull (o) &#123; <span class=\"comment\">//是否为null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Null'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isUndefined (o) &#123; <span class=\"comment\">//是否undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Undefined'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isFalse (o) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o || o === <span class=\"string\">'null'</span> || o === <span class=\"string\">'undefined'</span> || o === <span class=\"string\">'false'</span> || o === <span class=\"string\">'NaN'</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isTrue (o) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"keyword\">this</span>.isFalse(o)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isIos () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> u = navigator.userAgent;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u.indexOf(<span class=\"string\">'Android'</span>) &gt; <span class=\"number\">-1</span> || u.indexOf(<span class=\"string\">'Linux'</span>) &gt; <span class=\"number\">-1</span>) &#123;<span class=\"comment\">//安卓手机</span></span><br><span class=\"line\">        <span class=\"comment\">// return \"Android\";</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (u.indexOf(<span class=\"string\">'iPhone'</span>) &gt; <span class=\"number\">-1</span>) &#123;<span class=\"comment\">//苹果手机</span></span><br><span class=\"line\">        <span class=\"comment\">// return \"iPhone\";</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (u.indexOf(<span class=\"string\">'iPad'</span>) &gt; <span class=\"number\">-1</span>) &#123;<span class=\"comment\">//iPad</span></span><br><span class=\"line\">        <span class=\"comment\">// return \"iPad\";</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (u.indexOf(<span class=\"string\">'Windows Phone'</span>) &gt; <span class=\"number\">-1</span>) &#123;<span class=\"comment\">//winphone手机</span></span><br><span class=\"line\">        <span class=\"comment\">// return \"Windows Phone\";</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isPC () &#123; <span class=\"comment\">//是否为PC端</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> userAgentInfo = navigator.userAgent;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Agents = [<span class=\"string\">\"Android\"</span>, <span class=\"string\">\"iPhone\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"SymbianOS\"</span>, <span class=\"string\">\"Windows Phone\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"iPad\"</span>, <span class=\"string\">\"iPod\"</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> v = <span class=\"number\">0</span>; v &lt; Agents.length; v++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (userAgentInfo.indexOf(Agents[v]) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">browserType()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> userAgent = navigator.userAgent; <span class=\"comment\">//取得浏览器的userAgent字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isOpera = userAgent.indexOf(<span class=\"string\">\"Opera\"</span>) &gt; <span class=\"number\">-1</span>; <span class=\"comment\">//判断是否Opera浏览器</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isIE = userAgent.indexOf(<span class=\"string\">\"compatible\"</span>) &gt; <span class=\"number\">-1</span> &amp;&amp; userAgent.indexOf(<span class=\"string\">\"MSIE\"</span>) &gt; <span class=\"number\">-1</span> &amp;&amp; !isOpera; <span class=\"comment\">//判断是否IE浏览器</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isEdge = userAgent.indexOf(<span class=\"string\">\"Edge\"</span>) &gt; <span class=\"number\">-1</span>; <span class=\"comment\">//判断是否IE的Edge浏览器</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isFF = userAgent.indexOf(<span class=\"string\">\"Firefox\"</span>) &gt; <span class=\"number\">-1</span>; <span class=\"comment\">//判断是否Firefox浏览器</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isSafari = userAgent.indexOf(<span class=\"string\">\"Safari\"</span>) &gt; <span class=\"number\">-1</span> &amp;&amp; userAgent.indexOf(<span class=\"string\">\"Chrome\"</span>) == <span class=\"number\">-1</span>; <span class=\"comment\">//判断是否Safari浏览器</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isChrome = userAgent.indexOf(<span class=\"string\">\"Chrome\"</span>) &gt; <span class=\"number\">-1</span> &amp;&amp; userAgent.indexOf(<span class=\"string\">\"Safari\"</span>) &gt; <span class=\"number\">-1</span>; <span class=\"comment\">//判断Chrome浏览器</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isIE) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> reIE = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"MSIE (\\\\d+\\\\.\\\\d+);\"</span>);</span><br><span class=\"line\">        reIE.test(userAgent);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> fIEVersion = <span class=\"built_in\">parseFloat</span>(<span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fIEVersion == <span class=\"number\">7</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"IE7\"</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(fIEVersion == <span class=\"number\">8</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"IE8\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(fIEVersion == <span class=\"number\">9</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"IE9\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(fIEVersion == <span class=\"number\">10</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"IE10\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(fIEVersion == <span class=\"number\">11</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"IE11\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"string\">\"IE7以下\"</span><span class=\"comment\">//IE版本过低</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isFF) <span class=\"keyword\">return</span> <span class=\"string\">\"FF\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isOpera) <span class=\"keyword\">return</span> <span class=\"string\">\"Opera\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isEdge) <span class=\"keyword\">return</span> <span class=\"string\">\"Edge\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isSafari) <span class=\"keyword\">return</span> <span class=\"string\">\"Safari\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isChrome) <span class=\"keyword\">return</span> <span class=\"string\">\"Chrome\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">checkStr (str, type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'phone'</span>:   <span class=\"comment\">//手机号码</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^1[3|4|5|7|8][0-9]&#123;9&#125;$/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'tel'</span>:     <span class=\"comment\">//座机</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^(0\\d&#123;2,3&#125;-\\d&#123;7,8&#125;)(-\\d&#123;1,4&#125;)?$/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'card'</span>:    <span class=\"comment\">//身份证</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/(^\\d&#123;15&#125;$)|(^\\d&#123;18&#125;$)|(^\\d&#123;17&#125;(\\d|X|x)$)/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'pwd'</span>:     <span class=\"comment\">//密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^[a-zA-Z]\\w&#123;5,17&#125;$/</span>.test(str)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'postal'</span>:  <span class=\"comment\">//邮政编码</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/[1-9]\\d&#123;5&#125;(?!\\d)/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'QQ'</span>:      <span class=\"comment\">//QQ号</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^[1-9][0-9]&#123;4,9&#125;$/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'email'</span>:   <span class=\"comment\">//邮箱</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'money'</span>:   <span class=\"comment\">//金额(小数点2位)</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^\\d*(?:\\.\\d&#123;0,2&#125;)?$/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'URL'</span>:     <span class=\"comment\">//网址</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:/~\\+#]*[\\w\\-\\@?^=%&amp;/~\\+#])?/</span>.test(str)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'IP'</span>:      <span class=\"comment\">//IP</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'date'</span>:    <span class=\"comment\">//日期时间</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^(\\d&#123;4&#125;)\\-(\\d&#123;2&#125;)\\-(\\d&#123;2&#125;) (\\d&#123;2&#125;)(?:\\:\\d&#123;2&#125;|:(\\d&#123;2&#125;):(\\d&#123;2&#125;))$/</span>.test(str) || <span class=\"regexp\">/^(\\d&#123;4&#125;)\\-(\\d&#123;2&#125;)\\-(\\d&#123;2&#125;)$/</span>.test(str)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'number'</span>:  <span class=\"comment\">//数字</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^[0-9]$/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'english'</span>: <span class=\"comment\">//英文</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^[a-zA-Z]+$/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'chinese'</span>: <span class=\"comment\">//中文</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^[\\u4E00-\\u9FA5]+$/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'lower'</span>:   <span class=\"comment\">//小写</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^[a-z]+$/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'upper'</span>:   <span class=\"comment\">//大写</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^[A-Z]+$/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'HTML'</span>:    <span class=\"comment\">//HTML标记</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/&lt;(\"[^\"]*\"|'[^']*'|[^'\"&gt;])*&gt;/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 格式化时间</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;time&#125; 时间</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;cFormat&#125; 格式</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;String&#125; 字符串</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @example formatTime('2018-1-29', '&#123;y&#125;/&#123;m&#125;/&#123;d&#125; &#123;h&#125;:&#123;i&#125;:&#123;s&#125;') // -&gt; 2018/01/29 00:00:00</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatTime</span>(<span class=\"params\">time, cFormat</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((time + <span class=\"string\">''</span>).length === <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">        time = +time * <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> format = cFormat || <span class=\"string\">'&#123;y&#125;-&#123;m&#125;-&#123;d&#125; &#123;h&#125;:&#123;i&#125;:&#123;s&#125;'</span>, date</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> time === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">        date = time</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(time)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> formatObj = &#123;</span><br><span class=\"line\">        y: date.getFullYear(),</span><br><span class=\"line\">        m: date.getMonth() + <span class=\"number\">1</span>,</span><br><span class=\"line\">        d: date.getDate(),</span><br><span class=\"line\">        h: date.getHours(),</span><br><span class=\"line\">        i: date.getMinutes(),</span><br><span class=\"line\">        s: date.getSeconds(),</span><br><span class=\"line\">        a: date.getDay()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> time_str = format.replace(<span class=\"regexp\">/&#123;(y|m|d|h|i|s|a)+&#125;/g</span>, (result, key) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> value = formatObj[key]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key === <span class=\"string\">'a'</span>) <span class=\"keyword\">return</span> [<span class=\"string\">'一'</span>, <span class=\"string\">'二'</span>, <span class=\"string\">'三'</span>, <span class=\"string\">'四'</span>, <span class=\"string\">'五'</span>, <span class=\"string\">'六'</span>, <span class=\"string\">'日'</span>][value - <span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result.length &gt; <span class=\"number\">0</span> &amp;&amp; value &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            value = <span class=\"string\">'0'</span> + value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value || <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> time_str</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*判断一个元素是否在数组中*/</span></span><br><span class=\"line\">contains (arr, val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.indexOf(val) != <span class=\"number\">-1</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取url参数\"><a href=\"#获取url参数\" class=\"headerlink\" title=\"获取url参数\"></a>获取url参数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getQueryString</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(^|&amp;)\"</span> + name + <span class=\"string\">\"=([^&amp;]*)(&amp;|$)\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> r = <span class=\"built_in\">window</span>.location.search.substr(<span class=\"number\">1</span>).match(reg);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (r != <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">unescape</span>(r[<span class=\"number\">2</span>]); <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"简单去抖函数\"><a href=\"#简单去抖函数\" class=\"headerlink\" title=\"简单去抖函数\"></a>简单去抖函数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">time, fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> timer;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">        args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    clearTimeout(timer)</span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      fn.apply(ctx, args)</span><br><span class=\"line\">    &#125;, time)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>工作中经常用到的方法。</p>","more":"<h2 id=\"type-类型判断\"><a href=\"#type-类型判断\" class=\"headerlink\" title=\"type 类型判断\"></a>type 类型判断</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isString (o) &#123; <span class=\"comment\">//是否字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'String'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isNumber (o) &#123; <span class=\"comment\">//是否数字</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Number'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isObj (o) &#123; <span class=\"comment\">//是否对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Object'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isArray (o) &#123; <span class=\"comment\">//是否数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Array'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isDate (o) &#123; <span class=\"comment\">//是否时间</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Date'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isBoolean (o) &#123; <span class=\"comment\">//是否boolean</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Boolean'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isFunction (o) &#123; <span class=\"comment\">//是否函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Function'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isNull (o) &#123; <span class=\"comment\">//是否为null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Null'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isUndefined (o) &#123; <span class=\"comment\">//是否undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Undefined'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isFalse (o) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o || o === <span class=\"string\">'null'</span> || o === <span class=\"string\">'undefined'</span> || o === <span class=\"string\">'false'</span> || o === <span class=\"string\">'NaN'</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isTrue (o) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"keyword\">this</span>.isFalse(o)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isIos () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> u = navigator.userAgent;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u.indexOf(<span class=\"string\">'Android'</span>) &gt; <span class=\"number\">-1</span> || u.indexOf(<span class=\"string\">'Linux'</span>) &gt; <span class=\"number\">-1</span>) &#123;<span class=\"comment\">//安卓手机</span></span><br><span class=\"line\">        <span class=\"comment\">// return \"Android\";</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (u.indexOf(<span class=\"string\">'iPhone'</span>) &gt; <span class=\"number\">-1</span>) &#123;<span class=\"comment\">//苹果手机</span></span><br><span class=\"line\">        <span class=\"comment\">// return \"iPhone\";</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (u.indexOf(<span class=\"string\">'iPad'</span>) &gt; <span class=\"number\">-1</span>) &#123;<span class=\"comment\">//iPad</span></span><br><span class=\"line\">        <span class=\"comment\">// return \"iPad\";</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (u.indexOf(<span class=\"string\">'Windows Phone'</span>) &gt; <span class=\"number\">-1</span>) &#123;<span class=\"comment\">//winphone手机</span></span><br><span class=\"line\">        <span class=\"comment\">// return \"Windows Phone\";</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isPC () &#123; <span class=\"comment\">//是否为PC端</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> userAgentInfo = navigator.userAgent;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Agents = [<span class=\"string\">\"Android\"</span>, <span class=\"string\">\"iPhone\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"SymbianOS\"</span>, <span class=\"string\">\"Windows Phone\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"iPad\"</span>, <span class=\"string\">\"iPod\"</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> v = <span class=\"number\">0</span>; v &lt; Agents.length; v++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (userAgentInfo.indexOf(Agents[v]) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">browserType()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> userAgent = navigator.userAgent; <span class=\"comment\">//取得浏览器的userAgent字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isOpera = userAgent.indexOf(<span class=\"string\">\"Opera\"</span>) &gt; <span class=\"number\">-1</span>; <span class=\"comment\">//判断是否Opera浏览器</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isIE = userAgent.indexOf(<span class=\"string\">\"compatible\"</span>) &gt; <span class=\"number\">-1</span> &amp;&amp; userAgent.indexOf(<span class=\"string\">\"MSIE\"</span>) &gt; <span class=\"number\">-1</span> &amp;&amp; !isOpera; <span class=\"comment\">//判断是否IE浏览器</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isEdge = userAgent.indexOf(<span class=\"string\">\"Edge\"</span>) &gt; <span class=\"number\">-1</span>; <span class=\"comment\">//判断是否IE的Edge浏览器</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isFF = userAgent.indexOf(<span class=\"string\">\"Firefox\"</span>) &gt; <span class=\"number\">-1</span>; <span class=\"comment\">//判断是否Firefox浏览器</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isSafari = userAgent.indexOf(<span class=\"string\">\"Safari\"</span>) &gt; <span class=\"number\">-1</span> &amp;&amp; userAgent.indexOf(<span class=\"string\">\"Chrome\"</span>) == <span class=\"number\">-1</span>; <span class=\"comment\">//判断是否Safari浏览器</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isChrome = userAgent.indexOf(<span class=\"string\">\"Chrome\"</span>) &gt; <span class=\"number\">-1</span> &amp;&amp; userAgent.indexOf(<span class=\"string\">\"Safari\"</span>) &gt; <span class=\"number\">-1</span>; <span class=\"comment\">//判断Chrome浏览器</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isIE) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> reIE = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"MSIE (\\\\d+\\\\.\\\\d+);\"</span>);</span><br><span class=\"line\">        reIE.test(userAgent);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> fIEVersion = <span class=\"built_in\">parseFloat</span>(<span class=\"built_in\">RegExp</span>[<span class=\"string\">\"$1\"</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fIEVersion == <span class=\"number\">7</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"IE7\"</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(fIEVersion == <span class=\"number\">8</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"IE8\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(fIEVersion == <span class=\"number\">9</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"IE9\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(fIEVersion == <span class=\"number\">10</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"IE10\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(fIEVersion == <span class=\"number\">11</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"IE11\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"string\">\"IE7以下\"</span><span class=\"comment\">//IE版本过低</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isFF) <span class=\"keyword\">return</span> <span class=\"string\">\"FF\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isOpera) <span class=\"keyword\">return</span> <span class=\"string\">\"Opera\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isEdge) <span class=\"keyword\">return</span> <span class=\"string\">\"Edge\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isSafari) <span class=\"keyword\">return</span> <span class=\"string\">\"Safari\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isChrome) <span class=\"keyword\">return</span> <span class=\"string\">\"Chrome\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">checkStr (str, type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'phone'</span>:   <span class=\"comment\">//手机号码</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^1[3|4|5|7|8][0-9]&#123;9&#125;$/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'tel'</span>:     <span class=\"comment\">//座机</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^(0\\d&#123;2,3&#125;-\\d&#123;7,8&#125;)(-\\d&#123;1,4&#125;)?$/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'card'</span>:    <span class=\"comment\">//身份证</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/(^\\d&#123;15&#125;$)|(^\\d&#123;18&#125;$)|(^\\d&#123;17&#125;(\\d|X|x)$)/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'pwd'</span>:     <span class=\"comment\">//密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^[a-zA-Z]\\w&#123;5,17&#125;$/</span>.test(str)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'postal'</span>:  <span class=\"comment\">//邮政编码</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/[1-9]\\d&#123;5&#125;(?!\\d)/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'QQ'</span>:      <span class=\"comment\">//QQ号</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^[1-9][0-9]&#123;4,9&#125;$/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'email'</span>:   <span class=\"comment\">//邮箱</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'money'</span>:   <span class=\"comment\">//金额(小数点2位)</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^\\d*(?:\\.\\d&#123;0,2&#125;)?$/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'URL'</span>:     <span class=\"comment\">//网址</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:/~\\+#]*[\\w\\-\\@?^=%&amp;/~\\+#])?/</span>.test(str)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'IP'</span>:      <span class=\"comment\">//IP</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'date'</span>:    <span class=\"comment\">//日期时间</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^(\\d&#123;4&#125;)\\-(\\d&#123;2&#125;)\\-(\\d&#123;2&#125;) (\\d&#123;2&#125;)(?:\\:\\d&#123;2&#125;|:(\\d&#123;2&#125;):(\\d&#123;2&#125;))$/</span>.test(str) || <span class=\"regexp\">/^(\\d&#123;4&#125;)\\-(\\d&#123;2&#125;)\\-(\\d&#123;2&#125;)$/</span>.test(str)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'number'</span>:  <span class=\"comment\">//数字</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^[0-9]$/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'english'</span>: <span class=\"comment\">//英文</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^[a-zA-Z]+$/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'chinese'</span>: <span class=\"comment\">//中文</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^[\\u4E00-\\u9FA5]+$/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'lower'</span>:   <span class=\"comment\">//小写</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^[a-z]+$/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'upper'</span>:   <span class=\"comment\">//大写</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^[A-Z]+$/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'HTML'</span>:    <span class=\"comment\">//HTML标记</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/&lt;(\"[^\"]*\"|'[^']*'|[^'\"&gt;])*&gt;/</span>.test(str);</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 格式化时间</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;time&#125; 时间</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;cFormat&#125; 格式</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;String&#125; 字符串</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @example formatTime('2018-1-29', '&#123;y&#125;/&#123;m&#125;/&#123;d&#125; &#123;h&#125;:&#123;i&#125;:&#123;s&#125;') // -&gt; 2018/01/29 00:00:00</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatTime</span>(<span class=\"params\">time, cFormat</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((time + <span class=\"string\">''</span>).length === <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">        time = +time * <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> format = cFormat || <span class=\"string\">'&#123;y&#125;-&#123;m&#125;-&#123;d&#125; &#123;h&#125;:&#123;i&#125;:&#123;s&#125;'</span>, date</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> time === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">        date = time</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(time)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> formatObj = &#123;</span><br><span class=\"line\">        y: date.getFullYear(),</span><br><span class=\"line\">        m: date.getMonth() + <span class=\"number\">1</span>,</span><br><span class=\"line\">        d: date.getDate(),</span><br><span class=\"line\">        h: date.getHours(),</span><br><span class=\"line\">        i: date.getMinutes(),</span><br><span class=\"line\">        s: date.getSeconds(),</span><br><span class=\"line\">        a: date.getDay()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> time_str = format.replace(<span class=\"regexp\">/&#123;(y|m|d|h|i|s|a)+&#125;/g</span>, (result, key) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> value = formatObj[key]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key === <span class=\"string\">'a'</span>) <span class=\"keyword\">return</span> [<span class=\"string\">'一'</span>, <span class=\"string\">'二'</span>, <span class=\"string\">'三'</span>, <span class=\"string\">'四'</span>, <span class=\"string\">'五'</span>, <span class=\"string\">'六'</span>, <span class=\"string\">'日'</span>][value - <span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result.length &gt; <span class=\"number\">0</span> &amp;&amp; value &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            value = <span class=\"string\">'0'</span> + value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value || <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> time_str</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*判断一个元素是否在数组中*/</span></span><br><span class=\"line\">contains (arr, val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.indexOf(val) != <span class=\"number\">-1</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取url参数\"><a href=\"#获取url参数\" class=\"headerlink\" title=\"获取url参数\"></a>获取url参数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getQueryString</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(^|&amp;)\"</span> + name + <span class=\"string\">\"=([^&amp;]*)(&amp;|$)\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> r = <span class=\"built_in\">window</span>.location.search.substr(<span class=\"number\">1</span>).match(reg);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (r != <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">unescape</span>(r[<span class=\"number\">2</span>]); <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"简单去抖函数\"><a href=\"#简单去抖函数\" class=\"headerlink\" title=\"简单去抖函数\"></a>简单去抖函数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">time, fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> timer;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">        args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    clearTimeout(timer)</span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      fn.apply(ctx, args)</span><br><span class=\"line\">    &#125;, time)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Linux常用命令集合","date":"2017-10-23T05:59:05.000Z","_content":"\n# centos\n\n## 添加nginx网站\n\n## 防火墙\n\n关闭虚拟机防火墙：\n\n关闭命令： ` service iptables stop`\n\n永久关闭防火墙：`chkconfig iptables off`\n\n两个命令同时运行，运行完成后查看防火墙关闭状态\n`service iptables status`\n\n+ 关闭防火墙-----`service iptables stop `\n+ 启动防火墙-----`service iptables start `\n+ 重启防火墙-----`service iptables restart` \n+ 查看防火墙状态--`service iptables status `\n+ 永久关闭防火墙--`chkconfig iptables off` \n+ 永久关闭后启用--`chkconfig iptables on`\n","source":"_posts/Linux常用命令集合.md","raw":"---\ntitle: Linux常用命令集合\ndate: 2017-10-23 13:59:05\ntags:\n    - 服务器配置\n    - linux\n    - 后台\n---\n\n# centos\n\n## 添加nginx网站\n\n## 防火墙\n\n关闭虚拟机防火墙：\n\n关闭命令： ` service iptables stop`\n\n永久关闭防火墙：`chkconfig iptables off`\n\n两个命令同时运行，运行完成后查看防火墙关闭状态\n`service iptables status`\n\n+ 关闭防火墙-----`service iptables stop `\n+ 启动防火墙-----`service iptables start `\n+ 重启防火墙-----`service iptables restart` \n+ 查看防火墙状态--`service iptables status `\n+ 永久关闭防火墙--`chkconfig iptables off` \n+ 永久关闭后启用--`chkconfig iptables on`\n","slug":"Linux常用命令集合","published":1,"updated":"2023-05-31T16:56:15.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clibygb3s0006f4fmpuzrbvlb","content":"<h1 id=\"centos\"><a href=\"#centos\" class=\"headerlink\" title=\"centos\"></a>centos</h1><h2 id=\"添加nginx网站\"><a href=\"#添加nginx网站\" class=\"headerlink\" title=\"添加nginx网站\"></a>添加nginx网站</h2><h2 id=\"防火墙\"><a href=\"#防火墙\" class=\"headerlink\" title=\"防火墙\"></a>防火墙</h2><p>关闭虚拟机防火墙：</p>\n<p>关闭命令： <code>service iptables stop</code></p>\n<p>永久关闭防火墙：<code>chkconfig iptables off</code></p>\n<p>两个命令同时运行，运行完成后查看防火墙关闭状态<br><code>service iptables status</code></p>\n<ul>\n<li>关闭防火墙—–<code>service iptables stop</code></li>\n<li>启动防火墙—–<code>service iptables start</code></li>\n<li>重启防火墙—–<code>service iptables restart</code> </li>\n<li>查看防火墙状态–<code>service iptables status</code></li>\n<li>永久关闭防火墙–<code>chkconfig iptables off</code> </li>\n<li>永久关闭后启用–<code>chkconfig iptables on</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"centos\"><a href=\"#centos\" class=\"headerlink\" title=\"centos\"></a>centos</h1><h2 id=\"添加nginx网站\"><a href=\"#添加nginx网站\" class=\"headerlink\" title=\"添加nginx网站\"></a>添加nginx网站</h2><h2 id=\"防火墙\"><a href=\"#防火墙\" class=\"headerlink\" title=\"防火墙\"></a>防火墙</h2><p>关闭虚拟机防火墙：</p>\n<p>关闭命令： <code>service iptables stop</code></p>\n<p>永久关闭防火墙：<code>chkconfig iptables off</code></p>\n<p>两个命令同时运行，运行完成后查看防火墙关闭状态<br><code>service iptables status</code></p>\n<ul>\n<li>关闭防火墙—–<code>service iptables stop</code></li>\n<li>启动防火墙—–<code>service iptables start</code></li>\n<li>重启防火墙—–<code>service iptables restart</code> </li>\n<li>查看防火墙状态–<code>service iptables status</code></li>\n<li>永久关闭防火墙–<code>chkconfig iptables off</code> </li>\n<li>永久关闭后启用–<code>chkconfig iptables on</code></li>\n</ul>\n"},{"title":"了解一下JS的正则表达式","date":"2017-09-22T07:09:42.000Z","_content":"\n## 定义 Define\n\n正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象。这些模式或者说对象被用于 RegExp 的 exec 和 test 方法, 以及 String 的 match、replace、search 和 split 方法。\n\nRegExp 是一个用于创建正则表达式对象的构造函数，用于将文本与一个模式匹配。\n\n## 创建一个正则表达式\n\n有两种方法创建一个正则表达式。\n\n<!-- more -->\n\n### 1. 字面量方式\n\n由包含在斜杠之间的模式组成，如下所示:\n\n```JavaScript\n/*\n   /pattern/flags \n*/\nvar regex = /pattern/;\nvar regex = /ab+c/;\nvar regex = /^[a-zA-Z]+[0-9]*\\W?_$/gi;\n\n```\n\n在加载脚本后，正则表达式字面值提供正则表达式的编译。当正则表达式保持不变时，使用此方法可获得更好的性能。\n\n### 2. RegExp实例创建\n\n```JavaScript\n/* \n    new RegExp(pattern [, flags])\n*/\n\nlet regex = new RegExp(\"ab+c\");\nlet regex = new RegExp(/ab+c/); // 与上面等价\nlet regex = new RegExp(/^[a-zA-Z]+[0-9]*\\W?_$/, \"gi\");\nlet regex = new RegExp(\"^[a-zA-Z]+[0-9]*\\W?_$\", \"gi\");\n\n```\n\n> * 字面量方式和实例创建的方式在正则中的区别? \n1、字面量形式提供正则表达式的编译（compilation）状态，当正则表达式保持为常量时使用字面量。而构造函数方式，如` new RegExp('ab+c') `提供了正则表达式运行时编译（runtime compilation）。\n2、字面量方式中出现的一切都是元字符,所以不能进行变量值的拼接，而实例创建的方式是可以的。实例创建方式的好处在于可以在运行时编译，这个特性可以方便用来处理用户输入。\n3、字面量中直接写\\d就可以，而在实例中有两种情况，如果直接使用/pattern/这种方式创建与字面量方式书写无区别，即\\d，如果是带双引号，双引号内的需要把它转译\\\\\\\\d\n\n比如：\n\n```JavaScript\nvar name = 'Jack';\nvar reg = /^\\d+name+\\d+$/; //这样写是无效的 必须得用实例创建\nvar reg = new RexExp(\"^\\\\d\" + name + \"\\\\d+$\",\"g\");\n\n```\n\n#### RegExp对象的参数\n\n` pattern `:正则表达式的文本。\n\n` flags `:可以具有以下值的任意组合：\n\n> ` g `：全局匹配;找到所有匹配，而不是在第一个匹配后停止\n` i `：忽略大小写\n` m `：多行; 将开始和结束字符（^和$）视为在多行上工作（例如，分别匹配每一行的开始和结束（由 \\n 或 \\r 分割），而不只是只匹配整个输入字符串的最开始和最末尾处。\n` u `：Unicode; 将模式视为Unicode序列点的序列\n` y `：粘性匹配; 仅匹配目标字符串中此正则表达式的lastIndex属性指示的索引(并且不尝试从任何后续的索引匹配)。\n\n**从ECMAScript 6开始**，当第一个参数为正则表达式而第二个标志参数存在时，`new RegExp(/ab+c/, 'i')`不再抛出TypeError （“当从其他正则表达式进行构造时不支持标志”）的异常，取而代之，将使用这些参数创建一个新的正则表达式。\n\n## 写一个正则表达式\n\n一个正则表达式模式是由简单的字符所构成的，比如`/abc/`, 或者是简单和特殊字符的组合，比如 `/ab*c/` 或 `/Chapter (\\d+)\\.\\d*/`。后者用到了括号，它在正则表达式中可以被用作是一个记忆设备。这一部分正则所匹配的字符将会被记住，在后面可以被利用。正如 [使用括号的子字符串匹配](#使用括号的子字符串匹配)。\n\n### 简单模式\n\n简单模式是由你找到的直接匹配所构成的。比如，/abc/这个模式就匹配了在一个字符串中，仅仅字符 `'abc'` 同时出现并按照这个顺序。在 `\"Hi, do you know your abc's?\"` 和 `\"The latest airplane designs evolved from slabcraft.\"` 就会匹配成功。在上面的两个实例中，匹配的是子字符串 `'abc'`。在字符串 `\"Grab crab\"` 中将不会被匹配，因为它不包含任何的 'abc' 子字符串。\n\n### 特殊字符\n\n当你需要搜索一个比直接匹配需要更多条件的匹配时，比如寻找一个或多个 'b'，或者寻找空格，那么这时模式将要包含特殊字符。比如， 模式`/ab*c/`匹配了一个单独的 'a' 后面跟了零个或者多个 'b'（*的意思是前面一项出现了零个或者多个），且后面跟着 'c' 的任何字符组合。在字符串 `\"cbbabbbbcdebc\"` 中，这个模式匹配了子字符串 `\"abbbbc\"`。\n\n#### 正则表达式中的特殊字符\n\n+ [字符类别（Character Classes）](#字符类别)\n+ [字符集合（Character Sets）](#字符集合)\n+ [边界（Boundaries）](边界)\n+ [分组（grouping）与反向引用（back references）](#分组与反向引用)\n+ [数量词（Quantifiers）](#数量词)\n+ [断言（Assertions）](#断言)\n\n#### 字符类别\n\n##### `.(点号，小数点)` \n\n匹配任意单个字符，但是行结束符除外：`\\n \\r \\u2028` 或 `\\u2029`。\n\n在字符集中，点( . )失去其特殊含义，并匹配一个字面点( . )。\n\n需要注意的是，m 多行（multiline）标志不会改变点号的表现。因此为了匹配多行中的字符集，可使用[^] （当然你不是打算用在旧版本 IE 中），它将会匹配任意字符，包括换行符。\n\n例如，`/.y/` 匹配 `\"yes make my day\"` 中的 `\"my\"` 和 `\"ay\"`，但是不匹配 `\"yes\"`。\n\n##### `\\d`\n\n匹配任意阿拉伯数字。等价于[0-9]。\n\n例如，`/\\d/` 或 `/[0-9]/` 匹配 \"B2 is the suite number.\" 中的 '2'。 \n\n> + `\\d` 表示数字，即 digit，`\\w` 表示单词，等同于 `[A-Za-z0-9_]`，原文就是 word。\n\n##### `\\D`\n\n匹配任意一个不是阿拉伯数字的字符。等价于[^0-9]。\n\n例如，`/\\D/` 或 `/[^0-9]/` 匹配 \"B2 is the suite number.\" 中的 'B'。\n\n##### `\\w`\n\n匹配任意来自基本拉丁字母表中的字母数字字符，还包括下划线。等价于 `[A-Za-z0-9_]`。\n\n例如，`/\\w/` 匹配 \"apple\" 中的 'a'，\"$5.28\" 中的 '5' 和 \"3D\" 中的 '3'。\n\n##### `\\W`\n\n匹配任意不是基本拉丁字母表中单词（字母数字下划线）字符的字符。等价于 `[^A-Za-z0-9_]`。\n\n例如，`/\\W/` 或 /[^A-Za-z0-9_]/ 匹配 \"50%\" 中的 '%'。\n\n##### `\\s`\n\n匹配一个空白符，包括空格、制表符、换页符、换行符和其他 Unicode 空格。\n\n等价于 `[ \\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e\\u2000​\\u2001\\u2002​\\u2003\\u2004​ \\u2005\\u2006​\\u2007\\u2008​\\u2009\\u200a​\\u2028\\u2029​​\\u202f\\u205f​ \\u3000]`。\n\n例如 `/\\s\\w*/` 匹配 \"foo bar\" 中的 ' bar'。\n\n##### `\\S`\n\n匹配一个非空白符。等价于 `[^ \\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e\\u2000​\\u2001\\u2002​\\u2003\\u2004​ \\u2005\\u2006​\\u2007\\u2008​\\u2009\\u200a​\\u2028\\u2029​\\u202f\\u205f​\\u3000]`。\n\n例如，`/\\S\\w*/` 匹配 \"foo bar\" 中的 'foo'。\n\n##### `\\t`\n\n匹配一个水平制表符（tab）\n\n##### `\\r`\n\n匹配一个回车符（carriage return）\n\n> + 回车 `\\r` 本义是光标重新回到本行开头，r 即 return。\n\n##### `\\n`\n\n匹配一个换行符（linefeed）\n\n##### `\\v`\n\n匹配一个垂直制表符（vertical tab）\n\n##### `\\f`\n\n匹配一个换页符（form-feed）\n\n##### `[\\b]`\n\n匹配一个退格符（backspace）（不要与 \\b 混淆）\n\n##### `\\0`\n\n匹配一个 NUL 字符。不要在此后面跟小数点。\n\n\n##### `\\cX`\n\nX 是 A - Z 的一个字母。匹配字符串中的一个控制字符。\n\n例如，`/\\cM/` 匹配字符串中的 control-M。\n\n##### `\\xhh`\n\n匹配编码为 `hh` （两个十六进制数字）的字符。\n\n##### `\\uhhhh`\n\n匹配 Unicode 值为 hhhh （四个十六进制数字）的字符。\n\n##### `\\(反斜杠)`\n\n对于那些通常被认为字面意义的字符来说，表示下一个字符具有特殊用处，并且不会被按照字面意义解释。\n\n例如 `/b/` 匹配字符 'b'。在 b 前面加上一个反斜杠，即使用 `/\\b/`，则该字符变得特殊，以为这匹配一个单词边界。\n\n或\n\n对于那些通常特殊对待的字符，表示下一个字符不具有特殊用途，会被按照字面意义解释。\n\n例如，`*` 是一个特殊字符，表示匹配某个字符 0 或多次，如 `/a*/` 意味着 0 或多个 \"a\"。 为了匹配字面意义上的 `*` ，在它前面加上一个反斜杠，例如，`/a\\*/`匹配 'a*'。\n\n#### 字符集合\n\n##### `[xyz]`\n\n一个字符集合，也叫字符组。匹配集合中的任意一个字符。你可以使用连字符'`-`'指定一个范围。\n\n例如，`[abcd]` 等价于 `[a-d]`，匹配\"`brisket`\"中的'b'和\"`chop`\"中的'c'。\n\n##### `[^xyz]`\n\n一个反义或补充字符集，也叫反义字符组。也就是说，它匹配任意不在括号内的字符。你也可以通过使用连字符 '-' 指定一个范围内的字符。\n\n例如，`[^abc]` 等价于 `[^a-c]`。 第一个匹配的是 \"bacon\" 中的'o' 和 \"chop\" 中的 'h'。\n\n#### 边界\n\n##### `^`\n\n匹配输入开始。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符后的开始处。\n\n例如，`/^A/` 不匹配 \"an A\" 中的 \"A\"，但匹配 \"An A\" 中的 \"A\"。\n\n> + 换行 `\\n` 本义是光标往下一行（不一定到下一行行首），n 即 newline。\n\n##### `$`\n\n匹配输入结尾。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符的前的结尾处。\n\n例如，`/t$/` 不匹配 \"eater\" 中的 \"t\"，但匹配 \"eat\" 中的 \"t\"。\n\n##### `\\b`\n\n匹配一个零宽单词边界（zero-width word boundary），如一个字母与一个空格之间。 （不要和 `[\\b]` 混淆）\n\n例如，`/\\bno/` 匹配 \"at noon\" 中的 \"no\"，`/ly\\b/` 匹配 \"possibly yesterday.\" 中的 \"ly\"。\n\n##### `\\B`\n\n匹配一个零宽非单词边界（zero-width non-word boundary），如两个字母之间或两个空格之间。\n\n例如，`/\\Bon/` 匹配 \"at noon\" 中的 \"on\"，`/ye\\B/` 匹配 \"possibly yesterday.\" 中的 \"ye\"。\n\n#### 分组与反向引用\n\n##### `(x)`\n\n匹配 `x` 并且捕获匹配项。 这被称为捕获括号（capturing parentheses）。\n\n例如，`/(foo)/` 匹配且捕获 \"foo bar.\" 中的 \"foo\"。被匹配的子字符串可以在结果数组的元素 `[1], ..., [n]` 中找到，或在被定义的 RegExp 对象的属性 $1, ..., $9 中找到。\n\n捕获组（Capturing groups）有性能惩罚。如果不需再次访问被匹配的子字符串，最好使用非捕获括号（non-capturing parentheses），见下面。\n\n##### `(?:x)`\n\n匹配 `x` 不会捕获匹配项。这被称为非捕获括号（non-capturing parentheses）。匹配项不能够从结果数组的元素 `[1], ..., [n]` 或已被定义的 `RegExp` 对象的属性 `$1, ..., $9` 再次访问到。\n\n##### `\\n`\n\n`n` 是一个正整数。一个反向引用（back reference），指向正则表达式中第 n 个括号（从左开始数）中匹配的子字符串。\n\n例如，`/apple(,)\\sorange\\1/` 匹配 \"apple, orange, cherry, peach.\" 中的 \"apple,orange,\"。一个更全面的例子在下面。\n\n#### 数量词\n\n##### `x*`\n\n匹配前面的模式 x 0 或多次。\n\n例如，`/bo*/` 匹配 \"A ghost booooed\" 中的 \"boooo\"，\"A bird warbled\" 中的 \"b\"，但是不匹配 \"A goat grunted\"。\n\n##### `x+`\n\n匹配前面的模式 x 1 或多次。等价于 `{1,}`。\n\n例如，`/a+/` 匹配 \"candy\" 中的 \"a\"，\"caaaaaaandy\" 中所有的 \"a\"。\n\n##### `x*?` `x+?`\n\n像上面的 * 和 + 一样匹配前面的模式 x，然而匹配是最小可能匹配。\n\n例如，`/\".*?\"/` 匹配 '\"foo\" \"bar\"' 中的 '\"foo\"'，而 * 后面没有 ? 时匹配 '\"foo\" \"bar\"'。\n\n##### `x?`\n\n匹配前面的模式 x 0 或 1 次。\n\n例如，`/e?le?/` 匹配 \"angel\" 中的 \"el\"，\"angle\" 中的 \"le\"。\n\n如果在数量词 `*`、`+`、`?` 或 `{}`, 任意一个后面紧跟该符号（?），会使数量词变为非贪婪（ non-greedy） ，即匹配次数最小化。反之，默认情况下，是贪婪的（greedy），即匹配次数最大化。\n\n在使用于向前断言（lookahead assertions）时，见该表格中 `(?=)、``(?!)` 和 `(?:)` 的说明。\n\n##### `x(?=y)`\n\n只有当 `x` 后面不是紧跟着 `y` 时，才匹配 `x`。例如，`/\\d+(?!\\.)/` 只有当一个数字后面没有紧跟着一个小数点时，才会匹配该数字。\n\n`/\\d+(?!\\.)/.exec(\"3.141\")` 匹配 141 而不是 3.141。\n\n##### `x|y`\n\n匹配 `x` 或 `y`\n\n例如，`/green|red/` 匹配 \"green apple\" 中的 ‘green'，\"red apple.\" 中的 'red'。\n\n##### `x{n}`\n\n`n` 是一个正整数。前面的模式 `x` 连续出现 `n` 次时匹配。\n\n例如，`/a{2}/` 不匹配 \"candy,\" 中的 \"a\"，但是匹配 \"caandy,\" 中的两个 \"a\"，且匹配 \"caaandy.\" 中的前两个 \"a\"。\n\n##### `x{n,}`\n\n`n` 是一个正整数。前面的模式 x 连续出现至少 n 次时匹配。\n\n例如，`/a{2,}/` 不匹配 \"candy\" 中的 \"a\"，但是匹配 \"caandy\" 和 \"caaaaaaandy.\" 中所有的 \"a\"。\n\n##### `x{n,m}`\n\n`n` 和 `m` 为正整数。前面的模式 x 连续出现至少 n 次，至多 m 次时匹配。\n\n例如，`/a{1,3}/` 不匹配 \"cndy\"，匹配 \"candy,\" 中的 \"a\"，\"caandy,\" 中的两个 \"a\"，匹配 \"caaaaaaandy\" 中的前面三个 \"a\"。注意，当匹配 \"caaaaaaandy\" 时，即使原始字符串拥有更多的 \"a\"，匹配项也是 \"aaa\"。\n\n#### 断言\n\n##### `x(?=y)`\n\n仅匹配被y跟随的x。\n\n举个例子，`/Jack(?=Sprat)/`，如果\"Jack\"后面跟着sprat，则匹配之。\n\n`/Jack(?=Sprat|Frost)/` ，如果\"Jack\"后面跟着\"Sprat\"或者\"Frost\"，则匹配之。但是，\"Sprat\" 和\"Frost\" 都不会在匹配结果中出现。\n\n##### `x(?!y)`\n\n仅匹配不被y跟随的x。\n\n举个例子，`/\\d+(?!\\.)/` 只会匹配不被点（.）跟随的数字。\n`/\\d+(?!\\.)/.exec('3.141')` 匹配\"141\"，而不是\"3.141\"","source":"_posts/了解一下JS的正则表达式.md","raw":"---\ntitle: 了解一下JS的正则表达式\ndate: 2017-09-22 15:09:42\ntags:\n    - Javascript\n    - 正则表达式\n---\n\n## 定义 Define\n\n正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象。这些模式或者说对象被用于 RegExp 的 exec 和 test 方法, 以及 String 的 match、replace、search 和 split 方法。\n\nRegExp 是一个用于创建正则表达式对象的构造函数，用于将文本与一个模式匹配。\n\n## 创建一个正则表达式\n\n有两种方法创建一个正则表达式。\n\n<!-- more -->\n\n### 1. 字面量方式\n\n由包含在斜杠之间的模式组成，如下所示:\n\n```JavaScript\n/*\n   /pattern/flags \n*/\nvar regex = /pattern/;\nvar regex = /ab+c/;\nvar regex = /^[a-zA-Z]+[0-9]*\\W?_$/gi;\n\n```\n\n在加载脚本后，正则表达式字面值提供正则表达式的编译。当正则表达式保持不变时，使用此方法可获得更好的性能。\n\n### 2. RegExp实例创建\n\n```JavaScript\n/* \n    new RegExp(pattern [, flags])\n*/\n\nlet regex = new RegExp(\"ab+c\");\nlet regex = new RegExp(/ab+c/); // 与上面等价\nlet regex = new RegExp(/^[a-zA-Z]+[0-9]*\\W?_$/, \"gi\");\nlet regex = new RegExp(\"^[a-zA-Z]+[0-9]*\\W?_$\", \"gi\");\n\n```\n\n> * 字面量方式和实例创建的方式在正则中的区别? \n1、字面量形式提供正则表达式的编译（compilation）状态，当正则表达式保持为常量时使用字面量。而构造函数方式，如` new RegExp('ab+c') `提供了正则表达式运行时编译（runtime compilation）。\n2、字面量方式中出现的一切都是元字符,所以不能进行变量值的拼接，而实例创建的方式是可以的。实例创建方式的好处在于可以在运行时编译，这个特性可以方便用来处理用户输入。\n3、字面量中直接写\\d就可以，而在实例中有两种情况，如果直接使用/pattern/这种方式创建与字面量方式书写无区别，即\\d，如果是带双引号，双引号内的需要把它转译\\\\\\\\d\n\n比如：\n\n```JavaScript\nvar name = 'Jack';\nvar reg = /^\\d+name+\\d+$/; //这样写是无效的 必须得用实例创建\nvar reg = new RexExp(\"^\\\\d\" + name + \"\\\\d+$\",\"g\");\n\n```\n\n#### RegExp对象的参数\n\n` pattern `:正则表达式的文本。\n\n` flags `:可以具有以下值的任意组合：\n\n> ` g `：全局匹配;找到所有匹配，而不是在第一个匹配后停止\n` i `：忽略大小写\n` m `：多行; 将开始和结束字符（^和$）视为在多行上工作（例如，分别匹配每一行的开始和结束（由 \\n 或 \\r 分割），而不只是只匹配整个输入字符串的最开始和最末尾处。\n` u `：Unicode; 将模式视为Unicode序列点的序列\n` y `：粘性匹配; 仅匹配目标字符串中此正则表达式的lastIndex属性指示的索引(并且不尝试从任何后续的索引匹配)。\n\n**从ECMAScript 6开始**，当第一个参数为正则表达式而第二个标志参数存在时，`new RegExp(/ab+c/, 'i')`不再抛出TypeError （“当从其他正则表达式进行构造时不支持标志”）的异常，取而代之，将使用这些参数创建一个新的正则表达式。\n\n## 写一个正则表达式\n\n一个正则表达式模式是由简单的字符所构成的，比如`/abc/`, 或者是简单和特殊字符的组合，比如 `/ab*c/` 或 `/Chapter (\\d+)\\.\\d*/`。后者用到了括号，它在正则表达式中可以被用作是一个记忆设备。这一部分正则所匹配的字符将会被记住，在后面可以被利用。正如 [使用括号的子字符串匹配](#使用括号的子字符串匹配)。\n\n### 简单模式\n\n简单模式是由你找到的直接匹配所构成的。比如，/abc/这个模式就匹配了在一个字符串中，仅仅字符 `'abc'` 同时出现并按照这个顺序。在 `\"Hi, do you know your abc's?\"` 和 `\"The latest airplane designs evolved from slabcraft.\"` 就会匹配成功。在上面的两个实例中，匹配的是子字符串 `'abc'`。在字符串 `\"Grab crab\"` 中将不会被匹配，因为它不包含任何的 'abc' 子字符串。\n\n### 特殊字符\n\n当你需要搜索一个比直接匹配需要更多条件的匹配时，比如寻找一个或多个 'b'，或者寻找空格，那么这时模式将要包含特殊字符。比如， 模式`/ab*c/`匹配了一个单独的 'a' 后面跟了零个或者多个 'b'（*的意思是前面一项出现了零个或者多个），且后面跟着 'c' 的任何字符组合。在字符串 `\"cbbabbbbcdebc\"` 中，这个模式匹配了子字符串 `\"abbbbc\"`。\n\n#### 正则表达式中的特殊字符\n\n+ [字符类别（Character Classes）](#字符类别)\n+ [字符集合（Character Sets）](#字符集合)\n+ [边界（Boundaries）](边界)\n+ [分组（grouping）与反向引用（back references）](#分组与反向引用)\n+ [数量词（Quantifiers）](#数量词)\n+ [断言（Assertions）](#断言)\n\n#### 字符类别\n\n##### `.(点号，小数点)` \n\n匹配任意单个字符，但是行结束符除外：`\\n \\r \\u2028` 或 `\\u2029`。\n\n在字符集中，点( . )失去其特殊含义，并匹配一个字面点( . )。\n\n需要注意的是，m 多行（multiline）标志不会改变点号的表现。因此为了匹配多行中的字符集，可使用[^] （当然你不是打算用在旧版本 IE 中），它将会匹配任意字符，包括换行符。\n\n例如，`/.y/` 匹配 `\"yes make my day\"` 中的 `\"my\"` 和 `\"ay\"`，但是不匹配 `\"yes\"`。\n\n##### `\\d`\n\n匹配任意阿拉伯数字。等价于[0-9]。\n\n例如，`/\\d/` 或 `/[0-9]/` 匹配 \"B2 is the suite number.\" 中的 '2'。 \n\n> + `\\d` 表示数字，即 digit，`\\w` 表示单词，等同于 `[A-Za-z0-9_]`，原文就是 word。\n\n##### `\\D`\n\n匹配任意一个不是阿拉伯数字的字符。等价于[^0-9]。\n\n例如，`/\\D/` 或 `/[^0-9]/` 匹配 \"B2 is the suite number.\" 中的 'B'。\n\n##### `\\w`\n\n匹配任意来自基本拉丁字母表中的字母数字字符，还包括下划线。等价于 `[A-Za-z0-9_]`。\n\n例如，`/\\w/` 匹配 \"apple\" 中的 'a'，\"$5.28\" 中的 '5' 和 \"3D\" 中的 '3'。\n\n##### `\\W`\n\n匹配任意不是基本拉丁字母表中单词（字母数字下划线）字符的字符。等价于 `[^A-Za-z0-9_]`。\n\n例如，`/\\W/` 或 /[^A-Za-z0-9_]/ 匹配 \"50%\" 中的 '%'。\n\n##### `\\s`\n\n匹配一个空白符，包括空格、制表符、换页符、换行符和其他 Unicode 空格。\n\n等价于 `[ \\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e\\u2000​\\u2001\\u2002​\\u2003\\u2004​ \\u2005\\u2006​\\u2007\\u2008​\\u2009\\u200a​\\u2028\\u2029​​\\u202f\\u205f​ \\u3000]`。\n\n例如 `/\\s\\w*/` 匹配 \"foo bar\" 中的 ' bar'。\n\n##### `\\S`\n\n匹配一个非空白符。等价于 `[^ \\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e\\u2000​\\u2001\\u2002​\\u2003\\u2004​ \\u2005\\u2006​\\u2007\\u2008​\\u2009\\u200a​\\u2028\\u2029​\\u202f\\u205f​\\u3000]`。\n\n例如，`/\\S\\w*/` 匹配 \"foo bar\" 中的 'foo'。\n\n##### `\\t`\n\n匹配一个水平制表符（tab）\n\n##### `\\r`\n\n匹配一个回车符（carriage return）\n\n> + 回车 `\\r` 本义是光标重新回到本行开头，r 即 return。\n\n##### `\\n`\n\n匹配一个换行符（linefeed）\n\n##### `\\v`\n\n匹配一个垂直制表符（vertical tab）\n\n##### `\\f`\n\n匹配一个换页符（form-feed）\n\n##### `[\\b]`\n\n匹配一个退格符（backspace）（不要与 \\b 混淆）\n\n##### `\\0`\n\n匹配一个 NUL 字符。不要在此后面跟小数点。\n\n\n##### `\\cX`\n\nX 是 A - Z 的一个字母。匹配字符串中的一个控制字符。\n\n例如，`/\\cM/` 匹配字符串中的 control-M。\n\n##### `\\xhh`\n\n匹配编码为 `hh` （两个十六进制数字）的字符。\n\n##### `\\uhhhh`\n\n匹配 Unicode 值为 hhhh （四个十六进制数字）的字符。\n\n##### `\\(反斜杠)`\n\n对于那些通常被认为字面意义的字符来说，表示下一个字符具有特殊用处，并且不会被按照字面意义解释。\n\n例如 `/b/` 匹配字符 'b'。在 b 前面加上一个反斜杠，即使用 `/\\b/`，则该字符变得特殊，以为这匹配一个单词边界。\n\n或\n\n对于那些通常特殊对待的字符，表示下一个字符不具有特殊用途，会被按照字面意义解释。\n\n例如，`*` 是一个特殊字符，表示匹配某个字符 0 或多次，如 `/a*/` 意味着 0 或多个 \"a\"。 为了匹配字面意义上的 `*` ，在它前面加上一个反斜杠，例如，`/a\\*/`匹配 'a*'。\n\n#### 字符集合\n\n##### `[xyz]`\n\n一个字符集合，也叫字符组。匹配集合中的任意一个字符。你可以使用连字符'`-`'指定一个范围。\n\n例如，`[abcd]` 等价于 `[a-d]`，匹配\"`brisket`\"中的'b'和\"`chop`\"中的'c'。\n\n##### `[^xyz]`\n\n一个反义或补充字符集，也叫反义字符组。也就是说，它匹配任意不在括号内的字符。你也可以通过使用连字符 '-' 指定一个范围内的字符。\n\n例如，`[^abc]` 等价于 `[^a-c]`。 第一个匹配的是 \"bacon\" 中的'o' 和 \"chop\" 中的 'h'。\n\n#### 边界\n\n##### `^`\n\n匹配输入开始。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符后的开始处。\n\n例如，`/^A/` 不匹配 \"an A\" 中的 \"A\"，但匹配 \"An A\" 中的 \"A\"。\n\n> + 换行 `\\n` 本义是光标往下一行（不一定到下一行行首），n 即 newline。\n\n##### `$`\n\n匹配输入结尾。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符的前的结尾处。\n\n例如，`/t$/` 不匹配 \"eater\" 中的 \"t\"，但匹配 \"eat\" 中的 \"t\"。\n\n##### `\\b`\n\n匹配一个零宽单词边界（zero-width word boundary），如一个字母与一个空格之间。 （不要和 `[\\b]` 混淆）\n\n例如，`/\\bno/` 匹配 \"at noon\" 中的 \"no\"，`/ly\\b/` 匹配 \"possibly yesterday.\" 中的 \"ly\"。\n\n##### `\\B`\n\n匹配一个零宽非单词边界（zero-width non-word boundary），如两个字母之间或两个空格之间。\n\n例如，`/\\Bon/` 匹配 \"at noon\" 中的 \"on\"，`/ye\\B/` 匹配 \"possibly yesterday.\" 中的 \"ye\"。\n\n#### 分组与反向引用\n\n##### `(x)`\n\n匹配 `x` 并且捕获匹配项。 这被称为捕获括号（capturing parentheses）。\n\n例如，`/(foo)/` 匹配且捕获 \"foo bar.\" 中的 \"foo\"。被匹配的子字符串可以在结果数组的元素 `[1], ..., [n]` 中找到，或在被定义的 RegExp 对象的属性 $1, ..., $9 中找到。\n\n捕获组（Capturing groups）有性能惩罚。如果不需再次访问被匹配的子字符串，最好使用非捕获括号（non-capturing parentheses），见下面。\n\n##### `(?:x)`\n\n匹配 `x` 不会捕获匹配项。这被称为非捕获括号（non-capturing parentheses）。匹配项不能够从结果数组的元素 `[1], ..., [n]` 或已被定义的 `RegExp` 对象的属性 `$1, ..., $9` 再次访问到。\n\n##### `\\n`\n\n`n` 是一个正整数。一个反向引用（back reference），指向正则表达式中第 n 个括号（从左开始数）中匹配的子字符串。\n\n例如，`/apple(,)\\sorange\\1/` 匹配 \"apple, orange, cherry, peach.\" 中的 \"apple,orange,\"。一个更全面的例子在下面。\n\n#### 数量词\n\n##### `x*`\n\n匹配前面的模式 x 0 或多次。\n\n例如，`/bo*/` 匹配 \"A ghost booooed\" 中的 \"boooo\"，\"A bird warbled\" 中的 \"b\"，但是不匹配 \"A goat grunted\"。\n\n##### `x+`\n\n匹配前面的模式 x 1 或多次。等价于 `{1,}`。\n\n例如，`/a+/` 匹配 \"candy\" 中的 \"a\"，\"caaaaaaandy\" 中所有的 \"a\"。\n\n##### `x*?` `x+?`\n\n像上面的 * 和 + 一样匹配前面的模式 x，然而匹配是最小可能匹配。\n\n例如，`/\".*?\"/` 匹配 '\"foo\" \"bar\"' 中的 '\"foo\"'，而 * 后面没有 ? 时匹配 '\"foo\" \"bar\"'。\n\n##### `x?`\n\n匹配前面的模式 x 0 或 1 次。\n\n例如，`/e?le?/` 匹配 \"angel\" 中的 \"el\"，\"angle\" 中的 \"le\"。\n\n如果在数量词 `*`、`+`、`?` 或 `{}`, 任意一个后面紧跟该符号（?），会使数量词变为非贪婪（ non-greedy） ，即匹配次数最小化。反之，默认情况下，是贪婪的（greedy），即匹配次数最大化。\n\n在使用于向前断言（lookahead assertions）时，见该表格中 `(?=)、``(?!)` 和 `(?:)` 的说明。\n\n##### `x(?=y)`\n\n只有当 `x` 后面不是紧跟着 `y` 时，才匹配 `x`。例如，`/\\d+(?!\\.)/` 只有当一个数字后面没有紧跟着一个小数点时，才会匹配该数字。\n\n`/\\d+(?!\\.)/.exec(\"3.141\")` 匹配 141 而不是 3.141。\n\n##### `x|y`\n\n匹配 `x` 或 `y`\n\n例如，`/green|red/` 匹配 \"green apple\" 中的 ‘green'，\"red apple.\" 中的 'red'。\n\n##### `x{n}`\n\n`n` 是一个正整数。前面的模式 `x` 连续出现 `n` 次时匹配。\n\n例如，`/a{2}/` 不匹配 \"candy,\" 中的 \"a\"，但是匹配 \"caandy,\" 中的两个 \"a\"，且匹配 \"caaandy.\" 中的前两个 \"a\"。\n\n##### `x{n,}`\n\n`n` 是一个正整数。前面的模式 x 连续出现至少 n 次时匹配。\n\n例如，`/a{2,}/` 不匹配 \"candy\" 中的 \"a\"，但是匹配 \"caandy\" 和 \"caaaaaaandy.\" 中所有的 \"a\"。\n\n##### `x{n,m}`\n\n`n` 和 `m` 为正整数。前面的模式 x 连续出现至少 n 次，至多 m 次时匹配。\n\n例如，`/a{1,3}/` 不匹配 \"cndy\"，匹配 \"candy,\" 中的 \"a\"，\"caandy,\" 中的两个 \"a\"，匹配 \"caaaaaaandy\" 中的前面三个 \"a\"。注意，当匹配 \"caaaaaaandy\" 时，即使原始字符串拥有更多的 \"a\"，匹配项也是 \"aaa\"。\n\n#### 断言\n\n##### `x(?=y)`\n\n仅匹配被y跟随的x。\n\n举个例子，`/Jack(?=Sprat)/`，如果\"Jack\"后面跟着sprat，则匹配之。\n\n`/Jack(?=Sprat|Frost)/` ，如果\"Jack\"后面跟着\"Sprat\"或者\"Frost\"，则匹配之。但是，\"Sprat\" 和\"Frost\" 都不会在匹配结果中出现。\n\n##### `x(?!y)`\n\n仅匹配不被y跟随的x。\n\n举个例子，`/\\d+(?!\\.)/` 只会匹配不被点（.）跟随的数字。\n`/\\d+(?!\\.)/.exec('3.141')` 匹配\"141\"，而不是\"3.141\"","slug":"了解一下JS的正则表达式","published":1,"updated":"2023-05-31T16:56:15.289Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clibygb3t0007f4fmjb3n5q1m","content":"<h2 id=\"定义-Define\"><a href=\"#定义-Define\" class=\"headerlink\" title=\"定义 Define\"></a>定义 Define</h2><p>正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象。这些模式或者说对象被用于 RegExp 的 exec 和 test 方法, 以及 String 的 match、replace、search 和 split 方法。</p>\n<p>RegExp 是一个用于创建正则表达式对象的构造函数，用于将文本与一个模式匹配。</p>\n<h2 id=\"创建一个正则表达式\"><a href=\"#创建一个正则表达式\" class=\"headerlink\" title=\"创建一个正则表达式\"></a>创建一个正则表达式</h2><p>有两种方法创建一个正则表达式。</p>\n<a id=\"more\"></a>\n<h3 id=\"1-字面量方式\"><a href=\"#1-字面量方式\" class=\"headerlink\" title=\"1. 字面量方式\"></a>1. 字面量方式</h3><p>由包含在斜杠之间的模式组成，如下所示:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   /pattern/flags </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/pattern/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/ab+c/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/^[a-zA-Z]+[0-9]*\\W?_$/gi</span>;</span><br></pre></td></tr></table></figure>\n<p>在加载脚本后，正则表达式字面值提供正则表达式的编译。当正则表达式保持不变时，使用此方法可获得更好的性能。</p>\n<h3 id=\"2-RegExp实例创建\"><a href=\"#2-RegExp实例创建\" class=\"headerlink\" title=\"2. RegExp实例创建\"></a>2. RegExp实例创建</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">    new RegExp(pattern [, flags])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"ab+c\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/ab+c/</span>); <span class=\"comment\">// 与上面等价</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^[a-zA-Z]+[0-9]*\\W?_$/</span>, <span class=\"string\">\"gi\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"^[a-zA-Z]+[0-9]*\\W?_$\"</span>, <span class=\"string\">\"gi\"</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>字面量方式和实例创建的方式在正则中的区别?<br>1、字面量形式提供正则表达式的编译（compilation）状态，当正则表达式保持为常量时使用字面量。而构造函数方式，如<code>new RegExp(&#39;ab+c&#39;)</code>提供了正则表达式运行时编译（runtime compilation）。<br>2、字面量方式中出现的一切都是元字符,所以不能进行变量值的拼接，而实例创建的方式是可以的。实例创建方式的好处在于可以在运行时编译，这个特性可以方便用来处理用户输入。<br>3、字面量中直接写\\d就可以，而在实例中有两种情况，如果直接使用/pattern/这种方式创建与字面量方式书写无区别，即\\d，如果是带双引号，双引号内的需要把它转译\\\\d</li>\n</ul>\n</blockquote>\n<p>比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Jack'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^\\d+name+\\d+$/</span>; <span class=\"comment\">//这样写是无效的 必须得用实例创建</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> RexExp(<span class=\"string\">\"^\\\\d\"</span> + name + <span class=\"string\">\"\\\\d+$\"</span>,<span class=\"string\">\"g\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"RegExp对象的参数\"><a href=\"#RegExp对象的参数\" class=\"headerlink\" title=\"RegExp对象的参数\"></a>RegExp对象的参数</h4><p><code>pattern</code>:正则表达式的文本。</p>\n<p><code>flags</code>:可以具有以下值的任意组合：</p>\n<blockquote>\n<p><code>g</code>：全局匹配;找到所有匹配，而不是在第一个匹配后停止<br><code>i</code>：忽略大小写<br><code>m</code>：多行; 将开始和结束字符（^和$）视为在多行上工作（例如，分别匹配每一行的开始和结束（由 \\n 或 \\r 分割），而不只是只匹配整个输入字符串的最开始和最末尾处。<br><code>u</code>：Unicode; 将模式视为Unicode序列点的序列<br><code>y</code>：粘性匹配; 仅匹配目标字符串中此正则表达式的lastIndex属性指示的索引(并且不尝试从任何后续的索引匹配)。</p>\n</blockquote>\n<p><strong>从ECMAScript 6开始</strong>，当第一个参数为正则表达式而第二个标志参数存在时，<code>new RegExp(/ab+c/, &#39;i&#39;)</code>不再抛出TypeError （“当从其他正则表达式进行构造时不支持标志”）的异常，取而代之，将使用这些参数创建一个新的正则表达式。</p>\n<h2 id=\"写一个正则表达式\"><a href=\"#写一个正则表达式\" class=\"headerlink\" title=\"写一个正则表达式\"></a>写一个正则表达式</h2><p>一个正则表达式模式是由简单的字符所构成的，比如<code>/abc/</code>, 或者是简单和特殊字符的组合，比如 <code>/ab*c/</code> 或 <code>/Chapter (\\d+)\\.\\d*/</code>。后者用到了括号，它在正则表达式中可以被用作是一个记忆设备。这一部分正则所匹配的字符将会被记住，在后面可以被利用。正如 <a href=\"#使用括号的子字符串匹配\">使用括号的子字符串匹配</a>。</p>\n<h3 id=\"简单模式\"><a href=\"#简单模式\" class=\"headerlink\" title=\"简单模式\"></a>简单模式</h3><p>简单模式是由你找到的直接匹配所构成的。比如，/abc/这个模式就匹配了在一个字符串中，仅仅字符 <code>&#39;abc&#39;</code> 同时出现并按照这个顺序。在 <code>&quot;Hi, do you know your abc&#39;s?&quot;</code> 和 <code>&quot;The latest airplane designs evolved from slabcraft.&quot;</code> 就会匹配成功。在上面的两个实例中，匹配的是子字符串 <code>&#39;abc&#39;</code>。在字符串 <code>&quot;Grab crab&quot;</code> 中将不会被匹配，因为它不包含任何的 ‘abc’ 子字符串。</p>\n<h3 id=\"特殊字符\"><a href=\"#特殊字符\" class=\"headerlink\" title=\"特殊字符\"></a>特殊字符</h3><p>当你需要搜索一个比直接匹配需要更多条件的匹配时，比如寻找一个或多个 ‘b’，或者寻找空格，那么这时模式将要包含特殊字符。比如， 模式<code>/ab*c/</code>匹配了一个单独的 ‘a’ 后面跟了零个或者多个 ‘b’（*的意思是前面一项出现了零个或者多个），且后面跟着 ‘c’ 的任何字符组合。在字符串 <code>&quot;cbbabbbbcdebc&quot;</code> 中，这个模式匹配了子字符串 <code>&quot;abbbbc&quot;</code>。</p>\n<h4 id=\"正则表达式中的特殊字符\"><a href=\"#正则表达式中的特殊字符\" class=\"headerlink\" title=\"正则表达式中的特殊字符\"></a>正则表达式中的特殊字符</h4><ul>\n<li><a href=\"#字符类别\">字符类别（Character Classes）</a></li>\n<li><a href=\"#字符集合\">字符集合（Character Sets）</a></li>\n<li><a href=\"边界\">边界（Boundaries）</a></li>\n<li><a href=\"#分组与反向引用\">分组（grouping）与反向引用（back references）</a></li>\n<li><a href=\"#数量词\">数量词（Quantifiers）</a></li>\n<li><a href=\"#断言\">断言（Assertions）</a></li>\n</ul>\n<h4 id=\"字符类别\"><a href=\"#字符类别\" class=\"headerlink\" title=\"字符类别\"></a>字符类别</h4><h5 id=\"点号，小数点\"><a href=\"#点号，小数点\" class=\"headerlink\" title=\".(点号，小数点)\"></a><code>.(点号，小数点)</code></h5><p>匹配任意单个字符，但是行结束符除外：<code>\\n \\r \\u2028</code> 或 <code>\\u2029</code>。</p>\n<p>在字符集中，点( . )失去其特殊含义，并匹配一个字面点( . )。</p>\n<p>需要注意的是，m 多行（multiline）标志不会改变点号的表现。因此为了匹配多行中的字符集，可使用[^] （当然你不是打算用在旧版本 IE 中），它将会匹配任意字符，包括换行符。</p>\n<p>例如，<code>/.y/</code> 匹配 <code>&quot;yes make my day&quot;</code> 中的 <code>&quot;my&quot;</code> 和 <code>&quot;ay&quot;</code>，但是不匹配 <code>&quot;yes&quot;</code>。</p>\n<h5 id=\"d\"><a href=\"#d\" class=\"headerlink\" title=\"\\d\"></a><code>\\d</code></h5><p>匹配任意阿拉伯数字。等价于[0-9]。</p>\n<p>例如，<code>/\\d/</code> 或 <code>/[0-9]/</code> 匹配 “B2 is the suite number.” 中的 ‘2’。 </p>\n<blockquote>\n<ul>\n<li><code>\\d</code> 表示数字，即 digit，<code>\\w</code> 表示单词，等同于 <code>[A-Za-z0-9_]</code>，原文就是 word。</li>\n</ul>\n</blockquote>\n<h5 id=\"D\"><a href=\"#D\" class=\"headerlink\" title=\"\\D\"></a><code>\\D</code></h5><p>匹配任意一个不是阿拉伯数字的字符。等价于[^0-9]。</p>\n<p>例如，<code>/\\D/</code> 或 <code>/[^0-9]/</code> 匹配 “B2 is the suite number.” 中的 ‘B’。</p>\n<h5 id=\"w\"><a href=\"#w\" class=\"headerlink\" title=\"\\w\"></a><code>\\w</code></h5><p>匹配任意来自基本拉丁字母表中的字母数字字符，还包括下划线。等价于 <code>[A-Za-z0-9_]</code>。</p>\n<p>例如，<code>/\\w/</code> 匹配 “apple” 中的 ‘a’，”$5.28” 中的 ‘5’ 和 “3D” 中的 ‘3’。</p>\n<h5 id=\"W\"><a href=\"#W\" class=\"headerlink\" title=\"\\W\"></a><code>\\W</code></h5><p>匹配任意不是基本拉丁字母表中单词（字母数字下划线）字符的字符。等价于 <code>[^A-Za-z0-9_]</code>。</p>\n<p>例如，<code>/\\W/</code> 或 /[^A-Za-z0-9_]/ 匹配 “50%” 中的 ‘%’。</p>\n<h5 id=\"s\"><a href=\"#s\" class=\"headerlink\" title=\"\\s\"></a><code>\\s</code></h5><p>匹配一个空白符，包括空格、制表符、换页符、换行符和其他 Unicode 空格。</p>\n<p>等价于 <code>[ \\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e\\u2000​\\u2001\\u2002​\\u2003\\u2004​ \\u2005\\u2006​\\u2007\\u2008​\\u2009\\u200a​\\u2028\\u2029​​\\u202f\\u205f​ \\u3000]</code>。</p>\n<p>例如 <code>/\\s\\w*/</code> 匹配 “foo bar” 中的 ‘ bar’。</p>\n<h5 id=\"S\"><a href=\"#S\" class=\"headerlink\" title=\"\\S\"></a><code>\\S</code></h5><p>匹配一个非空白符。等价于 <code>[^ \\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e\\u2000​\\u2001\\u2002​\\u2003\\u2004​ \\u2005\\u2006​\\u2007\\u2008​\\u2009\\u200a​\\u2028\\u2029​\\u202f\\u205f​\\u3000]</code>。</p>\n<p>例如，<code>/\\S\\w*/</code> 匹配 “foo bar” 中的 ‘foo’。</p>\n<h5 id=\"t\"><a href=\"#t\" class=\"headerlink\" title=\"\\t\"></a><code>\\t</code></h5><p>匹配一个水平制表符（tab）</p>\n<h5 id=\"r\"><a href=\"#r\" class=\"headerlink\" title=\"\\r\"></a><code>\\r</code></h5><p>匹配一个回车符（carriage return）</p>\n<blockquote>\n<ul>\n<li>回车 <code>\\r</code> 本义是光标重新回到本行开头，r 即 return。</li>\n</ul>\n</blockquote>\n<h5 id=\"n\"><a href=\"#n\" class=\"headerlink\" title=\"\\n\"></a><code>\\n</code></h5><p>匹配一个换行符（linefeed）</p>\n<h5 id=\"v\"><a href=\"#v\" class=\"headerlink\" title=\"\\v\"></a><code>\\v</code></h5><p>匹配一个垂直制表符（vertical tab）</p>\n<h5 id=\"f\"><a href=\"#f\" class=\"headerlink\" title=\"\\f\"></a><code>\\f</code></h5><p>匹配一个换页符（form-feed）</p>\n<h5 id=\"b\"><a href=\"#b\" class=\"headerlink\" title=\"[\\b]\"></a><code>[\\b]</code></h5><p>匹配一个退格符（backspace）（不要与 \\b 混淆）</p>\n<h5 id=\"0\"><a href=\"#0\" class=\"headerlink\" title=\"\\0\"></a><code>\\0</code></h5><p>匹配一个 NUL 字符。不要在此后面跟小数点。</p>\n<h5 id=\"cX\"><a href=\"#cX\" class=\"headerlink\" title=\"\\cX\"></a><code>\\cX</code></h5><p>X 是 A - Z 的一个字母。匹配字符串中的一个控制字符。</p>\n<p>例如，<code>/\\cM/</code> 匹配字符串中的 control-M。</p>\n<h5 id=\"xhh\"><a href=\"#xhh\" class=\"headerlink\" title=\"\\xhh\"></a><code>\\xhh</code></h5><p>匹配编码为 <code>hh</code> （两个十六进制数字）的字符。</p>\n<h5 id=\"uhhhh\"><a href=\"#uhhhh\" class=\"headerlink\" title=\"\\uhhhh\"></a><code>\\uhhhh</code></h5><p>匹配 Unicode 值为 hhhh （四个十六进制数字）的字符。</p>\n<h5 id=\"反斜杠\"><a href=\"#反斜杠\" class=\"headerlink\" title=\"\\(反斜杠)\"></a><code>\\(反斜杠)</code></h5><p>对于那些通常被认为字面意义的字符来说，表示下一个字符具有特殊用处，并且不会被按照字面意义解释。</p>\n<p>例如 <code>/b/</code> 匹配字符 ‘b’。在 b 前面加上一个反斜杠，即使用 <code>/\\b/</code>，则该字符变得特殊，以为这匹配一个单词边界。</p>\n<p>或</p>\n<p>对于那些通常特殊对待的字符，表示下一个字符不具有特殊用途，会被按照字面意义解释。</p>\n<p>例如，<code>*</code> 是一个特殊字符，表示匹配某个字符 0 或多次，如 <code>/a*/</code> 意味着 0 或多个 “a”。 为了匹配字面意义上的 <code>*</code> ，在它前面加上一个反斜杠，例如，<code>/a\\*/</code>匹配 ‘a*’。</p>\n<h4 id=\"字符集合\"><a href=\"#字符集合\" class=\"headerlink\" title=\"字符集合\"></a>字符集合</h4><h5 id=\"xyz\"><a href=\"#xyz\" class=\"headerlink\" title=\"[xyz]\"></a><code>[xyz]</code></h5><p>一个字符集合，也叫字符组。匹配集合中的任意一个字符。你可以使用连字符’<code>-</code>‘指定一个范围。</p>\n<p>例如，<code>[abcd]</code> 等价于 <code>[a-d]</code>，匹配”<code>brisket</code>“中的’b’和”<code>chop</code>“中的’c’。</p>\n<h5 id=\"xyz-1\"><a href=\"#xyz-1\" class=\"headerlink\" title=\"[^xyz]\"></a><code>[^xyz]</code></h5><p>一个反义或补充字符集，也叫反义字符组。也就是说，它匹配任意不在括号内的字符。你也可以通过使用连字符 ‘-‘ 指定一个范围内的字符。</p>\n<p>例如，<code>[^abc]</code> 等价于 <code>[^a-c]</code>。 第一个匹配的是 “bacon” 中的’o’ 和 “chop” 中的 ‘h’。</p>\n<h4 id=\"边界\"><a href=\"#边界\" class=\"headerlink\" title=\"边界\"></a>边界</h4><h5 id><a href=\"#\" class=\"headerlink\" title=\"^\"></a><code>^</code></h5><p>匹配输入开始。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符后的开始处。</p>\n<p>例如，<code>/^A/</code> 不匹配 “an A” 中的 “A”，但匹配 “An A” 中的 “A”。</p>\n<blockquote>\n<ul>\n<li>换行 <code>\\n</code> 本义是光标往下一行（不一定到下一行行首），n 即 newline。</li>\n</ul>\n</blockquote>\n<h5 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"$\"></a><code>$</code></h5><p>匹配输入结尾。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符的前的结尾处。</p>\n<p>例如，<code>/t$/</code> 不匹配 “eater” 中的 “t”，但匹配 “eat” 中的 “t”。</p>\n<h5 id=\"b-1\"><a href=\"#b-1\" class=\"headerlink\" title=\"\\b\"></a><code>\\b</code></h5><p>匹配一个零宽单词边界（zero-width word boundary），如一个字母与一个空格之间。 （不要和 <code>[\\b]</code> 混淆）</p>\n<p>例如，<code>/\\bno/</code> 匹配 “at noon” 中的 “no”，<code>/ly\\b/</code> 匹配 “possibly yesterday.” 中的 “ly”。</p>\n<h5 id=\"B\"><a href=\"#B\" class=\"headerlink\" title=\"\\B\"></a><code>\\B</code></h5><p>匹配一个零宽非单词边界（zero-width non-word boundary），如两个字母之间或两个空格之间。</p>\n<p>例如，<code>/\\Bon/</code> 匹配 “at noon” 中的 “on”，<code>/ye\\B/</code> 匹配 “possibly yesterday.” 中的 “ye”。</p>\n<h4 id=\"分组与反向引用\"><a href=\"#分组与反向引用\" class=\"headerlink\" title=\"分组与反向引用\"></a>分组与反向引用</h4><h5 id=\"x\"><a href=\"#x\" class=\"headerlink\" title=\"(x)\"></a><code>(x)</code></h5><p>匹配 <code>x</code> 并且捕获匹配项。 这被称为捕获括号（capturing parentheses）。</p>\n<p>例如，<code>/(foo)/</code> 匹配且捕获 “foo bar.” 中的 “foo”。被匹配的子字符串可以在结果数组的元素 <code>[1], ..., [n]</code> 中找到，或在被定义的 RegExp 对象的属性 $1, …, $9 中找到。</p>\n<p>捕获组（Capturing groups）有性能惩罚。如果不需再次访问被匹配的子字符串，最好使用非捕获括号（non-capturing parentheses），见下面。</p>\n<h5 id=\"x-1\"><a href=\"#x-1\" class=\"headerlink\" title=\"(?:x)\"></a><code>(?:x)</code></h5><p>匹配 <code>x</code> 不会捕获匹配项。这被称为非捕获括号（non-capturing parentheses）。匹配项不能够从结果数组的元素 <code>[1], ..., [n]</code> 或已被定义的 <code>RegExp</code> 对象的属性 <code>$1, ..., $9</code> 再次访问到。</p>\n<h5 id=\"n-1\"><a href=\"#n-1\" class=\"headerlink\" title=\"\\n\"></a><code>\\n</code></h5><p><code>n</code> 是一个正整数。一个反向引用（back reference），指向正则表达式中第 n 个括号（从左开始数）中匹配的子字符串。</p>\n<p>例如，<code>/apple(,)\\sorange\\1/</code> 匹配 “apple, orange, cherry, peach.” 中的 “apple,orange,”。一个更全面的例子在下面。</p>\n<h4 id=\"数量词\"><a href=\"#数量词\" class=\"headerlink\" title=\"数量词\"></a>数量词</h4><h5 id=\"x-2\"><a href=\"#x-2\" class=\"headerlink\" title=\"x*\"></a><code>x*</code></h5><p>匹配前面的模式 x 0 或多次。</p>\n<p>例如，<code>/bo*/</code> 匹配 “A ghost booooed” 中的 “boooo”，”A bird warbled” 中的 “b”，但是不匹配 “A goat grunted”。</p>\n<h5 id=\"x-3\"><a href=\"#x-3\" class=\"headerlink\" title=\"x+\"></a><code>x+</code></h5><p>匹配前面的模式 x 1 或多次。等价于 <code>{1,}</code>。</p>\n<p>例如，<code>/a+/</code> 匹配 “candy” 中的 “a”，”caaaaaaandy” 中所有的 “a”。</p>\n<h5 id=\"x-x\"><a href=\"#x-x\" class=\"headerlink\" title=\"x*? x+?\"></a><code>x*?</code> <code>x+?</code></h5><p>像上面的 * 和 + 一样匹配前面的模式 x，然而匹配是最小可能匹配。</p>\n<p>例如，<code>/&quot;.*?&quot;/</code> 匹配 ‘“foo” “bar”‘ 中的 ‘“foo”‘，而 * 后面没有 ? 时匹配 ‘“foo” “bar”‘。</p>\n<h5 id=\"x-4\"><a href=\"#x-4\" class=\"headerlink\" title=\"x?\"></a><code>x?</code></h5><p>匹配前面的模式 x 0 或 1 次。</p>\n<p>例如，<code>/e?le?/</code> 匹配 “angel” 中的 “el”，”angle” 中的 “le”。</p>\n<p>如果在数量词 <code>*</code>、<code>+</code>、<code>?</code> 或 <code>{}</code>, 任意一个后面紧跟该符号（?），会使数量词变为非贪婪（ non-greedy） ，即匹配次数最小化。反之，默认情况下，是贪婪的（greedy），即匹配次数最大化。</p>\n<p>在使用于向前断言（lookahead assertions）时，见该表格中 <code>(?=)、`</code>(?!)<code>和</code>(?:)` 的说明。</p>\n<h5 id=\"x-y\"><a href=\"#x-y\" class=\"headerlink\" title=\"x(?=y)\"></a><code>x(?=y)</code></h5><p>只有当 <code>x</code> 后面不是紧跟着 <code>y</code> 时，才匹配 <code>x</code>。例如，<code>/\\d+(?!\\.)/</code> 只有当一个数字后面没有紧跟着一个小数点时，才会匹配该数字。</p>\n<p><code>/\\d+(?!\\.)/.exec(&quot;3.141&quot;)</code> 匹配 141 而不是 3.141。</p>\n<h5 id=\"x-y-1\"><a href=\"#x-y-1\" class=\"headerlink\" title=\"x|y\"></a><code>x|y</code></h5><p>匹配 <code>x</code> 或 <code>y</code></p>\n<p>例如，<code>/green|red/</code> 匹配 “green apple” 中的 ‘green’，”red apple.” 中的 ‘red’。</p>\n<h5 id=\"x-n\"><a href=\"#x-n\" class=\"headerlink\" title=\"x{n}\"></a><code>x{n}</code></h5><p><code>n</code> 是一个正整数。前面的模式 <code>x</code> 连续出现 <code>n</code> 次时匹配。</p>\n<p>例如，<code>/a{2}/</code> 不匹配 “candy,” 中的 “a”，但是匹配 “caandy,” 中的两个 “a”，且匹配 “caaandy.” 中的前两个 “a”。</p>\n<h5 id=\"x-n-1\"><a href=\"#x-n-1\" class=\"headerlink\" title=\"x{n,}\"></a><code>x{n,}</code></h5><p><code>n</code> 是一个正整数。前面的模式 x 连续出现至少 n 次时匹配。</p>\n<p>例如，<code>/a{2,}/</code> 不匹配 “candy” 中的 “a”，但是匹配 “caandy” 和 “caaaaaaandy.” 中所有的 “a”。</p>\n<h5 id=\"x-n-m\"><a href=\"#x-n-m\" class=\"headerlink\" title=\"x{n,m}\"></a><code>x{n,m}</code></h5><p><code>n</code> 和 <code>m</code> 为正整数。前面的模式 x 连续出现至少 n 次，至多 m 次时匹配。</p>\n<p>例如，<code>/a{1,3}/</code> 不匹配 “cndy”，匹配 “candy,” 中的 “a”，”caandy,” 中的两个 “a”，匹配 “caaaaaaandy” 中的前面三个 “a”。注意，当匹配 “caaaaaaandy” 时，即使原始字符串拥有更多的 “a”，匹配项也是 “aaa”。</p>\n<h4 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h4><h5 id=\"x-y-2\"><a href=\"#x-y-2\" class=\"headerlink\" title=\"x(?=y)\"></a><code>x(?=y)</code></h5><p>仅匹配被y跟随的x。</p>\n<p>举个例子，<code>/Jack(?=Sprat)/</code>，如果”Jack”后面跟着sprat，则匹配之。</p>\n<p><code>/Jack(?=Sprat|Frost)/</code> ，如果”Jack”后面跟着”Sprat”或者”Frost”，则匹配之。但是，”Sprat” 和”Frost” 都不会在匹配结果中出现。</p>\n<h5 id=\"x-y-3\"><a href=\"#x-y-3\" class=\"headerlink\" title=\"x(?!y)\"></a><code>x(?!y)</code></h5><p>仅匹配不被y跟随的x。</p>\n<p>举个例子，<code>/\\d+(?!\\.)/</code> 只会匹配不被点（.）跟随的数字。<br><code>/\\d+(?!\\.)/.exec(&#39;3.141&#39;)</code> 匹配”141”，而不是”3.141”</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"定义-Define\"><a href=\"#定义-Define\" class=\"headerlink\" title=\"定义 Define\"></a>定义 Define</h2><p>正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象。这些模式或者说对象被用于 RegExp 的 exec 和 test 方法, 以及 String 的 match、replace、search 和 split 方法。</p>\n<p>RegExp 是一个用于创建正则表达式对象的构造函数，用于将文本与一个模式匹配。</p>\n<h2 id=\"创建一个正则表达式\"><a href=\"#创建一个正则表达式\" class=\"headerlink\" title=\"创建一个正则表达式\"></a>创建一个正则表达式</h2><p>有两种方法创建一个正则表达式。</p>","more":"<h3 id=\"1-字面量方式\"><a href=\"#1-字面量方式\" class=\"headerlink\" title=\"1. 字面量方式\"></a>1. 字面量方式</h3><p>由包含在斜杠之间的模式组成，如下所示:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   /pattern/flags </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/pattern/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/ab+c/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/^[a-zA-Z]+[0-9]*\\W?_$/gi</span>;</span><br></pre></td></tr></table></figure>\n<p>在加载脚本后，正则表达式字面值提供正则表达式的编译。当正则表达式保持不变时，使用此方法可获得更好的性能。</p>\n<h3 id=\"2-RegExp实例创建\"><a href=\"#2-RegExp实例创建\" class=\"headerlink\" title=\"2. RegExp实例创建\"></a>2. RegExp实例创建</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">    new RegExp(pattern [, flags])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"ab+c\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/ab+c/</span>); <span class=\"comment\">// 与上面等价</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^[a-zA-Z]+[0-9]*\\W?_$/</span>, <span class=\"string\">\"gi\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"^[a-zA-Z]+[0-9]*\\W?_$\"</span>, <span class=\"string\">\"gi\"</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>字面量方式和实例创建的方式在正则中的区别?<br>1、字面量形式提供正则表达式的编译（compilation）状态，当正则表达式保持为常量时使用字面量。而构造函数方式，如<code>new RegExp(&#39;ab+c&#39;)</code>提供了正则表达式运行时编译（runtime compilation）。<br>2、字面量方式中出现的一切都是元字符,所以不能进行变量值的拼接，而实例创建的方式是可以的。实例创建方式的好处在于可以在运行时编译，这个特性可以方便用来处理用户输入。<br>3、字面量中直接写\\d就可以，而在实例中有两种情况，如果直接使用/pattern/这种方式创建与字面量方式书写无区别，即\\d，如果是带双引号，双引号内的需要把它转译\\\\d</li>\n</ul>\n</blockquote>\n<p>比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Jack'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^\\d+name+\\d+$/</span>; <span class=\"comment\">//这样写是无效的 必须得用实例创建</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> RexExp(<span class=\"string\">\"^\\\\d\"</span> + name + <span class=\"string\">\"\\\\d+$\"</span>,<span class=\"string\">\"g\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"RegExp对象的参数\"><a href=\"#RegExp对象的参数\" class=\"headerlink\" title=\"RegExp对象的参数\"></a>RegExp对象的参数</h4><p><code>pattern</code>:正则表达式的文本。</p>\n<p><code>flags</code>:可以具有以下值的任意组合：</p>\n<blockquote>\n<p><code>g</code>：全局匹配;找到所有匹配，而不是在第一个匹配后停止<br><code>i</code>：忽略大小写<br><code>m</code>：多行; 将开始和结束字符（^和$）视为在多行上工作（例如，分别匹配每一行的开始和结束（由 \\n 或 \\r 分割），而不只是只匹配整个输入字符串的最开始和最末尾处。<br><code>u</code>：Unicode; 将模式视为Unicode序列点的序列<br><code>y</code>：粘性匹配; 仅匹配目标字符串中此正则表达式的lastIndex属性指示的索引(并且不尝试从任何后续的索引匹配)。</p>\n</blockquote>\n<p><strong>从ECMAScript 6开始</strong>，当第一个参数为正则表达式而第二个标志参数存在时，<code>new RegExp(/ab+c/, &#39;i&#39;)</code>不再抛出TypeError （“当从其他正则表达式进行构造时不支持标志”）的异常，取而代之，将使用这些参数创建一个新的正则表达式。</p>\n<h2 id=\"写一个正则表达式\"><a href=\"#写一个正则表达式\" class=\"headerlink\" title=\"写一个正则表达式\"></a>写一个正则表达式</h2><p>一个正则表达式模式是由简单的字符所构成的，比如<code>/abc/</code>, 或者是简单和特殊字符的组合，比如 <code>/ab*c/</code> 或 <code>/Chapter (\\d+)\\.\\d*/</code>。后者用到了括号，它在正则表达式中可以被用作是一个记忆设备。这一部分正则所匹配的字符将会被记住，在后面可以被利用。正如 <a href=\"#使用括号的子字符串匹配\">使用括号的子字符串匹配</a>。</p>\n<h3 id=\"简单模式\"><a href=\"#简单模式\" class=\"headerlink\" title=\"简单模式\"></a>简单模式</h3><p>简单模式是由你找到的直接匹配所构成的。比如，/abc/这个模式就匹配了在一个字符串中，仅仅字符 <code>&#39;abc&#39;</code> 同时出现并按照这个顺序。在 <code>&quot;Hi, do you know your abc&#39;s?&quot;</code> 和 <code>&quot;The latest airplane designs evolved from slabcraft.&quot;</code> 就会匹配成功。在上面的两个实例中，匹配的是子字符串 <code>&#39;abc&#39;</code>。在字符串 <code>&quot;Grab crab&quot;</code> 中将不会被匹配，因为它不包含任何的 ‘abc’ 子字符串。</p>\n<h3 id=\"特殊字符\"><a href=\"#特殊字符\" class=\"headerlink\" title=\"特殊字符\"></a>特殊字符</h3><p>当你需要搜索一个比直接匹配需要更多条件的匹配时，比如寻找一个或多个 ‘b’，或者寻找空格，那么这时模式将要包含特殊字符。比如， 模式<code>/ab*c/</code>匹配了一个单独的 ‘a’ 后面跟了零个或者多个 ‘b’（*的意思是前面一项出现了零个或者多个），且后面跟着 ‘c’ 的任何字符组合。在字符串 <code>&quot;cbbabbbbcdebc&quot;</code> 中，这个模式匹配了子字符串 <code>&quot;abbbbc&quot;</code>。</p>\n<h4 id=\"正则表达式中的特殊字符\"><a href=\"#正则表达式中的特殊字符\" class=\"headerlink\" title=\"正则表达式中的特殊字符\"></a>正则表达式中的特殊字符</h4><ul>\n<li><a href=\"#字符类别\">字符类别（Character Classes）</a></li>\n<li><a href=\"#字符集合\">字符集合（Character Sets）</a></li>\n<li><a href=\"边界\">边界（Boundaries）</a></li>\n<li><a href=\"#分组与反向引用\">分组（grouping）与反向引用（back references）</a></li>\n<li><a href=\"#数量词\">数量词（Quantifiers）</a></li>\n<li><a href=\"#断言\">断言（Assertions）</a></li>\n</ul>\n<h4 id=\"字符类别\"><a href=\"#字符类别\" class=\"headerlink\" title=\"字符类别\"></a>字符类别</h4><h5 id=\"点号，小数点\"><a href=\"#点号，小数点\" class=\"headerlink\" title=\".(点号，小数点)\"></a><code>.(点号，小数点)</code></h5><p>匹配任意单个字符，但是行结束符除外：<code>\\n \\r \\u2028</code> 或 <code>\\u2029</code>。</p>\n<p>在字符集中，点( . )失去其特殊含义，并匹配一个字面点( . )。</p>\n<p>需要注意的是，m 多行（multiline）标志不会改变点号的表现。因此为了匹配多行中的字符集，可使用[^] （当然你不是打算用在旧版本 IE 中），它将会匹配任意字符，包括换行符。</p>\n<p>例如，<code>/.y/</code> 匹配 <code>&quot;yes make my day&quot;</code> 中的 <code>&quot;my&quot;</code> 和 <code>&quot;ay&quot;</code>，但是不匹配 <code>&quot;yes&quot;</code>。</p>\n<h5 id=\"d\"><a href=\"#d\" class=\"headerlink\" title=\"\\d\"></a><code>\\d</code></h5><p>匹配任意阿拉伯数字。等价于[0-9]。</p>\n<p>例如，<code>/\\d/</code> 或 <code>/[0-9]/</code> 匹配 “B2 is the suite number.” 中的 ‘2’。 </p>\n<blockquote>\n<ul>\n<li><code>\\d</code> 表示数字，即 digit，<code>\\w</code> 表示单词，等同于 <code>[A-Za-z0-9_]</code>，原文就是 word。</li>\n</ul>\n</blockquote>\n<h5 id=\"D\"><a href=\"#D\" class=\"headerlink\" title=\"\\D\"></a><code>\\D</code></h5><p>匹配任意一个不是阿拉伯数字的字符。等价于[^0-9]。</p>\n<p>例如，<code>/\\D/</code> 或 <code>/[^0-9]/</code> 匹配 “B2 is the suite number.” 中的 ‘B’。</p>\n<h5 id=\"w\"><a href=\"#w\" class=\"headerlink\" title=\"\\w\"></a><code>\\w</code></h5><p>匹配任意来自基本拉丁字母表中的字母数字字符，还包括下划线。等价于 <code>[A-Za-z0-9_]</code>。</p>\n<p>例如，<code>/\\w/</code> 匹配 “apple” 中的 ‘a’，”$5.28” 中的 ‘5’ 和 “3D” 中的 ‘3’。</p>\n<h5 id=\"W\"><a href=\"#W\" class=\"headerlink\" title=\"\\W\"></a><code>\\W</code></h5><p>匹配任意不是基本拉丁字母表中单词（字母数字下划线）字符的字符。等价于 <code>[^A-Za-z0-9_]</code>。</p>\n<p>例如，<code>/\\W/</code> 或 /[^A-Za-z0-9_]/ 匹配 “50%” 中的 ‘%’。</p>\n<h5 id=\"s\"><a href=\"#s\" class=\"headerlink\" title=\"\\s\"></a><code>\\s</code></h5><p>匹配一个空白符，包括空格、制表符、换页符、换行符和其他 Unicode 空格。</p>\n<p>等价于 <code>[ \\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e\\u2000​\\u2001\\u2002​\\u2003\\u2004​ \\u2005\\u2006​\\u2007\\u2008​\\u2009\\u200a​\\u2028\\u2029​​\\u202f\\u205f​ \\u3000]</code>。</p>\n<p>例如 <code>/\\s\\w*/</code> 匹配 “foo bar” 中的 ‘ bar’。</p>\n<h5 id=\"S\"><a href=\"#S\" class=\"headerlink\" title=\"\\S\"></a><code>\\S</code></h5><p>匹配一个非空白符。等价于 <code>[^ \\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e\\u2000​\\u2001\\u2002​\\u2003\\u2004​ \\u2005\\u2006​\\u2007\\u2008​\\u2009\\u200a​\\u2028\\u2029​\\u202f\\u205f​\\u3000]</code>。</p>\n<p>例如，<code>/\\S\\w*/</code> 匹配 “foo bar” 中的 ‘foo’。</p>\n<h5 id=\"t\"><a href=\"#t\" class=\"headerlink\" title=\"\\t\"></a><code>\\t</code></h5><p>匹配一个水平制表符（tab）</p>\n<h5 id=\"r\"><a href=\"#r\" class=\"headerlink\" title=\"\\r\"></a><code>\\r</code></h5><p>匹配一个回车符（carriage return）</p>\n<blockquote>\n<ul>\n<li>回车 <code>\\r</code> 本义是光标重新回到本行开头，r 即 return。</li>\n</ul>\n</blockquote>\n<h5 id=\"n\"><a href=\"#n\" class=\"headerlink\" title=\"\\n\"></a><code>\\n</code></h5><p>匹配一个换行符（linefeed）</p>\n<h5 id=\"v\"><a href=\"#v\" class=\"headerlink\" title=\"\\v\"></a><code>\\v</code></h5><p>匹配一个垂直制表符（vertical tab）</p>\n<h5 id=\"f\"><a href=\"#f\" class=\"headerlink\" title=\"\\f\"></a><code>\\f</code></h5><p>匹配一个换页符（form-feed）</p>\n<h5 id=\"b\"><a href=\"#b\" class=\"headerlink\" title=\"[\\b]\"></a><code>[\\b]</code></h5><p>匹配一个退格符（backspace）（不要与 \\b 混淆）</p>\n<h5 id=\"0\"><a href=\"#0\" class=\"headerlink\" title=\"\\0\"></a><code>\\0</code></h5><p>匹配一个 NUL 字符。不要在此后面跟小数点。</p>\n<h5 id=\"cX\"><a href=\"#cX\" class=\"headerlink\" title=\"\\cX\"></a><code>\\cX</code></h5><p>X 是 A - Z 的一个字母。匹配字符串中的一个控制字符。</p>\n<p>例如，<code>/\\cM/</code> 匹配字符串中的 control-M。</p>\n<h5 id=\"xhh\"><a href=\"#xhh\" class=\"headerlink\" title=\"\\xhh\"></a><code>\\xhh</code></h5><p>匹配编码为 <code>hh</code> （两个十六进制数字）的字符。</p>\n<h5 id=\"uhhhh\"><a href=\"#uhhhh\" class=\"headerlink\" title=\"\\uhhhh\"></a><code>\\uhhhh</code></h5><p>匹配 Unicode 值为 hhhh （四个十六进制数字）的字符。</p>\n<h5 id=\"反斜杠\"><a href=\"#反斜杠\" class=\"headerlink\" title=\"\\(反斜杠)\"></a><code>\\(反斜杠)</code></h5><p>对于那些通常被认为字面意义的字符来说，表示下一个字符具有特殊用处，并且不会被按照字面意义解释。</p>\n<p>例如 <code>/b/</code> 匹配字符 ‘b’。在 b 前面加上一个反斜杠，即使用 <code>/\\b/</code>，则该字符变得特殊，以为这匹配一个单词边界。</p>\n<p>或</p>\n<p>对于那些通常特殊对待的字符，表示下一个字符不具有特殊用途，会被按照字面意义解释。</p>\n<p>例如，<code>*</code> 是一个特殊字符，表示匹配某个字符 0 或多次，如 <code>/a*/</code> 意味着 0 或多个 “a”。 为了匹配字面意义上的 <code>*</code> ，在它前面加上一个反斜杠，例如，<code>/a\\*/</code>匹配 ‘a*’。</p>\n<h4 id=\"字符集合\"><a href=\"#字符集合\" class=\"headerlink\" title=\"字符集合\"></a>字符集合</h4><h5 id=\"xyz\"><a href=\"#xyz\" class=\"headerlink\" title=\"[xyz]\"></a><code>[xyz]</code></h5><p>一个字符集合，也叫字符组。匹配集合中的任意一个字符。你可以使用连字符’<code>-</code>‘指定一个范围。</p>\n<p>例如，<code>[abcd]</code> 等价于 <code>[a-d]</code>，匹配”<code>brisket</code>“中的’b’和”<code>chop</code>“中的’c’。</p>\n<h5 id=\"xyz-1\"><a href=\"#xyz-1\" class=\"headerlink\" title=\"[^xyz]\"></a><code>[^xyz]</code></h5><p>一个反义或补充字符集，也叫反义字符组。也就是说，它匹配任意不在括号内的字符。你也可以通过使用连字符 ‘-‘ 指定一个范围内的字符。</p>\n<p>例如，<code>[^abc]</code> 等价于 <code>[^a-c]</code>。 第一个匹配的是 “bacon” 中的’o’ 和 “chop” 中的 ‘h’。</p>\n<h4 id=\"边界\"><a href=\"#边界\" class=\"headerlink\" title=\"边界\"></a>边界</h4><h5 id><a href=\"#\" class=\"headerlink\" title=\"^\"></a><code>^</code></h5><p>匹配输入开始。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符后的开始处。</p>\n<p>例如，<code>/^A/</code> 不匹配 “an A” 中的 “A”，但匹配 “An A” 中的 “A”。</p>\n<blockquote>\n<ul>\n<li>换行 <code>\\n</code> 本义是光标往下一行（不一定到下一行行首），n 即 newline。</li>\n</ul>\n</blockquote>\n<h5 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"$\"></a><code>$</code></h5><p>匹配输入结尾。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符的前的结尾处。</p>\n<p>例如，<code>/t$/</code> 不匹配 “eater” 中的 “t”，但匹配 “eat” 中的 “t”。</p>\n<h5 id=\"b-1\"><a href=\"#b-1\" class=\"headerlink\" title=\"\\b\"></a><code>\\b</code></h5><p>匹配一个零宽单词边界（zero-width word boundary），如一个字母与一个空格之间。 （不要和 <code>[\\b]</code> 混淆）</p>\n<p>例如，<code>/\\bno/</code> 匹配 “at noon” 中的 “no”，<code>/ly\\b/</code> 匹配 “possibly yesterday.” 中的 “ly”。</p>\n<h5 id=\"B\"><a href=\"#B\" class=\"headerlink\" title=\"\\B\"></a><code>\\B</code></h5><p>匹配一个零宽非单词边界（zero-width non-word boundary），如两个字母之间或两个空格之间。</p>\n<p>例如，<code>/\\Bon/</code> 匹配 “at noon” 中的 “on”，<code>/ye\\B/</code> 匹配 “possibly yesterday.” 中的 “ye”。</p>\n<h4 id=\"分组与反向引用\"><a href=\"#分组与反向引用\" class=\"headerlink\" title=\"分组与反向引用\"></a>分组与反向引用</h4><h5 id=\"x\"><a href=\"#x\" class=\"headerlink\" title=\"(x)\"></a><code>(x)</code></h5><p>匹配 <code>x</code> 并且捕获匹配项。 这被称为捕获括号（capturing parentheses）。</p>\n<p>例如，<code>/(foo)/</code> 匹配且捕获 “foo bar.” 中的 “foo”。被匹配的子字符串可以在结果数组的元素 <code>[1], ..., [n]</code> 中找到，或在被定义的 RegExp 对象的属性 $1, …, $9 中找到。</p>\n<p>捕获组（Capturing groups）有性能惩罚。如果不需再次访问被匹配的子字符串，最好使用非捕获括号（non-capturing parentheses），见下面。</p>\n<h5 id=\"x-1\"><a href=\"#x-1\" class=\"headerlink\" title=\"(?:x)\"></a><code>(?:x)</code></h5><p>匹配 <code>x</code> 不会捕获匹配项。这被称为非捕获括号（non-capturing parentheses）。匹配项不能够从结果数组的元素 <code>[1], ..., [n]</code> 或已被定义的 <code>RegExp</code> 对象的属性 <code>$1, ..., $9</code> 再次访问到。</p>\n<h5 id=\"n-1\"><a href=\"#n-1\" class=\"headerlink\" title=\"\\n\"></a><code>\\n</code></h5><p><code>n</code> 是一个正整数。一个反向引用（back reference），指向正则表达式中第 n 个括号（从左开始数）中匹配的子字符串。</p>\n<p>例如，<code>/apple(,)\\sorange\\1/</code> 匹配 “apple, orange, cherry, peach.” 中的 “apple,orange,”。一个更全面的例子在下面。</p>\n<h4 id=\"数量词\"><a href=\"#数量词\" class=\"headerlink\" title=\"数量词\"></a>数量词</h4><h5 id=\"x-2\"><a href=\"#x-2\" class=\"headerlink\" title=\"x*\"></a><code>x*</code></h5><p>匹配前面的模式 x 0 或多次。</p>\n<p>例如，<code>/bo*/</code> 匹配 “A ghost booooed” 中的 “boooo”，”A bird warbled” 中的 “b”，但是不匹配 “A goat grunted”。</p>\n<h5 id=\"x-3\"><a href=\"#x-3\" class=\"headerlink\" title=\"x+\"></a><code>x+</code></h5><p>匹配前面的模式 x 1 或多次。等价于 <code>{1,}</code>。</p>\n<p>例如，<code>/a+/</code> 匹配 “candy” 中的 “a”，”caaaaaaandy” 中所有的 “a”。</p>\n<h5 id=\"x-x\"><a href=\"#x-x\" class=\"headerlink\" title=\"x*? x+?\"></a><code>x*?</code> <code>x+?</code></h5><p>像上面的 * 和 + 一样匹配前面的模式 x，然而匹配是最小可能匹配。</p>\n<p>例如，<code>/&quot;.*?&quot;/</code> 匹配 ‘“foo” “bar”‘ 中的 ‘“foo”‘，而 * 后面没有 ? 时匹配 ‘“foo” “bar”‘。</p>\n<h5 id=\"x-4\"><a href=\"#x-4\" class=\"headerlink\" title=\"x?\"></a><code>x?</code></h5><p>匹配前面的模式 x 0 或 1 次。</p>\n<p>例如，<code>/e?le?/</code> 匹配 “angel” 中的 “el”，”angle” 中的 “le”。</p>\n<p>如果在数量词 <code>*</code>、<code>+</code>、<code>?</code> 或 <code>{}</code>, 任意一个后面紧跟该符号（?），会使数量词变为非贪婪（ non-greedy） ，即匹配次数最小化。反之，默认情况下，是贪婪的（greedy），即匹配次数最大化。</p>\n<p>在使用于向前断言（lookahead assertions）时，见该表格中 <code>(?=)、`</code>(?!)<code>和</code>(?:)` 的说明。</p>\n<h5 id=\"x-y\"><a href=\"#x-y\" class=\"headerlink\" title=\"x(?=y)\"></a><code>x(?=y)</code></h5><p>只有当 <code>x</code> 后面不是紧跟着 <code>y</code> 时，才匹配 <code>x</code>。例如，<code>/\\d+(?!\\.)/</code> 只有当一个数字后面没有紧跟着一个小数点时，才会匹配该数字。</p>\n<p><code>/\\d+(?!\\.)/.exec(&quot;3.141&quot;)</code> 匹配 141 而不是 3.141。</p>\n<h5 id=\"x-y-1\"><a href=\"#x-y-1\" class=\"headerlink\" title=\"x|y\"></a><code>x|y</code></h5><p>匹配 <code>x</code> 或 <code>y</code></p>\n<p>例如，<code>/green|red/</code> 匹配 “green apple” 中的 ‘green’，”red apple.” 中的 ‘red’。</p>\n<h5 id=\"x-n\"><a href=\"#x-n\" class=\"headerlink\" title=\"x{n}\"></a><code>x{n}</code></h5><p><code>n</code> 是一个正整数。前面的模式 <code>x</code> 连续出现 <code>n</code> 次时匹配。</p>\n<p>例如，<code>/a{2}/</code> 不匹配 “candy,” 中的 “a”，但是匹配 “caandy,” 中的两个 “a”，且匹配 “caaandy.” 中的前两个 “a”。</p>\n<h5 id=\"x-n-1\"><a href=\"#x-n-1\" class=\"headerlink\" title=\"x{n,}\"></a><code>x{n,}</code></h5><p><code>n</code> 是一个正整数。前面的模式 x 连续出现至少 n 次时匹配。</p>\n<p>例如，<code>/a{2,}/</code> 不匹配 “candy” 中的 “a”，但是匹配 “caandy” 和 “caaaaaaandy.” 中所有的 “a”。</p>\n<h5 id=\"x-n-m\"><a href=\"#x-n-m\" class=\"headerlink\" title=\"x{n,m}\"></a><code>x{n,m}</code></h5><p><code>n</code> 和 <code>m</code> 为正整数。前面的模式 x 连续出现至少 n 次，至多 m 次时匹配。</p>\n<p>例如，<code>/a{1,3}/</code> 不匹配 “cndy”，匹配 “candy,” 中的 “a”，”caandy,” 中的两个 “a”，匹配 “caaaaaaandy” 中的前面三个 “a”。注意，当匹配 “caaaaaaandy” 时，即使原始字符串拥有更多的 “a”，匹配项也是 “aaa”。</p>\n<h4 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h4><h5 id=\"x-y-2\"><a href=\"#x-y-2\" class=\"headerlink\" title=\"x(?=y)\"></a><code>x(?=y)</code></h5><p>仅匹配被y跟随的x。</p>\n<p>举个例子，<code>/Jack(?=Sprat)/</code>，如果”Jack”后面跟着sprat，则匹配之。</p>\n<p><code>/Jack(?=Sprat|Frost)/</code> ，如果”Jack”后面跟着”Sprat”或者”Frost”，则匹配之。但是，”Sprat” 和”Frost” 都不会在匹配结果中出现。</p>\n<h5 id=\"x-y-3\"><a href=\"#x-y-3\" class=\"headerlink\" title=\"x(?!y)\"></a><code>x(?!y)</code></h5><p>仅匹配不被y跟随的x。</p>\n<p>举个例子，<code>/\\d+(?!\\.)/</code> 只会匹配不被点（.）跟随的数字。<br><code>/\\d+(?!\\.)/.exec(&#39;3.141&#39;)</code> 匹配”141”，而不是”3.141”</p>"},{"title":"offset","date":"2018-01-03T02:40:13.000Z","_content":"先来一张网上的图\n![](http://oy9tlpm12.bkt.clouddn.com/3131637-50e9ea1bc0764f99.png)\n\n当然，这个图是有浏览器的兼容问题的，不是每个浏览器都是这样定义，个人觉得有两种情况，内容盒模型(标准盒模型)，边框盒模型(IE怪异盒模型)\n\n<!-- more -->\n\n# 内容盒模型（标准盒模型）\n\n`offsetWidth、offsetHeight`: 包含自身width、border、padding.(div.style.width 因为只能获取行内的数值)\n\n`offsetLeft、offsetTop`: 对于块级元素，相对最近有定位属性的父级元素（position不为默认值,可通过el.offsetParent获取）左边的距离，如果都没有定位属性则以html元素为基准。注意，在chrome、IE8中这里的比较的是父级border的外边缘与当前元素的外边缘，而firefox、IE7、IE9比较的是父级border的内边缘与当前元素的外边缘。对于可被截断到下一行的行内元素（如 span），描述的是边界框的尺寸（使用 Element.getBoundingClientRect 来获取其位置）\n\n`clientTop、clientLeft`: 一般返回元素的border宽度\n\n`clientWidth、clientHeight`: Element.clientWidth 属性表示元素的内部宽度，以像素计。该属性包括内边距，但不包括垂直滚动条（如果有）、边框和外边距。该属性值会被四舍五入为一个整数。如果你需要一个小数值，可使用 element.getBoundingClientRect()。IE7/8有点不一样\n`scrollWidth、scrollHeight`: 元素的scrollWidth只读属性以px为单位返回元素的内容区域宽度或元素的本身的宽度中更大的那个值。若元素的宽度大于其内容的区域（例如，元素存在滚动条时）, scrollWidth的值要大于clientWidth\n\n`scrollLeft、scrollTop`: Element.scrollLeft 属性可以读取或设置元素滚动条到元素左边的距离。也就是滚动条位置\n\n> 获取浏览器滚动条时要注意兼容：\n> + 未声明 DTD 时（谷歌只认识他）\n`document.body.scrollTop`\n> + 已经声明DTD 时（IE678只认识他）\n`document.documentElement.scrollTop`\n> + 火狐/谷歌/ie9+以上支持的\n`window.pageYOffset`\n\n兼容获取浏览器滚动条\n\n```javascript\nwindow.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop\n```\n\n\n# 边框盒模型（IE怪异盒模型）\n\n```offsetWidth、offsetHeight```: 等于自身width, width包含padding,border\n\n```offsetLeft、offsetTop```: 除IE7、IE9比较的是父级border的内边缘与当前元素的外边缘， firefox、chrome、ie8是父级border的外边缘与当前元素的外边缘 \n\n```clientTop、clientLeft```: 一般返回元素的border宽度","source":"_posts/offset.md","raw":"---\ntitle: offset\ndate: 2018-01-03 10:40:13\ntags:\n  - CSS\n---\n先来一张网上的图\n![](http://oy9tlpm12.bkt.clouddn.com/3131637-50e9ea1bc0764f99.png)\n\n当然，这个图是有浏览器的兼容问题的，不是每个浏览器都是这样定义，个人觉得有两种情况，内容盒模型(标准盒模型)，边框盒模型(IE怪异盒模型)\n\n<!-- more -->\n\n# 内容盒模型（标准盒模型）\n\n`offsetWidth、offsetHeight`: 包含自身width、border、padding.(div.style.width 因为只能获取行内的数值)\n\n`offsetLeft、offsetTop`: 对于块级元素，相对最近有定位属性的父级元素（position不为默认值,可通过el.offsetParent获取）左边的距离，如果都没有定位属性则以html元素为基准。注意，在chrome、IE8中这里的比较的是父级border的外边缘与当前元素的外边缘，而firefox、IE7、IE9比较的是父级border的内边缘与当前元素的外边缘。对于可被截断到下一行的行内元素（如 span），描述的是边界框的尺寸（使用 Element.getBoundingClientRect 来获取其位置）\n\n`clientTop、clientLeft`: 一般返回元素的border宽度\n\n`clientWidth、clientHeight`: Element.clientWidth 属性表示元素的内部宽度，以像素计。该属性包括内边距，但不包括垂直滚动条（如果有）、边框和外边距。该属性值会被四舍五入为一个整数。如果你需要一个小数值，可使用 element.getBoundingClientRect()。IE7/8有点不一样\n`scrollWidth、scrollHeight`: 元素的scrollWidth只读属性以px为单位返回元素的内容区域宽度或元素的本身的宽度中更大的那个值。若元素的宽度大于其内容的区域（例如，元素存在滚动条时）, scrollWidth的值要大于clientWidth\n\n`scrollLeft、scrollTop`: Element.scrollLeft 属性可以读取或设置元素滚动条到元素左边的距离。也就是滚动条位置\n\n> 获取浏览器滚动条时要注意兼容：\n> + 未声明 DTD 时（谷歌只认识他）\n`document.body.scrollTop`\n> + 已经声明DTD 时（IE678只认识他）\n`document.documentElement.scrollTop`\n> + 火狐/谷歌/ie9+以上支持的\n`window.pageYOffset`\n\n兼容获取浏览器滚动条\n\n```javascript\nwindow.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop\n```\n\n\n# 边框盒模型（IE怪异盒模型）\n\n```offsetWidth、offsetHeight```: 等于自身width, width包含padding,border\n\n```offsetLeft、offsetTop```: 除IE7、IE9比较的是父级border的内边缘与当前元素的外边缘， firefox、chrome、ie8是父级border的外边缘与当前元素的外边缘 \n\n```clientTop、clientLeft```: 一般返回元素的border宽度","slug":"offset","published":1,"updated":"2023-05-31T16:56:15.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clibygb3v000af4fm7vipqei5","content":"<p>先来一张网上的图<br><img src=\"http://oy9tlpm12.bkt.clouddn.com/3131637-50e9ea1bc0764f99.png\" alt></p>\n<p>当然，这个图是有浏览器的兼容问题的，不是每个浏览器都是这样定义，个人觉得有两种情况，内容盒模型(标准盒模型)，边框盒模型(IE怪异盒模型)</p>\n<a id=\"more\"></a>\n<h1 id=\"内容盒模型（标准盒模型）\"><a href=\"#内容盒模型（标准盒模型）\" class=\"headerlink\" title=\"内容盒模型（标准盒模型）\"></a>内容盒模型（标准盒模型）</h1><p><code>offsetWidth、offsetHeight</code>: 包含自身width、border、padding.(div.style.width 因为只能获取行内的数值)</p>\n<p><code>offsetLeft、offsetTop</code>: 对于块级元素，相对最近有定位属性的父级元素（position不为默认值,可通过el.offsetParent获取）左边的距离，如果都没有定位属性则以html元素为基准。注意，在chrome、IE8中这里的比较的是父级border的外边缘与当前元素的外边缘，而firefox、IE7、IE9比较的是父级border的内边缘与当前元素的外边缘。对于可被截断到下一行的行内元素（如 span），描述的是边界框的尺寸（使用 Element.getBoundingClientRect 来获取其位置）</p>\n<p><code>clientTop、clientLeft</code>: 一般返回元素的border宽度</p>\n<p><code>clientWidth、clientHeight</code>: Element.clientWidth 属性表示元素的内部宽度，以像素计。该属性包括内边距，但不包括垂直滚动条（如果有）、边框和外边距。该属性值会被四舍五入为一个整数。如果你需要一个小数值，可使用 element.getBoundingClientRect()。IE7/8有点不一样<br><code>scrollWidth、scrollHeight</code>: 元素的scrollWidth只读属性以px为单位返回元素的内容区域宽度或元素的本身的宽度中更大的那个值。若元素的宽度大于其内容的区域（例如，元素存在滚动条时）, scrollWidth的值要大于clientWidth</p>\n<p><code>scrollLeft、scrollTop</code>: Element.scrollLeft 属性可以读取或设置元素滚动条到元素左边的距离。也就是滚动条位置</p>\n<blockquote>\n<p>获取浏览器滚动条时要注意兼容：</p>\n<ul>\n<li>未声明 DTD 时（谷歌只认识他）<br><code>document.body.scrollTop</code></li>\n<li>已经声明DTD 时（IE678只认识他）<br><code>document.documentElement.scrollTop</code></li>\n<li>火狐/谷歌/ie9+以上支持的<br><code>window.pageYOffset</code></li>\n</ul>\n</blockquote>\n<p>兼容获取浏览器滚动条</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.pageYOffset || <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop</span><br></pre></td></tr></table></figure>\n<h1 id=\"边框盒模型（IE怪异盒模型）\"><a href=\"#边框盒模型（IE怪异盒模型）\" class=\"headerlink\" title=\"边框盒模型（IE怪异盒模型）\"></a>边框盒模型（IE怪异盒模型）</h1><p><code>offsetWidth、offsetHeight</code>: 等于自身width, width包含padding,border</p>\n<p><code>offsetLeft、offsetTop</code>: 除IE7、IE9比较的是父级border的内边缘与当前元素的外边缘， firefox、chrome、ie8是父级border的外边缘与当前元素的外边缘 </p>\n<p><code>clientTop、clientLeft</code>: 一般返回元素的border宽度</p>\n","site":{"data":{}},"excerpt":"<p>先来一张网上的图<br><img src=\"http://oy9tlpm12.bkt.clouddn.com/3131637-50e9ea1bc0764f99.png\" alt></p>\n<p>当然，这个图是有浏览器的兼容问题的，不是每个浏览器都是这样定义，个人觉得有两种情况，内容盒模型(标准盒模型)，边框盒模型(IE怪异盒模型)</p>","more":"<h1 id=\"内容盒模型（标准盒模型）\"><a href=\"#内容盒模型（标准盒模型）\" class=\"headerlink\" title=\"内容盒模型（标准盒模型）\"></a>内容盒模型（标准盒模型）</h1><p><code>offsetWidth、offsetHeight</code>: 包含自身width、border、padding.(div.style.width 因为只能获取行内的数值)</p>\n<p><code>offsetLeft、offsetTop</code>: 对于块级元素，相对最近有定位属性的父级元素（position不为默认值,可通过el.offsetParent获取）左边的距离，如果都没有定位属性则以html元素为基准。注意，在chrome、IE8中这里的比较的是父级border的外边缘与当前元素的外边缘，而firefox、IE7、IE9比较的是父级border的内边缘与当前元素的外边缘。对于可被截断到下一行的行内元素（如 span），描述的是边界框的尺寸（使用 Element.getBoundingClientRect 来获取其位置）</p>\n<p><code>clientTop、clientLeft</code>: 一般返回元素的border宽度</p>\n<p><code>clientWidth、clientHeight</code>: Element.clientWidth 属性表示元素的内部宽度，以像素计。该属性包括内边距，但不包括垂直滚动条（如果有）、边框和外边距。该属性值会被四舍五入为一个整数。如果你需要一个小数值，可使用 element.getBoundingClientRect()。IE7/8有点不一样<br><code>scrollWidth、scrollHeight</code>: 元素的scrollWidth只读属性以px为单位返回元素的内容区域宽度或元素的本身的宽度中更大的那个值。若元素的宽度大于其内容的区域（例如，元素存在滚动条时）, scrollWidth的值要大于clientWidth</p>\n<p><code>scrollLeft、scrollTop</code>: Element.scrollLeft 属性可以读取或设置元素滚动条到元素左边的距离。也就是滚动条位置</p>\n<blockquote>\n<p>获取浏览器滚动条时要注意兼容：</p>\n<ul>\n<li>未声明 DTD 时（谷歌只认识他）<br><code>document.body.scrollTop</code></li>\n<li>已经声明DTD 时（IE678只认识他）<br><code>document.documentElement.scrollTop</code></li>\n<li>火狐/谷歌/ie9+以上支持的<br><code>window.pageYOffset</code></li>\n</ul>\n</blockquote>\n<p>兼容获取浏览器滚动条</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.pageYOffset || <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop</span><br></pre></td></tr></table></figure>\n<h1 id=\"边框盒模型（IE怪异盒模型）\"><a href=\"#边框盒模型（IE怪异盒模型）\" class=\"headerlink\" title=\"边框盒模型（IE怪异盒模型）\"></a>边框盒模型（IE怪异盒模型）</h1><p><code>offsetWidth、offsetHeight</code>: 等于自身width, width包含padding,border</p>\n<p><code>offsetLeft、offsetTop</code>: 除IE7、IE9比较的是父级border的内边缘与当前元素的外边缘， firefox、chrome、ie8是父级border的外边缘与当前元素的外边缘 </p>\n<p><code>clientTop、clientLeft</code>: 一般返回元素的border宽度</p>"},{"title":"小程序配置本地接口","date":"2018-02-09T02:31:09.000Z","_content":"之前在做公司小程序开发的时候，没有发现本地调试的方法，所以每次写完接口必须要把代码上传远程服务器进行测试，这种处理不仅不优雅，更要命的是极度拖延了开发进度，不过因为第一次接触小程序，完全不熟悉其开发原理，所以一直没有机会去改善开发逻辑。直至公司小程序开发完成后，才在网上去搜寻解决文案，终于找到本地开发调试的方法，并记录下来。\n<!-- more -->\n# 安装charles\n\ncharles是一个http代理软件(以前用过fiddle,应该类似于fiddle，不过前者功能更强大)，有windows和mac版，软件收费，基于java，所以需要电脑上装有[java](http://www.java.com)，所以我下载的是[破解版](https://pan.baidu.com/s/1dHaY9ah)(穷，有钱的可以支持一下正版)， 密码：3ghf。下载后直接解压运行。\n\n# 开始配置\n\n如果已经安装好了软件，那么就开始配置。\n\n+ 首先打开Charles，安装证书到本地, 点击‘安装证书’，全点下一步，安装完成\n\n![](http://oy9tlpm12.bkt.clouddn.com/1.png)\n\n+ 打开 `工具->远程映射` 添加线上域名于本地（开发环境）服务的映射\n\n![](http://oy9tlpm12.bkt.clouddn.com/22.png)\n\n+ 打开 `代理 -> 代理设置` 选择`代理`选项卡，默认的HTTP Proxy的值是8888，这个端口号需要记着，后边在微信web开发者工具里边要用到的\n\n+ 选择`ssl`选项卡,如下设置\n\n![](http://oy9tlpm12.bkt.clouddn.com/6.png)\n\n+ 选择`windows`选项卡，点击启用以下选项\n\n![](http://oy9tlpm12.bkt.clouddn.com/3.png)\n\n+ 确认 `工具->windows代理` 打上勾\n\n![](http://oy9tlpm12.bkt.clouddn.com/4.png)\n\n+ 登录微信开发者工具，选择手动设置代理，然后填写本地的IP，以及前边在Charles中设置的代理端口号。enjoy it!\n\n","source":"_posts/小程序配置本地接口.md","raw":"---\ntitle: 小程序配置本地接口\ndate: 2018-02-09 10:31:09\ntags:\n    - 小程序\n    - 本地调试\n    - charles代理\n---\n之前在做公司小程序开发的时候，没有发现本地调试的方法，所以每次写完接口必须要把代码上传远程服务器进行测试，这种处理不仅不优雅，更要命的是极度拖延了开发进度，不过因为第一次接触小程序，完全不熟悉其开发原理，所以一直没有机会去改善开发逻辑。直至公司小程序开发完成后，才在网上去搜寻解决文案，终于找到本地开发调试的方法，并记录下来。\n<!-- more -->\n# 安装charles\n\ncharles是一个http代理软件(以前用过fiddle,应该类似于fiddle，不过前者功能更强大)，有windows和mac版，软件收费，基于java，所以需要电脑上装有[java](http://www.java.com)，所以我下载的是[破解版](https://pan.baidu.com/s/1dHaY9ah)(穷，有钱的可以支持一下正版)， 密码：3ghf。下载后直接解压运行。\n\n# 开始配置\n\n如果已经安装好了软件，那么就开始配置。\n\n+ 首先打开Charles，安装证书到本地, 点击‘安装证书’，全点下一步，安装完成\n\n![](http://oy9tlpm12.bkt.clouddn.com/1.png)\n\n+ 打开 `工具->远程映射` 添加线上域名于本地（开发环境）服务的映射\n\n![](http://oy9tlpm12.bkt.clouddn.com/22.png)\n\n+ 打开 `代理 -> 代理设置` 选择`代理`选项卡，默认的HTTP Proxy的值是8888，这个端口号需要记着，后边在微信web开发者工具里边要用到的\n\n+ 选择`ssl`选项卡,如下设置\n\n![](http://oy9tlpm12.bkt.clouddn.com/6.png)\n\n+ 选择`windows`选项卡，点击启用以下选项\n\n![](http://oy9tlpm12.bkt.clouddn.com/3.png)\n\n+ 确认 `工具->windows代理` 打上勾\n\n![](http://oy9tlpm12.bkt.clouddn.com/4.png)\n\n+ 登录微信开发者工具，选择手动设置代理，然后填写本地的IP，以及前边在Charles中设置的代理端口号。enjoy it!\n\n","slug":"小程序配置本地接口","published":1,"updated":"2023-05-31T16:56:15.289Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clibygb5u000uf4fmkcf0yl2i","content":"<p>之前在做公司小程序开发的时候，没有发现本地调试的方法，所以每次写完接口必须要把代码上传远程服务器进行测试，这种处理不仅不优雅，更要命的是极度拖延了开发进度，不过因为第一次接触小程序，完全不熟悉其开发原理，所以一直没有机会去改善开发逻辑。直至公司小程序开发完成后，才在网上去搜寻解决文案，终于找到本地开发调试的方法，并记录下来。<br><a id=\"more\"></a></p>\n<h1 id=\"安装charles\"><a href=\"#安装charles\" class=\"headerlink\" title=\"安装charles\"></a>安装charles</h1><p>charles是一个http代理软件(以前用过fiddle,应该类似于fiddle，不过前者功能更强大)，有windows和mac版，软件收费，基于java，所以需要电脑上装有<a href=\"http://www.java.com\" target=\"_blank\" rel=\"noopener\">java</a>，所以我下载的是<a href=\"https://pan.baidu.com/s/1dHaY9ah\" target=\"_blank\" rel=\"noopener\">破解版</a>(穷，有钱的可以支持一下正版)， 密码：3ghf。下载后直接解压运行。</p>\n<h1 id=\"开始配置\"><a href=\"#开始配置\" class=\"headerlink\" title=\"开始配置\"></a>开始配置</h1><p>如果已经安装好了软件，那么就开始配置。</p>\n<ul>\n<li>首先打开Charles，安装证书到本地, 点击‘安装证书’，全点下一步，安装完成</li>\n</ul>\n<p><img src=\"http://oy9tlpm12.bkt.clouddn.com/1.png\" alt></p>\n<ul>\n<li>打开 <code>工具-&gt;远程映射</code> 添加线上域名于本地（开发环境）服务的映射</li>\n</ul>\n<p><img src=\"http://oy9tlpm12.bkt.clouddn.com/22.png\" alt></p>\n<ul>\n<li><p>打开 <code>代理 -&gt; 代理设置</code> 选择<code>代理</code>选项卡，默认的HTTP Proxy的值是8888，这个端口号需要记着，后边在微信web开发者工具里边要用到的</p>\n</li>\n<li><p>选择<code>ssl</code>选项卡,如下设置</p>\n</li>\n</ul>\n<p><img src=\"http://oy9tlpm12.bkt.clouddn.com/6.png\" alt></p>\n<ul>\n<li>选择<code>windows</code>选项卡，点击启用以下选项</li>\n</ul>\n<p><img src=\"http://oy9tlpm12.bkt.clouddn.com/3.png\" alt></p>\n<ul>\n<li>确认 <code>工具-&gt;windows代理</code> 打上勾</li>\n</ul>\n<p><img src=\"http://oy9tlpm12.bkt.clouddn.com/4.png\" alt></p>\n<ul>\n<li>登录微信开发者工具，选择手动设置代理，然后填写本地的IP，以及前边在Charles中设置的代理端口号。enjoy it!</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>之前在做公司小程序开发的时候，没有发现本地调试的方法，所以每次写完接口必须要把代码上传远程服务器进行测试，这种处理不仅不优雅，更要命的是极度拖延了开发进度，不过因为第一次接触小程序，完全不熟悉其开发原理，所以一直没有机会去改善开发逻辑。直至公司小程序开发完成后，才在网上去搜寻解决文案，终于找到本地开发调试的方法，并记录下来。<br>","more":"</p>\n<h1 id=\"安装charles\"><a href=\"#安装charles\" class=\"headerlink\" title=\"安装charles\"></a>安装charles</h1><p>charles是一个http代理软件(以前用过fiddle,应该类似于fiddle，不过前者功能更强大)，有windows和mac版，软件收费，基于java，所以需要电脑上装有<a href=\"http://www.java.com\" target=\"_blank\" rel=\"noopener\">java</a>，所以我下载的是<a href=\"https://pan.baidu.com/s/1dHaY9ah\" target=\"_blank\" rel=\"noopener\">破解版</a>(穷，有钱的可以支持一下正版)， 密码：3ghf。下载后直接解压运行。</p>\n<h1 id=\"开始配置\"><a href=\"#开始配置\" class=\"headerlink\" title=\"开始配置\"></a>开始配置</h1><p>如果已经安装好了软件，那么就开始配置。</p>\n<ul>\n<li>首先打开Charles，安装证书到本地, 点击‘安装证书’，全点下一步，安装完成</li>\n</ul>\n<p><img src=\"http://oy9tlpm12.bkt.clouddn.com/1.png\" alt></p>\n<ul>\n<li>打开 <code>工具-&gt;远程映射</code> 添加线上域名于本地（开发环境）服务的映射</li>\n</ul>\n<p><img src=\"http://oy9tlpm12.bkt.clouddn.com/22.png\" alt></p>\n<ul>\n<li><p>打开 <code>代理 -&gt; 代理设置</code> 选择<code>代理</code>选项卡，默认的HTTP Proxy的值是8888，这个端口号需要记着，后边在微信web开发者工具里边要用到的</p>\n</li>\n<li><p>选择<code>ssl</code>选项卡,如下设置</p>\n</li>\n</ul>\n<p><img src=\"http://oy9tlpm12.bkt.clouddn.com/6.png\" alt></p>\n<ul>\n<li>选择<code>windows</code>选项卡，点击启用以下选项</li>\n</ul>\n<p><img src=\"http://oy9tlpm12.bkt.clouddn.com/3.png\" alt></p>\n<ul>\n<li>确认 <code>工具-&gt;windows代理</code> 打上勾</li>\n</ul>\n<p><img src=\"http://oy9tlpm12.bkt.clouddn.com/4.png\" alt></p>\n<ul>\n<li>登录微信开发者工具，选择手动设置代理，然后填写本地的IP，以及前边在Charles中设置的代理端口号。enjoy it!</li>\n</ul>"},{"title":"常用的工具库","date":"2018-01-26T06:58:08.000Z","_content":"\n# 前端\n\n## 动画\n\n+ [GreenSock | GSAP](https://greensock.com/gsap): CSS动画类库\n+ [easing](http://robertpenner.com/easing/): 函数式动画库\n\n<!-- more -->\n\n## 图表\n\n+ [Echarts](https://github.com/ecomfe/echarts): 百度开发的图表库\n\n## 学习资源\n\n+ [cssreference](http://cssreference.io/): 一个动态展示各种CSS的学习库","source":"_posts/常用的工具库.md","raw":"---\ntitle: 常用的工具库\ndate: 2018-01-26 14:58:08\ntags:\n    - 工具\n    - 网站\n---\n\n# 前端\n\n## 动画\n\n+ [GreenSock | GSAP](https://greensock.com/gsap): CSS动画类库\n+ [easing](http://robertpenner.com/easing/): 函数式动画库\n\n<!-- more -->\n\n## 图表\n\n+ [Echarts](https://github.com/ecomfe/echarts): 百度开发的图表库\n\n## 学习资源\n\n+ [cssreference](http://cssreference.io/): 一个动态展示各种CSS的学习库","slug":"常用的工具库","published":1,"updated":"2023-05-31T16:56:15.289Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clibygb5w000wf4fm1fgh11yr","content":"<h1 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h1><h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><ul>\n<li><a href=\"https://greensock.com/gsap\" target=\"_blank\" rel=\"noopener\">GreenSock | GSAP</a>: CSS动画类库</li>\n<li><a href=\"http://robertpenner.com/easing/\" target=\"_blank\" rel=\"noopener\">easing</a>: 函数式动画库</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"图表\"><a href=\"#图表\" class=\"headerlink\" title=\"图表\"></a>图表</h2><ul>\n<li><a href=\"https://github.com/ecomfe/echarts\" target=\"_blank\" rel=\"noopener\">Echarts</a>: 百度开发的图表库</li>\n</ul>\n<h2 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h2><ul>\n<li><a href=\"http://cssreference.io/\" target=\"_blank\" rel=\"noopener\">cssreference</a>: 一个动态展示各种CSS的学习库</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h1><h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><ul>\n<li><a href=\"https://greensock.com/gsap\" target=\"_blank\" rel=\"noopener\">GreenSock | GSAP</a>: CSS动画类库</li>\n<li><a href=\"http://robertpenner.com/easing/\" target=\"_blank\" rel=\"noopener\">easing</a>: 函数式动画库</li>\n</ul>","more":"<h2 id=\"图表\"><a href=\"#图表\" class=\"headerlink\" title=\"图表\"></a>图表</h2><ul>\n<li><a href=\"https://github.com/ecomfe/echarts\" target=\"_blank\" rel=\"noopener\">Echarts</a>: 百度开发的图表库</li>\n</ul>\n<h2 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h2><ul>\n<li><a href=\"http://cssreference.io/\" target=\"_blank\" rel=\"noopener\">cssreference</a>: 一个动态展示各种CSS的学习库</li>\n</ul>"},{"title":"webpack","date":"2019-10-23T06:54:32.000Z","_content":"\n## 概念\n\n> 本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包工具。当 webpack 处理应用程序时，它会在内部构建一个**依赖图(dependency graph)**，此依赖图会映射项目所需的每个模块，并生成一个或多个 bundle。\n\n上面一段话摘自官方文档，由此引申出下面几个问题\n\n1. 什么是依赖图？依赖图是怎么映射项目所需的模块？\n2. bundle 是什么？\n\n<!-- more -->\n\n### 依赖图\n\nwebpack 开箱即用，可以无需使用任何配置文件。然而，webpack 会假定项目的入口起点为工程目录 `src/index`，然后会在 `dist/main.js` 输出结果，并且在生产环境开启压缩和优化。\n\n也就是说，在没有任何配置文件和命令行传参的情况下，会有一个默认的入口起点 `src/index` (如果自己配置了入口就会使用配置好的)，直接执行\n\n```cmd\nwebpack\n```\n\nwebpack 会将 `mode` 的默认值设置为 `production`并开始打包，从 入口起点 开始，webpack 递归地构建一个依赖图，这个依赖图包含着应用程序所需的每个模块，然后将所有这些模块打包为少量的 bundle - 通常只有一个 - 可由浏览器加载。\n\n所以依赖图的生成是首先取决于入口文件，当然，在入口文件中如果也引入了其它文件，那么其它文件也会变成依赖图一部分。\n\n### bundle\n\nbundle 就是 webpack 生成的文件，bundle 里包含多个 chunk - 代码块，可能多个 bundle 会存在相同的代码块，所以需要用代码分离来共享相同代码块部分\n\n### process.env.NODE_ENV\n\n在 wepback4 中，存在两种模式，`development`、`production`，webpack 自动会引入`definePlugin`，这个插件会决定在开发环境与生产环境(dev-vs-prod)下，server tools(服务期工具)、build scripts(构建脚本) 和 client-side libraries(客户端库) `process.env.NODE_ENV`的值，然而，在 `webpack.config.js` 中是不会存在这个值的，要在配置文件中使用`process.env.NODE_ENV`，有以下两种方法\n\n- 命令行中传入`--env.NODE_ENV production|development`， `webpack.config.js` 中导出函数\n\n```javascript\n// webpack.config.js\nmodule.exports = env => {\n  console.log(env.NODE_ENV); // production|development\n};\n```\n\n- `cross-env`传参\n\n```javascript\n// 安装cross-env\nyarn add -D cross-env\n\n// package.json\ncross-env NODE_ENV=production webpack ./webpack.config.js\n\nmodule.exports = {\n  console.log(process.env.NODE_ENV) // production|development\n}\n```\n\n## 入口 entry\n\n入口的写法，\n\n```javascript\n// webpack.config.js\nmodule.exports = {\n  // normal\n  entry: './path/to/my/entry/file.js'\n  // 对象语法\n  // 使用 optimization.splitChunks 为页面间共享的应用程序代码创建 bundle。\n  // 由于入口起点增多，多页应用能够复用入口起点之间的大量代码/模块\n  // 如果输出为library 可以使用 array 语法暴露所有模块\n  // 参考 https://github.com/webpack/webpack/tree/master/examples/multi-part-library\n  entry: {\n    main: './path/to/my/entry/file.js'\n  }\n  // 数组\n  // 这样传会合并多个文件为一个bundle文件\n  // 如果输出为library时只会暴露最后一个模块\n  entry: ['path1', 'path2']\n  // 动态入口 可以接收远程服务器的数据来决定入口，感觉没什么用\n  entry: () => './demo'\n  // 或\n  entry: () => new Promise((resolve) => resolve(['./demo', './demo2']))\n};\n\n\n```\n\n## 输出 output\n\n输出主要是告诉 webpack 打包后的 bundle 放在哪里，以及如何命名这些文件\n\n```javascript\nconst path = require(\"path\");\n\nmodule.exports = {\n  // ...\n  // normal\n  output: {\n    path: path.resolve(__dirname, \"dist\"), // 打包后的目录 URL以HTML页面为基准\n    filename: \"my-first-webpack.bundle.js\", // 文件命名\n    publicPath: \"assets/\", // 相对于 html 页面\n    publicPath: \"/assets/\" // 相对于服务器根目录\n  },\n  // 多个入口起点 使用占位符\n  output: {\n    filename: \"[name].js\"\n    // 输出文件 ./dist/name1.js  ./dist/name2.js\n  },\n  // cdn hash\n  output: {\n    path: \"/home/proj/cdn/assets/[hash]\", // 此处打包后会生成到硬盘根路径\n    publicPath: \"http://cdn.example.com/assets/[hash]/\" // cdn路径\n  }\n};\n```\n\n### 在运行时设置 publicPath\n\n所谓运行时，即在打包完成后运行应用程序的时候。一般在 output 中配置的 publicPath 是固定的，但是，我们可能需要在运行的时候动态加载 publicPath,webpack 暴露了一个名为 **webpack_public_path** 的全局变量，通过改变这个变量的值达到我们的目的。\n\n1. 创建一个文件`public_path.js`\n\n```javascript\n__webpack_public_path__ = \"http://some.cdn.com/some\";\n```\n\n2. 在入口文件中引入\n\n```javascript\n// entry.js\nimport \"public_path.js\";\nimport \"./app.js\";\n```\n\n> 如果在 entry 文件中使用 ES2015 module import，则会在 import 之后进行 **webpack_public_path** 赋值。在这种情况下，你必须将 public path 赋值移至一个专用模块中，然后将它的 import 语句放置到 entry.js 最上面\n\n### chunkFilename\n\n定义非入口 chunk 文件的名称。这个在动态导入时可以设置分出来的文件名\n\n如下，在文件中使用 import()时，webpack 会在打包时将 a.js 分离出去，成为一个新的文件，这个文件在没有设置 chunkFilename 时会自动使用`[模块id].js`命名(如果注释名存在则使用注释名), 当然，使用注释命名也可以\n\n```javascript\n// entry.js\nimport('./a.js') // 输出文件 0.js\nimport(/* webpackChunkName: \"chunk1\" */'./a.js') // 输出文件 chunk1.js\n\n// 设置chunkFilename后\noutput: {\n  chunkFilename: '[name].[chunkhash].js' // name 一般是模块id 如果有注释名则使用注释名\n},\n\n// 输出\n// 0.[chunkhash].js\n// chunk1.[chunkhash].js\n```\n\n### crossOriginLoading | jsonpScriptType | chunkLoadTimeout\n\ncrossOriginLoading，只用于 `target` 是 `web`，使用了通过 script 标签的 JSONP 来按需加载 chunk。通过加载资源的 origin 信息来判断是否跨域，比如在 cdn 加载 chunk 的时候肯定是跨域的，那么此设置就会生效\n\njsonpScriptType 设置 jsonp 中 script 的 type 属性\n\nchunkLoadTimeout 设置 script 中超时时间，默认 120s\n\n```javascript\nif (script.src.indexOf(window.location.origin + \"/\") !== 0) {\n  script.crossOrigin = \"anonymous\";\n}\n```\n\n### filename 中的 chunkhash contenthash\n\nchunkhash 和 contenthash 的区别在于，都是 chunk 内容，不过 contenthash 是通过`ExtractTextWebpackPlugin`提取出来的，如果 js 文件改变打包后 css 内容即使没变 css hash 也会改变\n\n### libraryTarget\n\n配置如何暴露 library。\n\n1. **var**. （默认值）当 library 加载完成，入口起点的返回值将分配给 library 变量，会覆盖掉已经定义过的全局变量（谨慎使用）\n\n```javascript\noutput.library = \"someLibName\";\n// 打包后，加载完库后会把库对象分配给全局变量 someLibName\nvar someLibName = module.exports; // 输出结果，如果在之前存在全局变量someLibName会覆盖\n```\n\n2. **assign**. 比 `'var'`少了个 var，可以说没区别\n\n```javascript\nsomeLibName = module.exports; // 输出结果\n```\n\n3. **this**.\n\n- output.library 没有赋值，webpack 将把 library 对象上所有的属性挂载到浏览器的 this 上，也就是 window\n\n```javascript\n(function(e, a) { for(var i in a) e[i] = a[i]; }(this, module.exports)\n// 遍历exports对象并挂载到this\n```\n\n- `output.library = 'someLibName'`则会将对象挂载到`this['someLibName']`\n\n```javascript\nthis[\"someLibName\"] = module.exports;\n```\n\n4. **window** 同上\n\n```javascript\nwindow[\"someLibName\"] = module.exports;\n```\n\n5. **global** 分配给 global 对象\n\n```javascript\nglobal[\"someLibName\"] = module.exports;\n```\n\n6. **commonjs** 分配给 exports 对象。这个名称也意味着，模块用于 CommonJS 环境\n\n```javascript\nexports[\"someLibName\"] = module.exports;\n\nrequire(\"someLibName\").doSomething();\n```\n\n7. **commonjs2** 模块定义系统.用于`CommonJS`系统，入口起点的返回值将分配给 `module.exports` 对象\n\n与`commonjs`的区别是不用指定 output.library\n\n> 模块定义系统会使 `bundle` 带有更多的头部处理，以便兼容各种模块系统\n\n```javascript\nmodule.exports = _entry_return_;\n\nrequire(\"MyLibrary\").doSomething();\n```\n\n8. **amd** 将 library 导出为 AMD 模块\n\n可以由 RequireJS 或任何兼容的模块加载器加载。直接加载会报错。\n\n```javascript\n// MyLibrary.js\ndefine(\"MyLibrary\", [], function() {\n  return _entry_return_;\n});\n\n// 浏览器 使用前需要先引入RequireJS\nrequire([\"MyLibrary\"], function(MyLibrary) {\n  // 使用 library 做一些事……\n});\n```\n\n9. **umd** 将 library 导出为所有的模块定义下都可运行的方式。既可以在 CommonJS, AMD 环境下运行，也可以在浏览器环境下且无需 requireJS 的情况下运行。\n\n```javascript\n// webpack配置\nmodule.exports = {\n  //...\n  output: {\n    library: \"MyLibrary\", // 如果不设置的话，webpack会把exports对象上的所有属性挂载到全局变量上\n    libraryTarget: \"umd\"\n  }\n};\n// 也可以给每个导出环境配置不同的名称\nmodule.exports = {\n  //...\n  output: {\n    library: {\n      root: \"MyLibrary\",\n      amd: \"my-library\",\n      commonjs: \"my-common-library\"\n    },\n    libraryTarget: \"umd\"\n  }\n};\n\n// MyLibrary.js\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === \"object\" && typeof module === \"object\")\n    module.exports = factory();\n  else if (typeof define === \"function\" && define.amd) define([], factory);\n  else if (typeof exports === \"object\") exports[\"MyLibrary\"] = factory();\n  else root[\"MyLibrary\"] = factory();\n})(typeof self !== \"undefined\" ? self : this, function() {\n  return _entry_return_; // 此模块返回值，是入口 chunk 返回的值\n});\n```\n\n10. **jsonp** 将导出结果包裹在以 library 变量作为函数名的容器中\n\n```javascript\nlibrary: \"MyLibrary\";\n\n// MyLibrary.js\nMyLibrary(_entry_return_);\n```\n\n### exports、module.exports 和 export、export default\n\n> require: node 和 es6 都支持的引入\n> export / import : 只有 es6 支持的导出引入\n> module.exports / exports: 只有 node 支持的导出\n\n#### node 模块\n\n- commonjs 导入导出 nodejs 支持，浏览器不支持（引用 requirejs 也可以支持）。**在 webpack 打包时，如果使用了 module.exports 作为最终输出时，在浏览器中运行是获取不到模块中的变量的**\n\nNode 里面的模块系统遵循的是 CommonJS 规范。CommonJS 定义的模块分为: 模块标识(module)、模块定义(exports) 、模块引用(require)。\n当 Node 执行一个文件时，会为文件生成一个 exports 和 module 对象，而 module 对象的 exports 属性和 exports 指向同一个内存地址。\n\n```javascript\nexports = module.exports = {};\n```\n\n当 Node 导入某个文件模块时，实际上是导入文件的 module.exports 属性。重新给 exports 属性赋一个对象会导致 exports 属性与 module.exports 断开连接。\n\n- es6 导入导出 主要用于浏览器加载模块，当然 nodejs 也支持\n  1.  export 与 export default 均可用于导出常量、函数、文件、模块等\n  2.  在一个文件或模块中，export、import 可以有多个，export default 仅有一个\n  3.  通过 export 方式导出，在导入时要加{ }，export default 则不需要\n  4.  export 能直接导出变量表达式，export default 不行。\n\n```javascript\n// testEs6Export.js\n\"use strict\";\n//导出变量\nexport const a = \"100\";\n\n//导出方法\nexport const dogSay = function() {\n  console.log(\"wang wang\");\n};\n\n//导出方法第二种\nfunction catSay() {\n  console.log(\"miao miao\");\n}\nexport { catSay };\n\n//export default导出\nconst m = 100;\nexport default m;\n\n//\n// index.js\n\nimport { dogSay, catSay } from \"./testEs6Export\"; //导出了 export 方法\nimport m from \"./testEs6Export\"; //导出了 export default\n\nimport * as testModule from \"./testEs6Export\"; //as 集合成对象导出\nconsole.log(testModule.m); // undefined , 因为  as 导出是 把 零散的 export 聚集在一起作为一个对象，而export default 是导出为 default属性。\nconsole.log(testModule.default); // 100\n```\n\n#### commonjs vs commonjs2\n\n那么 webpack 打包 library 时 commonjs 与 commonjs2 的区别就是 commonjs 必须赋值一个变量作为 exports 的属性，commonjs2 则是直接导出为 `module.exports` 的对象\n\n#### 缓存\n\n利用缓存技术可以合理利用浏览器缓存减少请求，加快网站的加载速度。\n\n```javascript\nmodule.exports = {\n  output: {\n    // 改为contenthash 通过内容来映射hash,内容变化则hash变，内容不变hash不变\n    filename: \"[name].[contenthash].js\"\n  },\n  optimization: {\n    // 分离runtime\n    runtimeChunk: \"single\",\n    // 将第三方库提取到单独的vendor文件中\n    splitChunks: {\n      cacheGroups: {\n        vendor: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          name: \"vendors\",\n          chunks: \"all\"\n        }\n      }\n    },\n    plugins: [\n      new webpack.HashedModuleIdsPlugin() // 保持内容不变的情况下hash也不变\n    ]\n  }\n};\n```\n\n### output.umdNamedDefine\n\n当使用了 `libraryTarget: \"umd\"`，设置：\n\n```javascript\nmodule.exports = {\n  //...\n  output: {\n    umdNamedDefine: true\n  }\n};\n\n// 打包后\nif (typeof define === \"function\" && define.amd)\n  define(\"someLibName\" /*这里会加上library字段的值*/, [], factory);\n```\n\n### output.pathinfo\n\n开启后多了下面的注释部分，会导致造成垃圾回收性能压力，建议还是关闭\n\n```javascript\n/***/ \"tjUo\":\n/*!**********************!*\\\n  !*** ./src/index.js ***!\n  \\**********************/\n/*! exports provided: a */\n/***/\n```\n\n## 模式 mode\n\n> 值有：`none`, `development`, `production`（默认）。设置 `NODE_ENV` 并不会自动地设置 mode。\n\n### 用法\n\n```javascript\n// 配置文件\nmodule.exports = {\n  mode: 'development'\n}\n\n// cli传参\nwebpack --mode=development\n```\n\n| 选项        | 描述                                                                                                                                                                                                                                       |\n| ----------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| development | 会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。                                                                                                                           |\n| production  | 会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 TerserPlugin。 |\n| none        | 退出任何默认优化选项.                                                                                                                                                                                                                      |\n\n#### `mode: development`\n\n```javascript\n// webpack.development.config.js\nmodule.exports = {\n+ mode: 'development'\n- devtool: 'eval',\n- cache: true, // 缓存生成的 webpack 模块和 chunk，来改善构建速度。缓存默认在观察模式(watch mode)启用\n- performance: {\n-   hints: false // false | \"error\" | \"warning\" 是否开启打包后文件过大的性能提示 false不开启，warning 展示警告 error展示错误(开发环境中会展示在浏览器的工作台中)。文件大小可以限制可以自由配置\n- },\n- output: {\n-   pathinfo: true\n- },\n- optimization: {\n-   namedModules: true,\n-   namedChunks: true,\n-   nodeEnv: 'development',\n-   flagIncludedChunks: false,\n-   occurrenceOrder: false,\n-   sideEffects: false,\n-   usedExports: false,\n-   concatenateModules: false,\n-   splitChunks: {\n-     hidePathInfo: false,\n-     minSize: 10000,\n-     maxAsyncRequests: Infinity,\n-     maxInitialRequests: Infinity,\n-   },\n-   noEmitOnErrors: false,  // 设置为true 则会在编译出错时跳过生成阶段，避免生成错误打包文件\n-   checkWasmTypes: false,\n-   minimize: false,\n- },\n- plugins: [\n-   new webpack.NamedModulesPlugin(),\n-   new webpack.NamedChunksPlugin(),\n-   new webpack.DefinePlugin({ \"process.env.NODE_ENV\": JSON.stringify(\"development\") }),\n- ]\n}\n```\n\n## optimization\n\nwebpack 4 特有的优化选项，可以进行压缩代码，分包等操作\n\n### minimize\n\n开启后使用[TerserPlugin](https://webpack.docschina.org/plugins/terser-webpack-plugin/)压缩。`mode:production`时自动开启\n\n### minimizer\n\n测试后只在`mode: production`时有效，可以配置 terserPlugin 的参数\n\n### splitChunks\n\n用于分割代码块，提取出公用代码块。在多页面项目或者动态导入模块的时候非常有用，能减少初始加载代码的大小，提升网页首屏的加载速度。\n\n`splitChunks`默认只影响按需块，当然也可以通过设置 `chunks: 'initial'`来拆分公用初始代码块。\n\n> `splitChunks` 总是会提取按需块\n\n先看看 webpack 中默认的`splitChunks`设置\n\n```javascript\nmodule.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      // 可设置的值有 initial, async, all\n      // all 最佳配置，当分离的块既有同步又有按需引入时，共享代码\n      // initial 当分离的块既有同步又有按需引入时，不共享代码\n      // async 只拆分按需引入块\n      chunks: \"async\",\n      // 当代码块大于这个值的时候就会被拆分出来\n      minSize: 30000,\n      // 当代码块大于这个值的时候会继续拆分（如果还可以拆分的话） 0表示不拆分\n      maxSize: 0,\n      // 当代码块被引用的次数超过这个数的时候才会拆分\n      minChunks: 1,\n      // 最多能拆分的按需块 >= 1\n      maxAsyncRequests: 5,\n      // 最多能拆分的初始块 >= 1  如果设置了maxSize，并且能拆分，可能会拆分出更多的块\n      maxInitialRequests: 3,\n      // 块文件名分隔符\n      automaticNameDelimiter: \"~\",\n      // 分割块的名字。如果传入 true 将会自动生成一个基于块组和缓存组键的名称\n      // 也可以用函数生成名称\n      // name (module, chunks, cacheGroupKey) {\n      //   // generate a chunk name...\n      //   return; //...\n      // },\n      name: true,\n      cacheGroups: {\n        vendors: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          priority: -10\n        },\n        default: {\n          minChunks: 2,\n          priority: -20,\n          reuseExistingChunk: true\n        }\n      }\n    }\n  }\n};\n```\n\n#### 多页面分割代码\n\n[栗子地址](https://github.com/kingRywen/webpack-test/tree/splitChunk)\n\n```javascript\nlet entry = {\n  // 多个入口\n  index: \"./src/index.js\",\n  pageA: \"./src/a.js\",\n  pageB: \"./src/b.js\",\n  pageC: \"./src/c.js\",\n  pageD: \"./src/d.js\"\n};\nlet _chunks = {};\n\n// 添加分离出来的runtime和node_modules中的库，以及当前页的chunk到chunk映射变量_chunks中\nObject.keys(entry).forEach(key => {\n  _chunks[key] = [key, \"runtime\", \"vendors\"];\n});\n\nconst htmls = Object.keys(entry).map(\n  name =>\n    new HtmlWebpackPlugin({\n      filename: name + \".html\",\n      template: \"template.pug\",\n      title: name,\n      chunks: _chunks[name]\n    })\n);\n\nmodule.exports = {\n  mode: \"production\",\n  entry,\n  // ...\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    crossOriginLoading: \"anonymous\",\n    filename: \"[name].[contenthash].js\",\n    pathinfo: false\n  },\n  performance: {\n    hints: false\n  },\n  optimization: {\n    minimize: true,\n    runtimeChunk: \"single\",\n    splitChunks: {\n      chunks: \"all\",\n      minSize: 30000,\n      maxSize: 0,\n      minChunks: 2,\n      maxAsyncRequests: 20,\n      maxInitialRequests: 20,\n      automaticNameDelimiter: \"~\",\n      // 关键命名函数，将引入次数2次以上的公共业务代码分割出来，并命名\n      // 命名的同时将chunk推入_chunks中，改变入口htmlwebpack中chunks的引入\n      name(module, chunks, cacheGroupKey) {\n        let name = chunks.map(el => el.name).join(\"~\");\n        for (let index = 0; index < chunks.length; index++) {\n          const c = chunks[index];\n          if (c.name && _chunks[c.name] && !~_chunks[c.name].indexOf(name)) {\n            _chunks[c.name].push(name);\n          }\n        }\n        return name;\n      },\n      cacheGroups: {\n        // 分割库代码\n        commons: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          name: \"vendors\",\n          chunks: \"all\"\n        }\n      }\n    }\n  }\n  // ...\n};\n```\n\n### 模块(module)\n\nwebpack 模块是管理各种文件资源的途径，通过 loader 能解析非.js 文件\n\n#### css\n\n##### 普通 css\n\n通过`import './style.css'`方法引入样式文件，在没有配置 module 的情况下 webpack 是不会正常解析 css 文件的，所以我们必须引入`style-loader`来将引入的 css 文件解析出来。当然也要引入`css-loader`来解析 css 文件的内容,css-loader 也能解析 css 中的引入：`@import`及`url()`（可以配置不解析某些资源）\n\n```javascript\n// 安装\nyarn add -D style-loader\n// webpack.config.js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          // 区分生产环境和开发环境,生产环境时提取css作为单独文件\n          process.env.NODE_ENV == 'production' ? MiniCssExtractPlugin.loader : 'style-loader', {\n            loader: 'css-loader',\n            options:{\n              modules: true, // css 模块化\n              sourceMap: true // 开启 sourceMap\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n##### sass\n\n```javascript\n// 安装\nyarn add sass-loader node-sass -D\n\n// webpack.config.js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.scss$/,\n        use: [\n          process.env.NODE_ENV == 'production' ? MiniCssExtractPlugin.loader : 'style-loader',\n          {\n            loader: 'css-loader',\n            options: {\n              sourceMap: true\n            }\n          },\n          'sass-loader'\n        ]\n      }\n    ]\n  }\n}\n```\n\n#####　 postcss\n\n在[PostCSS](http://postcss.org/)官网有着这样的对 PostCSS 特性介绍，箭头后面是对应功能的插件及其 github 地址。\n\n1. increase code readability （增加代码可读性，补全） → [Autoprefixer](https://github.com/postcss/autoprefixer)\n2. Use tomorrow's CSS ,today!（使用下代 css） → [postcss-cssnext](https://github.com/MoOx/postcss-cssnext/)\n3. The end of global CSS（模块化 css）→ [postcss-modules](https://github.com/css-modules/postcss-modules)\n4. Avoid errors in your CSS（错误提示） → [stylelint](https://github.com/stylelint/stylelint)\n5. Powerful grid CSS（栅格系统） → lost →[lost](https://github.com/peterramsing/lost)\n\n##### webpack 中使用 postcss\n\n`PostCSS Preset Env`可以将现代 CSS 转换为大多数浏览器可以理解的内容，并根据目标浏览器或运行时环境确定所需的 polyfill。\n\n启用 sourceMap 支持，postcss-loader 将使用其他加载器提供的先前的 sourceMap 并进行相应的更新。除`style-loader`之外的 loader 都需要配置`sourceMap: true`\n\n```javascript\n// 安装\nyarn add -D postcss-preset-env\n\n// webpack.config.js\nmodule.exports = {\n  rules: [\n    {\n      test: /\\.css$/,\n      use: [\n      'style-loader',\n      {\n        loader: \"css-loader\",\n        options: {\n          sourceMap: true,\n          // 必须配置，影响@import导入的文件中的加载器的数量，\n          // 如果不配置@import导入文件将不会应用后面的加载器\n          importLoaders: 2\n        }\n      },\n      {\n        loader: 'postcss-loader',\n        options: {\n          sourceMap: true,\n          indent: 'postcss',\n          plugins: () => [\n            // 使用 PostCSS Preset Env\n            // postcss-preset-env已经预置autoprefixer，无需单独添加它\n            postcssPresetEnv({\n              stage: 3,\n              // 支持任何标准的browserslist配置，可以是.browserslistrc文件，package.json中的browserslist或browserslist环境变量。\n              browsers: 'last 2 versions'\n            })\n          ]\n        }\n      }]\n    }\n  ]\n}\n```\n\n#### images 图像\n\n```javascript\n// 安装\nyarn add -D url-loader\n\n// webpack.config.js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|svg|jpg|gif)$/,\n        // url-loader将少于limit的图像文件转化为dataUrl来减少请求\n        loader: 'url-loader',\n        options: {\n          // 当图像大于limit时，会使用备用的loader\n          fallback: {\n            loader: 'file-loader',\n            options: {\n              name: 'img/[name].[hash:8].[ext]'\n            }\n          },\n          limit: 4096\n        }\n      }\n    ]\n  }\n}\n```\n\n#### fonts 字体\n\n`file-loader` 和 `url-loader` 可以接收并加载任何文件，所以也可以用来加载 fonts 字体文件\n\n```javascript\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(woff|woff2|eot|ttf|otf)$/,\n        loader: \"url-loader\",\n        options: {\n          fallback: {\n            loader: \"file-loader\",\n            options: {\n              name: \"img/[name].[hash:8].[ext]\"\n            }\n          },\n          limit: 4096\n        }\n      }\n    ]\n  }\n};\n```\n\n#### 数据 json xml\n\n加载的资源还有数据，如 JSON 文件，CSV、TSV 和 XML。类似于 NodeJS，JSON 支持实际上是内置的，也就是说 `import Data from './data.json'` 默认将正常运行\n\n```javascript\n+       {\n+         test: /\\.(csv|tsv)$/,\n+         use: [\n+           'csv-loader'\n+         ]\n+       },\n+       {\n+         test: /\\.xml$/,\n+         use: [\n+           'xml-loader'\n+         ]\n+       }\n```\n","source":"_posts/webpack.md","raw":"---\ntitle: webpack\ndate: 2019-10-23 14:54:32\ntags:\n  - webpack\n---\n\n## 概念\n\n> 本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包工具。当 webpack 处理应用程序时，它会在内部构建一个**依赖图(dependency graph)**，此依赖图会映射项目所需的每个模块，并生成一个或多个 bundle。\n\n上面一段话摘自官方文档，由此引申出下面几个问题\n\n1. 什么是依赖图？依赖图是怎么映射项目所需的模块？\n2. bundle 是什么？\n\n<!-- more -->\n\n### 依赖图\n\nwebpack 开箱即用，可以无需使用任何配置文件。然而，webpack 会假定项目的入口起点为工程目录 `src/index`，然后会在 `dist/main.js` 输出结果，并且在生产环境开启压缩和优化。\n\n也就是说，在没有任何配置文件和命令行传参的情况下，会有一个默认的入口起点 `src/index` (如果自己配置了入口就会使用配置好的)，直接执行\n\n```cmd\nwebpack\n```\n\nwebpack 会将 `mode` 的默认值设置为 `production`并开始打包，从 入口起点 开始，webpack 递归地构建一个依赖图，这个依赖图包含着应用程序所需的每个模块，然后将所有这些模块打包为少量的 bundle - 通常只有一个 - 可由浏览器加载。\n\n所以依赖图的生成是首先取决于入口文件，当然，在入口文件中如果也引入了其它文件，那么其它文件也会变成依赖图一部分。\n\n### bundle\n\nbundle 就是 webpack 生成的文件，bundle 里包含多个 chunk - 代码块，可能多个 bundle 会存在相同的代码块，所以需要用代码分离来共享相同代码块部分\n\n### process.env.NODE_ENV\n\n在 wepback4 中，存在两种模式，`development`、`production`，webpack 自动会引入`definePlugin`，这个插件会决定在开发环境与生产环境(dev-vs-prod)下，server tools(服务期工具)、build scripts(构建脚本) 和 client-side libraries(客户端库) `process.env.NODE_ENV`的值，然而，在 `webpack.config.js` 中是不会存在这个值的，要在配置文件中使用`process.env.NODE_ENV`，有以下两种方法\n\n- 命令行中传入`--env.NODE_ENV production|development`， `webpack.config.js` 中导出函数\n\n```javascript\n// webpack.config.js\nmodule.exports = env => {\n  console.log(env.NODE_ENV); // production|development\n};\n```\n\n- `cross-env`传参\n\n```javascript\n// 安装cross-env\nyarn add -D cross-env\n\n// package.json\ncross-env NODE_ENV=production webpack ./webpack.config.js\n\nmodule.exports = {\n  console.log(process.env.NODE_ENV) // production|development\n}\n```\n\n## 入口 entry\n\n入口的写法，\n\n```javascript\n// webpack.config.js\nmodule.exports = {\n  // normal\n  entry: './path/to/my/entry/file.js'\n  // 对象语法\n  // 使用 optimization.splitChunks 为页面间共享的应用程序代码创建 bundle。\n  // 由于入口起点增多，多页应用能够复用入口起点之间的大量代码/模块\n  // 如果输出为library 可以使用 array 语法暴露所有模块\n  // 参考 https://github.com/webpack/webpack/tree/master/examples/multi-part-library\n  entry: {\n    main: './path/to/my/entry/file.js'\n  }\n  // 数组\n  // 这样传会合并多个文件为一个bundle文件\n  // 如果输出为library时只会暴露最后一个模块\n  entry: ['path1', 'path2']\n  // 动态入口 可以接收远程服务器的数据来决定入口，感觉没什么用\n  entry: () => './demo'\n  // 或\n  entry: () => new Promise((resolve) => resolve(['./demo', './demo2']))\n};\n\n\n```\n\n## 输出 output\n\n输出主要是告诉 webpack 打包后的 bundle 放在哪里，以及如何命名这些文件\n\n```javascript\nconst path = require(\"path\");\n\nmodule.exports = {\n  // ...\n  // normal\n  output: {\n    path: path.resolve(__dirname, \"dist\"), // 打包后的目录 URL以HTML页面为基准\n    filename: \"my-first-webpack.bundle.js\", // 文件命名\n    publicPath: \"assets/\", // 相对于 html 页面\n    publicPath: \"/assets/\" // 相对于服务器根目录\n  },\n  // 多个入口起点 使用占位符\n  output: {\n    filename: \"[name].js\"\n    // 输出文件 ./dist/name1.js  ./dist/name2.js\n  },\n  // cdn hash\n  output: {\n    path: \"/home/proj/cdn/assets/[hash]\", // 此处打包后会生成到硬盘根路径\n    publicPath: \"http://cdn.example.com/assets/[hash]/\" // cdn路径\n  }\n};\n```\n\n### 在运行时设置 publicPath\n\n所谓运行时，即在打包完成后运行应用程序的时候。一般在 output 中配置的 publicPath 是固定的，但是，我们可能需要在运行的时候动态加载 publicPath,webpack 暴露了一个名为 **webpack_public_path** 的全局变量，通过改变这个变量的值达到我们的目的。\n\n1. 创建一个文件`public_path.js`\n\n```javascript\n__webpack_public_path__ = \"http://some.cdn.com/some\";\n```\n\n2. 在入口文件中引入\n\n```javascript\n// entry.js\nimport \"public_path.js\";\nimport \"./app.js\";\n```\n\n> 如果在 entry 文件中使用 ES2015 module import，则会在 import 之后进行 **webpack_public_path** 赋值。在这种情况下，你必须将 public path 赋值移至一个专用模块中，然后将它的 import 语句放置到 entry.js 最上面\n\n### chunkFilename\n\n定义非入口 chunk 文件的名称。这个在动态导入时可以设置分出来的文件名\n\n如下，在文件中使用 import()时，webpack 会在打包时将 a.js 分离出去，成为一个新的文件，这个文件在没有设置 chunkFilename 时会自动使用`[模块id].js`命名(如果注释名存在则使用注释名), 当然，使用注释命名也可以\n\n```javascript\n// entry.js\nimport('./a.js') // 输出文件 0.js\nimport(/* webpackChunkName: \"chunk1\" */'./a.js') // 输出文件 chunk1.js\n\n// 设置chunkFilename后\noutput: {\n  chunkFilename: '[name].[chunkhash].js' // name 一般是模块id 如果有注释名则使用注释名\n},\n\n// 输出\n// 0.[chunkhash].js\n// chunk1.[chunkhash].js\n```\n\n### crossOriginLoading | jsonpScriptType | chunkLoadTimeout\n\ncrossOriginLoading，只用于 `target` 是 `web`，使用了通过 script 标签的 JSONP 来按需加载 chunk。通过加载资源的 origin 信息来判断是否跨域，比如在 cdn 加载 chunk 的时候肯定是跨域的，那么此设置就会生效\n\njsonpScriptType 设置 jsonp 中 script 的 type 属性\n\nchunkLoadTimeout 设置 script 中超时时间，默认 120s\n\n```javascript\nif (script.src.indexOf(window.location.origin + \"/\") !== 0) {\n  script.crossOrigin = \"anonymous\";\n}\n```\n\n### filename 中的 chunkhash contenthash\n\nchunkhash 和 contenthash 的区别在于，都是 chunk 内容，不过 contenthash 是通过`ExtractTextWebpackPlugin`提取出来的，如果 js 文件改变打包后 css 内容即使没变 css hash 也会改变\n\n### libraryTarget\n\n配置如何暴露 library。\n\n1. **var**. （默认值）当 library 加载完成，入口起点的返回值将分配给 library 变量，会覆盖掉已经定义过的全局变量（谨慎使用）\n\n```javascript\noutput.library = \"someLibName\";\n// 打包后，加载完库后会把库对象分配给全局变量 someLibName\nvar someLibName = module.exports; // 输出结果，如果在之前存在全局变量someLibName会覆盖\n```\n\n2. **assign**. 比 `'var'`少了个 var，可以说没区别\n\n```javascript\nsomeLibName = module.exports; // 输出结果\n```\n\n3. **this**.\n\n- output.library 没有赋值，webpack 将把 library 对象上所有的属性挂载到浏览器的 this 上，也就是 window\n\n```javascript\n(function(e, a) { for(var i in a) e[i] = a[i]; }(this, module.exports)\n// 遍历exports对象并挂载到this\n```\n\n- `output.library = 'someLibName'`则会将对象挂载到`this['someLibName']`\n\n```javascript\nthis[\"someLibName\"] = module.exports;\n```\n\n4. **window** 同上\n\n```javascript\nwindow[\"someLibName\"] = module.exports;\n```\n\n5. **global** 分配给 global 对象\n\n```javascript\nglobal[\"someLibName\"] = module.exports;\n```\n\n6. **commonjs** 分配给 exports 对象。这个名称也意味着，模块用于 CommonJS 环境\n\n```javascript\nexports[\"someLibName\"] = module.exports;\n\nrequire(\"someLibName\").doSomething();\n```\n\n7. **commonjs2** 模块定义系统.用于`CommonJS`系统，入口起点的返回值将分配给 `module.exports` 对象\n\n与`commonjs`的区别是不用指定 output.library\n\n> 模块定义系统会使 `bundle` 带有更多的头部处理，以便兼容各种模块系统\n\n```javascript\nmodule.exports = _entry_return_;\n\nrequire(\"MyLibrary\").doSomething();\n```\n\n8. **amd** 将 library 导出为 AMD 模块\n\n可以由 RequireJS 或任何兼容的模块加载器加载。直接加载会报错。\n\n```javascript\n// MyLibrary.js\ndefine(\"MyLibrary\", [], function() {\n  return _entry_return_;\n});\n\n// 浏览器 使用前需要先引入RequireJS\nrequire([\"MyLibrary\"], function(MyLibrary) {\n  // 使用 library 做一些事……\n});\n```\n\n9. **umd** 将 library 导出为所有的模块定义下都可运行的方式。既可以在 CommonJS, AMD 环境下运行，也可以在浏览器环境下且无需 requireJS 的情况下运行。\n\n```javascript\n// webpack配置\nmodule.exports = {\n  //...\n  output: {\n    library: \"MyLibrary\", // 如果不设置的话，webpack会把exports对象上的所有属性挂载到全局变量上\n    libraryTarget: \"umd\"\n  }\n};\n// 也可以给每个导出环境配置不同的名称\nmodule.exports = {\n  //...\n  output: {\n    library: {\n      root: \"MyLibrary\",\n      amd: \"my-library\",\n      commonjs: \"my-common-library\"\n    },\n    libraryTarget: \"umd\"\n  }\n};\n\n// MyLibrary.js\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === \"object\" && typeof module === \"object\")\n    module.exports = factory();\n  else if (typeof define === \"function\" && define.amd) define([], factory);\n  else if (typeof exports === \"object\") exports[\"MyLibrary\"] = factory();\n  else root[\"MyLibrary\"] = factory();\n})(typeof self !== \"undefined\" ? self : this, function() {\n  return _entry_return_; // 此模块返回值，是入口 chunk 返回的值\n});\n```\n\n10. **jsonp** 将导出结果包裹在以 library 变量作为函数名的容器中\n\n```javascript\nlibrary: \"MyLibrary\";\n\n// MyLibrary.js\nMyLibrary(_entry_return_);\n```\n\n### exports、module.exports 和 export、export default\n\n> require: node 和 es6 都支持的引入\n> export / import : 只有 es6 支持的导出引入\n> module.exports / exports: 只有 node 支持的导出\n\n#### node 模块\n\n- commonjs 导入导出 nodejs 支持，浏览器不支持（引用 requirejs 也可以支持）。**在 webpack 打包时，如果使用了 module.exports 作为最终输出时，在浏览器中运行是获取不到模块中的变量的**\n\nNode 里面的模块系统遵循的是 CommonJS 规范。CommonJS 定义的模块分为: 模块标识(module)、模块定义(exports) 、模块引用(require)。\n当 Node 执行一个文件时，会为文件生成一个 exports 和 module 对象，而 module 对象的 exports 属性和 exports 指向同一个内存地址。\n\n```javascript\nexports = module.exports = {};\n```\n\n当 Node 导入某个文件模块时，实际上是导入文件的 module.exports 属性。重新给 exports 属性赋一个对象会导致 exports 属性与 module.exports 断开连接。\n\n- es6 导入导出 主要用于浏览器加载模块，当然 nodejs 也支持\n  1.  export 与 export default 均可用于导出常量、函数、文件、模块等\n  2.  在一个文件或模块中，export、import 可以有多个，export default 仅有一个\n  3.  通过 export 方式导出，在导入时要加{ }，export default 则不需要\n  4.  export 能直接导出变量表达式，export default 不行。\n\n```javascript\n// testEs6Export.js\n\"use strict\";\n//导出变量\nexport const a = \"100\";\n\n//导出方法\nexport const dogSay = function() {\n  console.log(\"wang wang\");\n};\n\n//导出方法第二种\nfunction catSay() {\n  console.log(\"miao miao\");\n}\nexport { catSay };\n\n//export default导出\nconst m = 100;\nexport default m;\n\n//\n// index.js\n\nimport { dogSay, catSay } from \"./testEs6Export\"; //导出了 export 方法\nimport m from \"./testEs6Export\"; //导出了 export default\n\nimport * as testModule from \"./testEs6Export\"; //as 集合成对象导出\nconsole.log(testModule.m); // undefined , 因为  as 导出是 把 零散的 export 聚集在一起作为一个对象，而export default 是导出为 default属性。\nconsole.log(testModule.default); // 100\n```\n\n#### commonjs vs commonjs2\n\n那么 webpack 打包 library 时 commonjs 与 commonjs2 的区别就是 commonjs 必须赋值一个变量作为 exports 的属性，commonjs2 则是直接导出为 `module.exports` 的对象\n\n#### 缓存\n\n利用缓存技术可以合理利用浏览器缓存减少请求，加快网站的加载速度。\n\n```javascript\nmodule.exports = {\n  output: {\n    // 改为contenthash 通过内容来映射hash,内容变化则hash变，内容不变hash不变\n    filename: \"[name].[contenthash].js\"\n  },\n  optimization: {\n    // 分离runtime\n    runtimeChunk: \"single\",\n    // 将第三方库提取到单独的vendor文件中\n    splitChunks: {\n      cacheGroups: {\n        vendor: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          name: \"vendors\",\n          chunks: \"all\"\n        }\n      }\n    },\n    plugins: [\n      new webpack.HashedModuleIdsPlugin() // 保持内容不变的情况下hash也不变\n    ]\n  }\n};\n```\n\n### output.umdNamedDefine\n\n当使用了 `libraryTarget: \"umd\"`，设置：\n\n```javascript\nmodule.exports = {\n  //...\n  output: {\n    umdNamedDefine: true\n  }\n};\n\n// 打包后\nif (typeof define === \"function\" && define.amd)\n  define(\"someLibName\" /*这里会加上library字段的值*/, [], factory);\n```\n\n### output.pathinfo\n\n开启后多了下面的注释部分，会导致造成垃圾回收性能压力，建议还是关闭\n\n```javascript\n/***/ \"tjUo\":\n/*!**********************!*\\\n  !*** ./src/index.js ***!\n  \\**********************/\n/*! exports provided: a */\n/***/\n```\n\n## 模式 mode\n\n> 值有：`none`, `development`, `production`（默认）。设置 `NODE_ENV` 并不会自动地设置 mode。\n\n### 用法\n\n```javascript\n// 配置文件\nmodule.exports = {\n  mode: 'development'\n}\n\n// cli传参\nwebpack --mode=development\n```\n\n| 选项        | 描述                                                                                                                                                                                                                                       |\n| ----------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| development | 会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。                                                                                                                           |\n| production  | 会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 TerserPlugin。 |\n| none        | 退出任何默认优化选项.                                                                                                                                                                                                                      |\n\n#### `mode: development`\n\n```javascript\n// webpack.development.config.js\nmodule.exports = {\n+ mode: 'development'\n- devtool: 'eval',\n- cache: true, // 缓存生成的 webpack 模块和 chunk，来改善构建速度。缓存默认在观察模式(watch mode)启用\n- performance: {\n-   hints: false // false | \"error\" | \"warning\" 是否开启打包后文件过大的性能提示 false不开启，warning 展示警告 error展示错误(开发环境中会展示在浏览器的工作台中)。文件大小可以限制可以自由配置\n- },\n- output: {\n-   pathinfo: true\n- },\n- optimization: {\n-   namedModules: true,\n-   namedChunks: true,\n-   nodeEnv: 'development',\n-   flagIncludedChunks: false,\n-   occurrenceOrder: false,\n-   sideEffects: false,\n-   usedExports: false,\n-   concatenateModules: false,\n-   splitChunks: {\n-     hidePathInfo: false,\n-     minSize: 10000,\n-     maxAsyncRequests: Infinity,\n-     maxInitialRequests: Infinity,\n-   },\n-   noEmitOnErrors: false,  // 设置为true 则会在编译出错时跳过生成阶段，避免生成错误打包文件\n-   checkWasmTypes: false,\n-   minimize: false,\n- },\n- plugins: [\n-   new webpack.NamedModulesPlugin(),\n-   new webpack.NamedChunksPlugin(),\n-   new webpack.DefinePlugin({ \"process.env.NODE_ENV\": JSON.stringify(\"development\") }),\n- ]\n}\n```\n\n## optimization\n\nwebpack 4 特有的优化选项，可以进行压缩代码，分包等操作\n\n### minimize\n\n开启后使用[TerserPlugin](https://webpack.docschina.org/plugins/terser-webpack-plugin/)压缩。`mode:production`时自动开启\n\n### minimizer\n\n测试后只在`mode: production`时有效，可以配置 terserPlugin 的参数\n\n### splitChunks\n\n用于分割代码块，提取出公用代码块。在多页面项目或者动态导入模块的时候非常有用，能减少初始加载代码的大小，提升网页首屏的加载速度。\n\n`splitChunks`默认只影响按需块，当然也可以通过设置 `chunks: 'initial'`来拆分公用初始代码块。\n\n> `splitChunks` 总是会提取按需块\n\n先看看 webpack 中默认的`splitChunks`设置\n\n```javascript\nmodule.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      // 可设置的值有 initial, async, all\n      // all 最佳配置，当分离的块既有同步又有按需引入时，共享代码\n      // initial 当分离的块既有同步又有按需引入时，不共享代码\n      // async 只拆分按需引入块\n      chunks: \"async\",\n      // 当代码块大于这个值的时候就会被拆分出来\n      minSize: 30000,\n      // 当代码块大于这个值的时候会继续拆分（如果还可以拆分的话） 0表示不拆分\n      maxSize: 0,\n      // 当代码块被引用的次数超过这个数的时候才会拆分\n      minChunks: 1,\n      // 最多能拆分的按需块 >= 1\n      maxAsyncRequests: 5,\n      // 最多能拆分的初始块 >= 1  如果设置了maxSize，并且能拆分，可能会拆分出更多的块\n      maxInitialRequests: 3,\n      // 块文件名分隔符\n      automaticNameDelimiter: \"~\",\n      // 分割块的名字。如果传入 true 将会自动生成一个基于块组和缓存组键的名称\n      // 也可以用函数生成名称\n      // name (module, chunks, cacheGroupKey) {\n      //   // generate a chunk name...\n      //   return; //...\n      // },\n      name: true,\n      cacheGroups: {\n        vendors: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          priority: -10\n        },\n        default: {\n          minChunks: 2,\n          priority: -20,\n          reuseExistingChunk: true\n        }\n      }\n    }\n  }\n};\n```\n\n#### 多页面分割代码\n\n[栗子地址](https://github.com/kingRywen/webpack-test/tree/splitChunk)\n\n```javascript\nlet entry = {\n  // 多个入口\n  index: \"./src/index.js\",\n  pageA: \"./src/a.js\",\n  pageB: \"./src/b.js\",\n  pageC: \"./src/c.js\",\n  pageD: \"./src/d.js\"\n};\nlet _chunks = {};\n\n// 添加分离出来的runtime和node_modules中的库，以及当前页的chunk到chunk映射变量_chunks中\nObject.keys(entry).forEach(key => {\n  _chunks[key] = [key, \"runtime\", \"vendors\"];\n});\n\nconst htmls = Object.keys(entry).map(\n  name =>\n    new HtmlWebpackPlugin({\n      filename: name + \".html\",\n      template: \"template.pug\",\n      title: name,\n      chunks: _chunks[name]\n    })\n);\n\nmodule.exports = {\n  mode: \"production\",\n  entry,\n  // ...\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    crossOriginLoading: \"anonymous\",\n    filename: \"[name].[contenthash].js\",\n    pathinfo: false\n  },\n  performance: {\n    hints: false\n  },\n  optimization: {\n    minimize: true,\n    runtimeChunk: \"single\",\n    splitChunks: {\n      chunks: \"all\",\n      minSize: 30000,\n      maxSize: 0,\n      minChunks: 2,\n      maxAsyncRequests: 20,\n      maxInitialRequests: 20,\n      automaticNameDelimiter: \"~\",\n      // 关键命名函数，将引入次数2次以上的公共业务代码分割出来，并命名\n      // 命名的同时将chunk推入_chunks中，改变入口htmlwebpack中chunks的引入\n      name(module, chunks, cacheGroupKey) {\n        let name = chunks.map(el => el.name).join(\"~\");\n        for (let index = 0; index < chunks.length; index++) {\n          const c = chunks[index];\n          if (c.name && _chunks[c.name] && !~_chunks[c.name].indexOf(name)) {\n            _chunks[c.name].push(name);\n          }\n        }\n        return name;\n      },\n      cacheGroups: {\n        // 分割库代码\n        commons: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          name: \"vendors\",\n          chunks: \"all\"\n        }\n      }\n    }\n  }\n  // ...\n};\n```\n\n### 模块(module)\n\nwebpack 模块是管理各种文件资源的途径，通过 loader 能解析非.js 文件\n\n#### css\n\n##### 普通 css\n\n通过`import './style.css'`方法引入样式文件，在没有配置 module 的情况下 webpack 是不会正常解析 css 文件的，所以我们必须引入`style-loader`来将引入的 css 文件解析出来。当然也要引入`css-loader`来解析 css 文件的内容,css-loader 也能解析 css 中的引入：`@import`及`url()`（可以配置不解析某些资源）\n\n```javascript\n// 安装\nyarn add -D style-loader\n// webpack.config.js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          // 区分生产环境和开发环境,生产环境时提取css作为单独文件\n          process.env.NODE_ENV == 'production' ? MiniCssExtractPlugin.loader : 'style-loader', {\n            loader: 'css-loader',\n            options:{\n              modules: true, // css 模块化\n              sourceMap: true // 开启 sourceMap\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n##### sass\n\n```javascript\n// 安装\nyarn add sass-loader node-sass -D\n\n// webpack.config.js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.scss$/,\n        use: [\n          process.env.NODE_ENV == 'production' ? MiniCssExtractPlugin.loader : 'style-loader',\n          {\n            loader: 'css-loader',\n            options: {\n              sourceMap: true\n            }\n          },\n          'sass-loader'\n        ]\n      }\n    ]\n  }\n}\n```\n\n#####　 postcss\n\n在[PostCSS](http://postcss.org/)官网有着这样的对 PostCSS 特性介绍，箭头后面是对应功能的插件及其 github 地址。\n\n1. increase code readability （增加代码可读性，补全） → [Autoprefixer](https://github.com/postcss/autoprefixer)\n2. Use tomorrow's CSS ,today!（使用下代 css） → [postcss-cssnext](https://github.com/MoOx/postcss-cssnext/)\n3. The end of global CSS（模块化 css）→ [postcss-modules](https://github.com/css-modules/postcss-modules)\n4. Avoid errors in your CSS（错误提示） → [stylelint](https://github.com/stylelint/stylelint)\n5. Powerful grid CSS（栅格系统） → lost →[lost](https://github.com/peterramsing/lost)\n\n##### webpack 中使用 postcss\n\n`PostCSS Preset Env`可以将现代 CSS 转换为大多数浏览器可以理解的内容，并根据目标浏览器或运行时环境确定所需的 polyfill。\n\n启用 sourceMap 支持，postcss-loader 将使用其他加载器提供的先前的 sourceMap 并进行相应的更新。除`style-loader`之外的 loader 都需要配置`sourceMap: true`\n\n```javascript\n// 安装\nyarn add -D postcss-preset-env\n\n// webpack.config.js\nmodule.exports = {\n  rules: [\n    {\n      test: /\\.css$/,\n      use: [\n      'style-loader',\n      {\n        loader: \"css-loader\",\n        options: {\n          sourceMap: true,\n          // 必须配置，影响@import导入的文件中的加载器的数量，\n          // 如果不配置@import导入文件将不会应用后面的加载器\n          importLoaders: 2\n        }\n      },\n      {\n        loader: 'postcss-loader',\n        options: {\n          sourceMap: true,\n          indent: 'postcss',\n          plugins: () => [\n            // 使用 PostCSS Preset Env\n            // postcss-preset-env已经预置autoprefixer，无需单独添加它\n            postcssPresetEnv({\n              stage: 3,\n              // 支持任何标准的browserslist配置，可以是.browserslistrc文件，package.json中的browserslist或browserslist环境变量。\n              browsers: 'last 2 versions'\n            })\n          ]\n        }\n      }]\n    }\n  ]\n}\n```\n\n#### images 图像\n\n```javascript\n// 安装\nyarn add -D url-loader\n\n// webpack.config.js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|svg|jpg|gif)$/,\n        // url-loader将少于limit的图像文件转化为dataUrl来减少请求\n        loader: 'url-loader',\n        options: {\n          // 当图像大于limit时，会使用备用的loader\n          fallback: {\n            loader: 'file-loader',\n            options: {\n              name: 'img/[name].[hash:8].[ext]'\n            }\n          },\n          limit: 4096\n        }\n      }\n    ]\n  }\n}\n```\n\n#### fonts 字体\n\n`file-loader` 和 `url-loader` 可以接收并加载任何文件，所以也可以用来加载 fonts 字体文件\n\n```javascript\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(woff|woff2|eot|ttf|otf)$/,\n        loader: \"url-loader\",\n        options: {\n          fallback: {\n            loader: \"file-loader\",\n            options: {\n              name: \"img/[name].[hash:8].[ext]\"\n            }\n          },\n          limit: 4096\n        }\n      }\n    ]\n  }\n};\n```\n\n#### 数据 json xml\n\n加载的资源还有数据，如 JSON 文件，CSV、TSV 和 XML。类似于 NodeJS，JSON 支持实际上是内置的，也就是说 `import Data from './data.json'` 默认将正常运行\n\n```javascript\n+       {\n+         test: /\\.(csv|tsv)$/,\n+         use: [\n+           'csv-loader'\n+         ]\n+       },\n+       {\n+         test: /\\.xml$/,\n+         use: [\n+           'xml-loader'\n+         ]\n+       }\n```\n","slug":"webpack","published":1,"updated":"2023-05-31T16:56:15.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clibygb5z000yf4fmj3i65r0t","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><blockquote>\n<p>本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包工具。当 webpack 处理应用程序时，它会在内部构建一个<strong>依赖图(dependency graph)</strong>，此依赖图会映射项目所需的每个模块，并生成一个或多个 bundle。</p>\n</blockquote>\n<p>上面一段话摘自官方文档，由此引申出下面几个问题</p>\n<ol>\n<li>什么是依赖图？依赖图是怎么映射项目所需的模块？</li>\n<li>bundle 是什么？</li>\n</ol>\n<a id=\"more\"></a>\n<h3 id=\"依赖图\"><a href=\"#依赖图\" class=\"headerlink\" title=\"依赖图\"></a>依赖图</h3><p>webpack 开箱即用，可以无需使用任何配置文件。然而，webpack 会假定项目的入口起点为工程目录 <code>src/index</code>，然后会在 <code>dist/main.js</code> 输出结果，并且在生产环境开启压缩和优化。</p>\n<p>也就是说，在没有任何配置文件和命令行传参的情况下，会有一个默认的入口起点 <code>src/index</code> (如果自己配置了入口就会使用配置好的)，直接执行</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack</span><br></pre></td></tr></table></figure>\n<p>webpack 会将 <code>mode</code> 的默认值设置为 <code>production</code>并开始打包，从 入口起点 开始，webpack 递归地构建一个依赖图，这个依赖图包含着应用程序所需的每个模块，然后将所有这些模块打包为少量的 bundle - 通常只有一个 - 可由浏览器加载。</p>\n<p>所以依赖图的生成是首先取决于入口文件，当然，在入口文件中如果也引入了其它文件，那么其它文件也会变成依赖图一部分。</p>\n<h3 id=\"bundle\"><a href=\"#bundle\" class=\"headerlink\" title=\"bundle\"></a>bundle</h3><p>bundle 就是 webpack 生成的文件，bundle 里包含多个 chunk - 代码块，可能多个 bundle 会存在相同的代码块，所以需要用代码分离来共享相同代码块部分</p>\n<h3 id=\"process-env-NODE-ENV\"><a href=\"#process-env-NODE-ENV\" class=\"headerlink\" title=\"process.env.NODE_ENV\"></a>process.env.NODE_ENV</h3><p>在 wepback4 中，存在两种模式，<code>development</code>、<code>production</code>，webpack 自动会引入<code>definePlugin</code>，这个插件会决定在开发环境与生产环境(dev-vs-prod)下，server tools(服务期工具)、build scripts(构建脚本) 和 client-side libraries(客户端库) <code>process.env.NODE_ENV</code>的值，然而，在 <code>webpack.config.js</code> 中是不会存在这个值的，要在配置文件中使用<code>process.env.NODE_ENV</code>，有以下两种方法</p>\n<ul>\n<li>命令行中传入<code>--env.NODE_ENV production|development</code>， <code>webpack.config.js</code> 中导出函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">env</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(env.NODE_ENV); <span class=\"comment\">// production|development</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>cross-env</code>传参</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 安装cross-env</span></span><br><span class=\"line\">yarn add -D cross-env</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\">cross-env NODE_ENV=production webpack ./webpack.config.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(process.env.NODE_ENV) <span class=\"comment\">// production|development</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"入口-entry\"><a href=\"#入口-entry\" class=\"headerlink\" title=\"入口 entry\"></a>入口 entry</h2><p>入口的写法，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// normal</span></span><br><span class=\"line\">  entry: <span class=\"string\">'./path/to/my/entry/file.js'</span></span><br><span class=\"line\">  <span class=\"comment\">// 对象语法</span></span><br><span class=\"line\">  <span class=\"comment\">// 使用 optimization.splitChunks 为页面间共享的应用程序代码创建 bundle。</span></span><br><span class=\"line\">  <span class=\"comment\">// 由于入口起点增多，多页应用能够复用入口起点之间的大量代码/模块</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果输出为library 可以使用 array 语法暴露所有模块</span></span><br><span class=\"line\">  <span class=\"comment\">// 参考 https://github.com/webpack/webpack/tree/master/examples/multi-part-library</span></span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    main: <span class=\"string\">'./path/to/my/entry/file.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 数组</span></span><br><span class=\"line\">  <span class=\"comment\">// 这样传会合并多个文件为一个bundle文件</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果输出为library时只会暴露最后一个模块</span></span><br><span class=\"line\">  entry: [<span class=\"string\">'path1'</span>, <span class=\"string\">'path2'</span>]</span><br><span class=\"line\">  <span class=\"comment\">// 动态入口 可以接收远程服务器的数据来决定入口，感觉没什么用</span></span><br><span class=\"line\">  entry: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"string\">'./demo'</span></span><br><span class=\"line\">  <span class=\"comment\">// 或</span></span><br><span class=\"line\">  entry: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> resolve([<span class=\"string\">'./demo'</span>, <span class=\"string\">'./demo2'</span>]))</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出-output\"><a href=\"#输出-output\" class=\"headerlink\" title=\"输出 output\"></a>输出 output</h2><p>输出主要是告诉 webpack 打包后的 bundle 放在哪里，以及如何命名这些文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">// normal</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">\"dist\"</span>), <span class=\"comment\">// 打包后的目录 URL以HTML页面为基准</span></span><br><span class=\"line\">    filename: <span class=\"string\">\"my-first-webpack.bundle.js\"</span>, <span class=\"comment\">// 文件命名</span></span><br><span class=\"line\">    publicPath: <span class=\"string\">\"assets/\"</span>, <span class=\"comment\">// 相对于 html 页面</span></span><br><span class=\"line\">    publicPath: <span class=\"string\">\"/assets/\"</span> <span class=\"comment\">// 相对于服务器根目录</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 多个入口起点 使用占位符</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">\"[name].js\"</span></span><br><span class=\"line\">    <span class=\"comment\">// 输出文件 ./dist/name1.js  ./dist/name2.js</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// cdn hash</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"/home/proj/cdn/assets/[hash]\"</span>, <span class=\"comment\">// 此处打包后会生成到硬盘根路径</span></span><br><span class=\"line\">    publicPath: <span class=\"string\">\"http://cdn.example.com/assets/[hash]/\"</span> <span class=\"comment\">// cdn路径</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在运行时设置-publicPath\"><a href=\"#在运行时设置-publicPath\" class=\"headerlink\" title=\"在运行时设置 publicPath\"></a>在运行时设置 publicPath</h3><p>所谓运行时，即在打包完成后运行应用程序的时候。一般在 output 中配置的 publicPath 是固定的，但是，我们可能需要在运行的时候动态加载 publicPath,webpack 暴露了一个名为 <strong>webpack_public_path</strong> 的全局变量，通过改变这个变量的值达到我们的目的。</p>\n<ol>\n<li>创建一个文件<code>public_path.js</code></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__webpack_public_path__ = <span class=\"string\">\"http://some.cdn.com/some\"</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在入口文件中引入</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// entry.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"public_path.js\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"./app.js\"</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果在 entry 文件中使用 ES2015 module import，则会在 import 之后进行 <strong>webpack_public_path</strong> 赋值。在这种情况下，你必须将 public path 赋值移至一个专用模块中，然后将它的 import 语句放置到 entry.js 最上面</p>\n</blockquote>\n<h3 id=\"chunkFilename\"><a href=\"#chunkFilename\" class=\"headerlink\" title=\"chunkFilename\"></a>chunkFilename</h3><p>定义非入口 chunk 文件的名称。这个在动态导入时可以设置分出来的文件名</p>\n<p>如下，在文件中使用 import()时，webpack 会在打包时将 a.js 分离出去，成为一个新的文件，这个文件在没有设置 chunkFilename 时会自动使用<code>[模块id].js</code>命名(如果注释名存在则使用注释名), 当然，使用注释命名也可以</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// entry.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">'./a.js'</span>) <span class=\"comment\">// 输出文件 0.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"chunk1\" */</span><span class=\"string\">'./a.js'</span>) <span class=\"comment\">// 输出文件 chunk1.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置chunkFilename后</span></span><br><span class=\"line\">output: &#123;</span><br><span class=\"line\">  chunkFilename: <span class=\"string\">'[name].[chunkhash].js'</span> <span class=\"comment\">// name 一般是模块id 如果有注释名则使用注释名</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">// 0.[chunkhash].js</span></span><br><span class=\"line\"><span class=\"comment\">// chunk1.[chunkhash].js</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"crossOriginLoading-jsonpScriptType-chunkLoadTimeout\"><a href=\"#crossOriginLoading-jsonpScriptType-chunkLoadTimeout\" class=\"headerlink\" title=\"crossOriginLoading | jsonpScriptType | chunkLoadTimeout\"></a>crossOriginLoading | jsonpScriptType | chunkLoadTimeout</h3><p>crossOriginLoading，只用于 <code>target</code> 是 <code>web</code>，使用了通过 script 标签的 JSONP 来按需加载 chunk。通过加载资源的 origin 信息来判断是否跨域，比如在 cdn 加载 chunk 的时候肯定是跨域的，那么此设置就会生效</p>\n<p>jsonpScriptType 设置 jsonp 中 script 的 type 属性</p>\n<p>chunkLoadTimeout 设置 script 中超时时间，默认 120s</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (script.src.indexOf(<span class=\"built_in\">window</span>.location.origin + <span class=\"string\">\"/\"</span>) !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  script.crossOrigin = <span class=\"string\">\"anonymous\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"filename-中的-chunkhash-contenthash\"><a href=\"#filename-中的-chunkhash-contenthash\" class=\"headerlink\" title=\"filename 中的 chunkhash contenthash\"></a>filename 中的 chunkhash contenthash</h3><p>chunkhash 和 contenthash 的区别在于，都是 chunk 内容，不过 contenthash 是通过<code>ExtractTextWebpackPlugin</code>提取出来的，如果 js 文件改变打包后 css 内容即使没变 css hash 也会改变</p>\n<h3 id=\"libraryTarget\"><a href=\"#libraryTarget\" class=\"headerlink\" title=\"libraryTarget\"></a>libraryTarget</h3><p>配置如何暴露 library。</p>\n<ol>\n<li><strong>var</strong>. （默认值）当 library 加载完成，入口起点的返回值将分配给 library 变量，会覆盖掉已经定义过的全局变量（谨慎使用）</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output.library = <span class=\"string\">\"someLibName\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 打包后，加载完库后会把库对象分配给全局变量 someLibName</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> someLibName = <span class=\"built_in\">module</span>.exports; <span class=\"comment\">// 输出结果，如果在之前存在全局变量someLibName会覆盖</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><strong>assign</strong>. 比 <code>&#39;var&#39;</code>少了个 var，可以说没区别</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">someLibName = <span class=\"built_in\">module</span>.exports; <span class=\"comment\">// 输出结果</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><strong>this</strong>.</li>\n</ol>\n<ul>\n<li>output.library 没有赋值，webpack 将把 library 对象上所有的属性挂载到浏览器的 this 上，也就是 window</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e, a</span>) </span>&#123; <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> a) e[i] = a[i]; &#125;(<span class=\"keyword\">this</span>, <span class=\"built_in\">module</span>.exports)</span><br><span class=\"line\"><span class=\"comment\">// 遍历exports对象并挂载到this</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>output.library = &#39;someLibName&#39;</code>则会将对象挂载到<code>this[&#39;someLibName&#39;]</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>[<span class=\"string\">\"someLibName\"</span>] = <span class=\"built_in\">module</span>.exports;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><strong>window</strong> 同上</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">\"someLibName\"</span>] = <span class=\"built_in\">module</span>.exports;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li><strong>global</strong> 分配给 global 对象</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global[<span class=\"string\">\"someLibName\"</span>] = <span class=\"built_in\">module</span>.exports;</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li><strong>commonjs</strong> 分配给 exports 对象。这个名称也意味着，模块用于 CommonJS 环境</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports[<span class=\"string\">\"someLibName\"</span>] = <span class=\"built_in\">module</span>.exports;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"someLibName\"</span>).doSomething();</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li><strong>commonjs2</strong> 模块定义系统.用于<code>CommonJS</code>系统，入口起点的返回值将分配给 <code>module.exports</code> 对象</li>\n</ol>\n<p>与<code>commonjs</code>的区别是不用指定 output.library</p>\n<blockquote>\n<p>模块定义系统会使 <code>bundle</code> 带有更多的头部处理，以便兼容各种模块系统</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = _entry_return_;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"MyLibrary\"</span>).doSomething();</span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li><strong>amd</strong> 将 library 导出为 AMD 模块</li>\n</ol>\n<p>可以由 RequireJS 或任何兼容的模块加载器加载。直接加载会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MyLibrary.js</span></span><br><span class=\"line\">define(<span class=\"string\">\"MyLibrary\"</span>, [], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _entry_return_;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 浏览器 使用前需要先引入RequireJS</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"MyLibrary\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">MyLibrary</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 library 做一些事……</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li><strong>umd</strong> 将 library 导出为所有的模块定义下都可运行的方式。既可以在 CommonJS, AMD 环境下运行，也可以在浏览器环境下且无需 requireJS 的情况下运行。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack配置</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    library: <span class=\"string\">\"MyLibrary\"</span>, <span class=\"comment\">// 如果不设置的话，webpack会把exports对象上的所有属性挂载到全局变量上</span></span><br><span class=\"line\">    libraryTarget: <span class=\"string\">\"umd\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 也可以给每个导出环境配置不同的名称</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    library: &#123;</span><br><span class=\"line\">      root: <span class=\"string\">\"MyLibrary\"</span>,</span><br><span class=\"line\">      amd: <span class=\"string\">\"my-library\"</span>,</span><br><span class=\"line\">      commonjs: <span class=\"string\">\"my-common-library\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    libraryTarget: <span class=\"string\">\"umd\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MyLibrary.js</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">webpackUniversalModuleDefinition</span>(<span class=\"params\">root, factory</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> exports === <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> === <span class=\"string\">\"object\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = factory();</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">\"function\"</span> &amp;&amp; define.amd) define([], factory);</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> exports === <span class=\"string\">\"object\"</span>) exports[<span class=\"string\">\"MyLibrary\"</span>] = factory();</span><br><span class=\"line\">  <span class=\"keyword\">else</span> root[<span class=\"string\">\"MyLibrary\"</span>] = factory();</span><br><span class=\"line\">&#125;)(<span class=\"keyword\">typeof</span> self !== <span class=\"string\">\"undefined\"</span> ? self : <span class=\"keyword\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _entry_return_; <span class=\"comment\">// 此模块返回值，是入口 chunk 返回的值</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li><strong>jsonp</strong> 将导出结果包裹在以 library 变量作为函数名的容器中</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library: <span class=\"string\">\"MyLibrary\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MyLibrary.js</span></span><br><span class=\"line\">MyLibrary(_entry_return_);</span><br></pre></td></tr></table></figure>\n<h3 id=\"exports、module-exports-和-export、export-default\"><a href=\"#exports、module-exports-和-export、export-default\" class=\"headerlink\" title=\"exports、module.exports 和 export、export default\"></a>exports、module.exports 和 export、export default</h3><blockquote>\n<p>require: node 和 es6 都支持的引入<br>export / import : 只有 es6 支持的导出引入<br>module.exports / exports: 只有 node 支持的导出</p>\n</blockquote>\n<h4 id=\"node-模块\"><a href=\"#node-模块\" class=\"headerlink\" title=\"node 模块\"></a>node 模块</h4><ul>\n<li>commonjs 导入导出 nodejs 支持，浏览器不支持（引用 requirejs 也可以支持）。<strong>在 webpack 打包时，如果使用了 module.exports 作为最终输出时，在浏览器中运行是获取不到模块中的变量的</strong></li>\n</ul>\n<p>Node 里面的模块系统遵循的是 CommonJS 规范。CommonJS 定义的模块分为: 模块标识(module)、模块定义(exports) 、模块引用(require)。<br>当 Node 执行一个文件时，会为文件生成一个 exports 和 module 对象，而 module 对象的 exports 属性和 exports 指向同一个内存地址。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports = <span class=\"built_in\">module</span>.exports = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n<p>当 Node 导入某个文件模块时，实际上是导入文件的 module.exports 属性。重新给 exports 属性赋一个对象会导致 exports 属性与 module.exports 断开连接。</p>\n<ul>\n<li>es6 导入导出 主要用于浏览器加载模块，当然 nodejs 也支持<ol>\n<li>export 与 export default 均可用于导出常量、函数、文件、模块等</li>\n<li>在一个文件或模块中，export、import 可以有多个，export default 仅有一个</li>\n<li>通过 export 方式导出，在导入时要加{ }，export default 则不需要</li>\n<li>export 能直接导出变量表达式，export default 不行。</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// testEs6Export.js</span></span><br><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//导出变量</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> a = <span class=\"string\">\"100\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//导出方法</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> dogSay = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"wang wang\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//导出方法第二种</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">catSay</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"miao miao\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; catSay &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//export default导出</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> m = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; dogSay, catSay &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./testEs6Export\"</span>; <span class=\"comment\">//导出了 export 方法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> m <span class=\"keyword\">from</span> <span class=\"string\">\"./testEs6Export\"</span>; <span class=\"comment\">//导出了 export default</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> testModule <span class=\"keyword\">from</span> <span class=\"string\">\"./testEs6Export\"</span>; <span class=\"comment\">//as 集合成对象导出</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(testModule.m); <span class=\"comment\">// undefined , 因为  as 导出是 把 零散的 export 聚集在一起作为一个对象，而export default 是导出为 default属性。</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(testModule.default); <span class=\"comment\">// 100</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"commonjs-vs-commonjs2\"><a href=\"#commonjs-vs-commonjs2\" class=\"headerlink\" title=\"commonjs vs commonjs2\"></a>commonjs vs commonjs2</h4><p>那么 webpack 打包 library 时 commonjs 与 commonjs2 的区别就是 commonjs 必须赋值一个变量作为 exports 的属性，commonjs2 则是直接导出为 <code>module.exports</code> 的对象</p>\n<h4 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h4><p>利用缓存技术可以合理利用浏览器缓存减少请求，加快网站的加载速度。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 改为contenthash 通过内容来映射hash,内容变化则hash变，内容不变hash不变</span></span><br><span class=\"line\">    filename: <span class=\"string\">\"[name].[contenthash].js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 分离runtime</span></span><br><span class=\"line\">    runtimeChunk: <span class=\"string\">\"single\"</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 将第三方库提取到单独的vendor文件中</span></span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        vendor: &#123;</span><br><span class=\"line\">          test: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">          name: <span class=\"string\">\"vendors\"</span>,</span><br><span class=\"line\">          chunks: <span class=\"string\">\"all\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> webpack.HashedModuleIdsPlugin() <span class=\"comment\">// 保持内容不变的情况下hash也不变</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"output-umdNamedDefine\"><a href=\"#output-umdNamedDefine\" class=\"headerlink\" title=\"output.umdNamedDefine\"></a>output.umdNamedDefine</h3><p>当使用了 <code>libraryTarget: &quot;umd&quot;</code>，设置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    umdNamedDefine: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打包后</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">\"function\"</span> &amp;&amp; define.amd)</span><br><span class=\"line\">  define(<span class=\"string\">\"someLibName\"</span> <span class=\"comment\">/*这里会加上library字段的值*/</span>, [], factory);</span><br></pre></td></tr></table></figure>\n<h3 id=\"output-pathinfo\"><a href=\"#output-pathinfo\" class=\"headerlink\" title=\"output.pathinfo\"></a>output.pathinfo</h3><p>开启后多了下面的注释部分，会导致造成垃圾回收性能压力，建议还是关闭</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"string\">\"tjUo\"</span>:</span><br><span class=\"line\"><span class=\"comment\">/*!**********************!*\\</span></span><br><span class=\"line\"><span class=\"comment\">  !*** ./src/index.js ***!</span></span><br><span class=\"line\"><span class=\"comment\">  \\**********************/</span></span><br><span class=\"line\"><span class=\"comment\">/*! exports provided: a */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"模式-mode\"><a href=\"#模式-mode\" class=\"headerlink\" title=\"模式 mode\"></a>模式 mode</h2><blockquote>\n<p>值有：<code>none</code>, <code>development</code>, <code>production</code>（默认）。设置 <code>NODE_ENV</code> 并不会自动地设置 mode。</p>\n</blockquote>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置文件</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cli传参</span></span><br><span class=\"line\">webpack --mode=development</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>development</td>\n<td style=\"text-align:left\">会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。</td>\n</tr>\n<tr>\n<td>production</td>\n<td style=\"text-align:left\">会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 TerserPlugin。</td>\n</tr>\n<tr>\n<td>none</td>\n<td style=\"text-align:left\">退出任何默认优化选项.</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"mode-development\"><a href=\"#mode-development\" class=\"headerlink\" title=\"mode: development\"></a><code>mode: development</code></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.development.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">+ mode: <span class=\"string\">'development'</span></span><br><span class=\"line\">- devtool: <span class=\"string\">'eval'</span>,</span><br><span class=\"line\">- cache: <span class=\"literal\">true</span>, <span class=\"comment\">// 缓存生成的 webpack 模块和 chunk，来改善构建速度。缓存默认在观察模式(watch mode)启用</span></span><br><span class=\"line\">- performance: &#123;</span><br><span class=\"line\">-   hints: <span class=\"literal\">false</span> <span class=\"comment\">// false | \"error\" | \"warning\" 是否开启打包后文件过大的性能提示 false不开启，warning 展示警告 error展示错误(开发环境中会展示在浏览器的工作台中)。文件大小可以限制可以自由配置</span></span><br><span class=\"line\">- &#125;,</span><br><span class=\"line\">- output: &#123;</span><br><span class=\"line\">-   pathinfo: <span class=\"literal\">true</span></span><br><span class=\"line\">- &#125;,</span><br><span class=\"line\">- optimization: &#123;</span><br><span class=\"line\">-   namedModules: <span class=\"literal\">true</span>,</span><br><span class=\"line\">-   namedChunks: <span class=\"literal\">true</span>,</span><br><span class=\"line\">-   nodeEnv: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">-   flagIncludedChunks: <span class=\"literal\">false</span>,</span><br><span class=\"line\">-   occurrenceOrder: <span class=\"literal\">false</span>,</span><br><span class=\"line\">-   sideEffects: <span class=\"literal\">false</span>,</span><br><span class=\"line\">-   usedExports: <span class=\"literal\">false</span>,</span><br><span class=\"line\">-   concatenateModules: <span class=\"literal\">false</span>,</span><br><span class=\"line\">-   splitChunks: &#123;</span><br><span class=\"line\">-     hidePathInfo: <span class=\"literal\">false</span>,</span><br><span class=\"line\">-     minSize: <span class=\"number\">10000</span>,</span><br><span class=\"line\">-     maxAsyncRequests: <span class=\"literal\">Infinity</span>,</span><br><span class=\"line\">-     maxInitialRequests: <span class=\"literal\">Infinity</span>,</span><br><span class=\"line\">-   &#125;,</span><br><span class=\"line\">-   noEmitOnErrors: <span class=\"literal\">false</span>,  <span class=\"comment\">// 设置为true 则会在编译出错时跳过生成阶段，避免生成错误打包文件</span></span><br><span class=\"line\">-   checkWasmTypes: <span class=\"literal\">false</span>,</span><br><span class=\"line\">-   minimize: <span class=\"literal\">false</span>,</span><br><span class=\"line\">- &#125;,</span><br><span class=\"line\">- plugins: [</span><br><span class=\"line\">-   <span class=\"keyword\">new</span> webpack.NamedModulesPlugin(),</span><br><span class=\"line\">-   <span class=\"keyword\">new</span> webpack.NamedChunksPlugin(),</span><br><span class=\"line\">-   <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123; <span class=\"string\">\"process.env.NODE_ENV\"</span>: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">\"development\"</span>) &#125;),</span><br><span class=\"line\">- ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"optimization\"><a href=\"#optimization\" class=\"headerlink\" title=\"optimization\"></a>optimization</h2><p>webpack 4 特有的优化选项，可以进行压缩代码，分包等操作</p>\n<h3 id=\"minimize\"><a href=\"#minimize\" class=\"headerlink\" title=\"minimize\"></a>minimize</h3><p>开启后使用<a href=\"https://webpack.docschina.org/plugins/terser-webpack-plugin/\" target=\"_blank\" rel=\"noopener\">TerserPlugin</a>压缩。<code>mode:production</code>时自动开启</p>\n<h3 id=\"minimizer\"><a href=\"#minimizer\" class=\"headerlink\" title=\"minimizer\"></a>minimizer</h3><p>测试后只在<code>mode: production</code>时有效，可以配置 terserPlugin 的参数</p>\n<h3 id=\"splitChunks\"><a href=\"#splitChunks\" class=\"headerlink\" title=\"splitChunks\"></a>splitChunks</h3><p>用于分割代码块，提取出公用代码块。在多页面项目或者动态导入模块的时候非常有用，能减少初始加载代码的大小，提升网页首屏的加载速度。</p>\n<p><code>splitChunks</code>默认只影响按需块，当然也可以通过设置 <code>chunks: &#39;initial&#39;</code>来拆分公用初始代码块。</p>\n<blockquote>\n<p><code>splitChunks</code> 总是会提取按需块</p>\n</blockquote>\n<p>先看看 webpack 中默认的<code>splitChunks</code>设置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 可设置的值有 initial, async, all</span></span><br><span class=\"line\">      <span class=\"comment\">// all 最佳配置，当分离的块既有同步又有按需引入时，共享代码</span></span><br><span class=\"line\">      <span class=\"comment\">// initial 当分离的块既有同步又有按需引入时，不共享代码</span></span><br><span class=\"line\">      <span class=\"comment\">// async 只拆分按需引入块</span></span><br><span class=\"line\">      chunks: <span class=\"string\">\"async\"</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 当代码块大于这个值的时候就会被拆分出来</span></span><br><span class=\"line\">      minSize: <span class=\"number\">30000</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 当代码块大于这个值的时候会继续拆分（如果还可以拆分的话） 0表示不拆分</span></span><br><span class=\"line\">      maxSize: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 当代码块被引用的次数超过这个数的时候才会拆分</span></span><br><span class=\"line\">      minChunks: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 最多能拆分的按需块 &gt;= 1</span></span><br><span class=\"line\">      maxAsyncRequests: <span class=\"number\">5</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 最多能拆分的初始块 &gt;= 1  如果设置了maxSize，并且能拆分，可能会拆分出更多的块</span></span><br><span class=\"line\">      maxInitialRequests: <span class=\"number\">3</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 块文件名分隔符</span></span><br><span class=\"line\">      automaticNameDelimiter: <span class=\"string\">\"~\"</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 分割块的名字。如果传入 true 将会自动生成一个基于块组和缓存组键的名称</span></span><br><span class=\"line\">      <span class=\"comment\">// 也可以用函数生成名称</span></span><br><span class=\"line\">      <span class=\"comment\">// name (module, chunks, cacheGroupKey) &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   // generate a chunk name...</span></span><br><span class=\"line\">      <span class=\"comment\">//   return; //...</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">      name: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        vendors: &#123;</span><br><span class=\"line\">          test: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">          priority: <span class=\"number\">-10</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">default</span>: &#123;</span><br><span class=\"line\">          minChunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">          priority: <span class=\"number\">-20</span>,</span><br><span class=\"line\">          reuseExistingChunk: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"多页面分割代码\"><a href=\"#多页面分割代码\" class=\"headerlink\" title=\"多页面分割代码\"></a>多页面分割代码</h4><p><a href=\"https://github.com/kingRywen/webpack-test/tree/splitChunk\" target=\"_blank\" rel=\"noopener\">栗子地址</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> entry = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 多个入口</span></span><br><span class=\"line\">  index: <span class=\"string\">\"./src/index.js\"</span>,</span><br><span class=\"line\">  pageA: <span class=\"string\">\"./src/a.js\"</span>,</span><br><span class=\"line\">  pageB: <span class=\"string\">\"./src/b.js\"</span>,</span><br><span class=\"line\">  pageC: <span class=\"string\">\"./src/c.js\"</span>,</span><br><span class=\"line\">  pageD: <span class=\"string\">\"./src/d.js\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> _chunks = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加分离出来的runtime和node_modules中的库，以及当前页的chunk到chunk映射变量_chunks中</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(entry).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">  _chunks[key] = [key, <span class=\"string\">\"runtime\"</span>, <span class=\"string\">\"vendors\"</span>];</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> htmls = <span class=\"built_in\">Object</span>.keys(entry).map(</span><br><span class=\"line\">  name =&gt;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: name + <span class=\"string\">\".html\"</span>,</span><br><span class=\"line\">      template: <span class=\"string\">\"template.pug\"</span>,</span><br><span class=\"line\">      title: name,</span><br><span class=\"line\">      chunks: _chunks[name]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">\"production\"</span>,</span><br><span class=\"line\">  entry,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">\"dist\"</span>),</span><br><span class=\"line\">    crossOriginLoading: <span class=\"string\">\"anonymous\"</span>,</span><br><span class=\"line\">    filename: <span class=\"string\">\"[name].[contenthash].js\"</span>,</span><br><span class=\"line\">    pathinfo: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  performance: &#123;</span><br><span class=\"line\">    hints: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    minimize: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    runtimeChunk: <span class=\"string\">\"single\"</span>,</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      chunks: <span class=\"string\">\"all\"</span>,</span><br><span class=\"line\">      minSize: <span class=\"number\">30000</span>,</span><br><span class=\"line\">      maxSize: <span class=\"number\">0</span>,</span><br><span class=\"line\">      minChunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">      maxAsyncRequests: <span class=\"number\">20</span>,</span><br><span class=\"line\">      maxInitialRequests: <span class=\"number\">20</span>,</span><br><span class=\"line\">      automaticNameDelimiter: <span class=\"string\">\"~\"</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 关键命名函数，将引入次数2次以上的公共业务代码分割出来，并命名</span></span><br><span class=\"line\">      <span class=\"comment\">// 命名的同时将chunk推入_chunks中，改变入口htmlwebpack中chunks的引入</span></span><br><span class=\"line\">      name(<span class=\"built_in\">module</span>, chunks, cacheGroupKey) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> name = chunks.map(<span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el.name).join(<span class=\"string\">\"~\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; chunks.length; index++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> c = chunks[index];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (c.name &amp;&amp; _chunks[c.name] &amp;&amp; !~_chunks[c.name].indexOf(name)) &#123;</span><br><span class=\"line\">            _chunks[c.name].push(name);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 分割库代码</span></span><br><span class=\"line\">        commons: &#123;</span><br><span class=\"line\">          test: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">          name: <span class=\"string\">\"vendors\"</span>,</span><br><span class=\"line\">          chunks: <span class=\"string\">\"all\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"模块-module\"><a href=\"#模块-module\" class=\"headerlink\" title=\"模块(module)\"></a>模块(module)</h3><p>webpack 模块是管理各种文件资源的途径，通过 loader 能解析非.js 文件</p>\n<h4 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h4><h5 id=\"普通-css\"><a href=\"#普通-css\" class=\"headerlink\" title=\"普通 css\"></a>普通 css</h5><p>通过<code>import &#39;./style.css&#39;</code>方法引入样式文件，在没有配置 module 的情况下 webpack 是不会正常解析 css 文件的，所以我们必须引入<code>style-loader</code>来将引入的 css 文件解析出来。当然也要引入<code>css-loader</code>来解析 css 文件的内容,css-loader 也能解析 css 中的引入：<code>@import</code>及<code>url()</code>（可以配置不解析某些资源）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 安装</span></span><br><span class=\"line\">yarn add -D style-loader</span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          <span class=\"comment\">// 区分生产环境和开发环境,生产环境时提取css作为单独文件</span></span><br><span class=\"line\">          process.env.NODE_ENV == <span class=\"string\">'production'</span> ? MiniCssExtractPlugin.loader : <span class=\"string\">'style-loader'</span>, &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">            options:&#123;</span><br><span class=\"line\">              modules: <span class=\"literal\">true</span>, <span class=\"comment\">// css 模块化</span></span><br><span class=\"line\">              sourceMap: <span class=\"literal\">true</span> <span class=\"comment\">// 开启 sourceMap</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"sass\"><a href=\"#sass\" class=\"headerlink\" title=\"sass\"></a>sass</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 安装</span></span><br><span class=\"line\">yarn add sass-loader node-sass -D</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          process.env.NODE_ENV == <span class=\"string\">'production'</span> ? MiniCssExtractPlugin.loader : <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              sourceMap: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">'sass-loader'</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>#####　 postcss</p>\n<p>在<a href=\"http://postcss.org/\" target=\"_blank\" rel=\"noopener\">PostCSS</a>官网有着这样的对 PostCSS 特性介绍，箭头后面是对应功能的插件及其 github 地址。</p>\n<ol>\n<li>increase code readability （增加代码可读性，补全） → <a href=\"https://github.com/postcss/autoprefixer\" target=\"_blank\" rel=\"noopener\">Autoprefixer</a></li>\n<li>Use tomorrow’s CSS ,today!（使用下代 css） → <a href=\"https://github.com/MoOx/postcss-cssnext/\" target=\"_blank\" rel=\"noopener\">postcss-cssnext</a></li>\n<li>The end of global CSS（模块化 css）→ <a href=\"https://github.com/css-modules/postcss-modules\" target=\"_blank\" rel=\"noopener\">postcss-modules</a></li>\n<li>Avoid errors in your CSS（错误提示） → <a href=\"https://github.com/stylelint/stylelint\" target=\"_blank\" rel=\"noopener\">stylelint</a></li>\n<li>Powerful grid CSS（栅格系统） → lost →<a href=\"https://github.com/peterramsing/lost\" target=\"_blank\" rel=\"noopener\">lost</a></li>\n</ol>\n<h5 id=\"webpack-中使用-postcss\"><a href=\"#webpack-中使用-postcss\" class=\"headerlink\" title=\"webpack 中使用 postcss\"></a>webpack 中使用 postcss</h5><p><code>PostCSS Preset Env</code>可以将现代 CSS 转换为大多数浏览器可以理解的内容，并根据目标浏览器或运行时环境确定所需的 polyfill。</p>\n<p>启用 sourceMap 支持，postcss-loader 将使用其他加载器提供的先前的 sourceMap 并进行相应的更新。除<code>style-loader</code>之外的 loader 都需要配置<code>sourceMap: true</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 安装</span></span><br><span class=\"line\">yarn add -D postcss-preset-env</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">      use: [</span><br><span class=\"line\">      <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">\"css-loader\"</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          sourceMap: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 必须配置，影响@import导入的文件中的加载器的数量，</span></span><br><span class=\"line\">          <span class=\"comment\">// 如果不配置@import导入文件将不会应用后面的加载器</span></span><br><span class=\"line\">          importLoaders: <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'postcss-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          sourceMap: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          indent: <span class=\"string\">'postcss'</span>,</span><br><span class=\"line\">          plugins: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> [</span><br><span class=\"line\">            <span class=\"comment\">// 使用 PostCSS Preset Env</span></span><br><span class=\"line\">            <span class=\"comment\">// postcss-preset-env已经预置autoprefixer，无需单独添加它</span></span><br><span class=\"line\">            postcssPresetEnv(&#123;</span><br><span class=\"line\">              stage: <span class=\"number\">3</span>,</span><br><span class=\"line\">              <span class=\"comment\">// 支持任何标准的browserslist配置，可以是.browserslistrc文件，package.json中的browserslist或browserslist环境变量。</span></span><br><span class=\"line\">              browsers: <span class=\"string\">'last 2 versions'</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"images-图像\"><a href=\"#images-图像\" class=\"headerlink\" title=\"images 图像\"></a>images 图像</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 安装</span></span><br><span class=\"line\">yarn add -D url-loader</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|svg|jpg|gif)$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// url-loader将少于limit的图像文件转化为dataUrl来减少请求</span></span><br><span class=\"line\">        loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 当图像大于limit时，会使用备用的loader</span></span><br><span class=\"line\">          fallback: &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              name: <span class=\"string\">'img/[name].[hash:8].[ext]'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          limit: <span class=\"number\">4096</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"fonts-字体\"><a href=\"#fonts-字体\" class=\"headerlink\" title=\"fonts 字体\"></a>fonts 字体</h4><p><code>file-loader</code> 和 <code>url-loader</code> 可以接收并加载任何文件，所以也可以用来加载 fonts 字体文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">\"url-loader\"</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          fallback: &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"file-loader\"</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              name: <span class=\"string\">\"img/[name].[hash:8].[ext]\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          limit: <span class=\"number\">4096</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据-json-xml\"><a href=\"#数据-json-xml\" class=\"headerlink\" title=\"数据 json xml\"></a>数据 json xml</h4><p>加载的资源还有数据，如 JSON 文件，CSV、TSV 和 XML。类似于 NodeJS，JSON 支持实际上是内置的，也就是说 <code>import Data from &#39;./data.json&#39;</code> 默认将正常运行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+       &#123;</span><br><span class=\"line\">+         test: <span class=\"regexp\">/\\.(csv|tsv)$/</span>,</span><br><span class=\"line\">+         use: [</span><br><span class=\"line\">+           <span class=\"string\">'csv-loader'</span></span><br><span class=\"line\">+         ]</span><br><span class=\"line\">+       &#125;,</span><br><span class=\"line\">+       &#123;</span><br><span class=\"line\">+         test: <span class=\"regexp\">/\\.xml$/</span>,</span><br><span class=\"line\">+         use: [</span><br><span class=\"line\">+           <span class=\"string\">'xml-loader'</span></span><br><span class=\"line\">+         ]</span><br><span class=\"line\">+       &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><blockquote>\n<p>本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包工具。当 webpack 处理应用程序时，它会在内部构建一个<strong>依赖图(dependency graph)</strong>，此依赖图会映射项目所需的每个模块，并生成一个或多个 bundle。</p>\n</blockquote>\n<p>上面一段话摘自官方文档，由此引申出下面几个问题</p>\n<ol>\n<li>什么是依赖图？依赖图是怎么映射项目所需的模块？</li>\n<li>bundle 是什么？</li>\n</ol>","more":"<h3 id=\"依赖图\"><a href=\"#依赖图\" class=\"headerlink\" title=\"依赖图\"></a>依赖图</h3><p>webpack 开箱即用，可以无需使用任何配置文件。然而，webpack 会假定项目的入口起点为工程目录 <code>src/index</code>，然后会在 <code>dist/main.js</code> 输出结果，并且在生产环境开启压缩和优化。</p>\n<p>也就是说，在没有任何配置文件和命令行传参的情况下，会有一个默认的入口起点 <code>src/index</code> (如果自己配置了入口就会使用配置好的)，直接执行</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack</span><br></pre></td></tr></table></figure>\n<p>webpack 会将 <code>mode</code> 的默认值设置为 <code>production</code>并开始打包，从 入口起点 开始，webpack 递归地构建一个依赖图，这个依赖图包含着应用程序所需的每个模块，然后将所有这些模块打包为少量的 bundle - 通常只有一个 - 可由浏览器加载。</p>\n<p>所以依赖图的生成是首先取决于入口文件，当然，在入口文件中如果也引入了其它文件，那么其它文件也会变成依赖图一部分。</p>\n<h3 id=\"bundle\"><a href=\"#bundle\" class=\"headerlink\" title=\"bundle\"></a>bundle</h3><p>bundle 就是 webpack 生成的文件，bundle 里包含多个 chunk - 代码块，可能多个 bundle 会存在相同的代码块，所以需要用代码分离来共享相同代码块部分</p>\n<h3 id=\"process-env-NODE-ENV\"><a href=\"#process-env-NODE-ENV\" class=\"headerlink\" title=\"process.env.NODE_ENV\"></a>process.env.NODE_ENV</h3><p>在 wepback4 中，存在两种模式，<code>development</code>、<code>production</code>，webpack 自动会引入<code>definePlugin</code>，这个插件会决定在开发环境与生产环境(dev-vs-prod)下，server tools(服务期工具)、build scripts(构建脚本) 和 client-side libraries(客户端库) <code>process.env.NODE_ENV</code>的值，然而，在 <code>webpack.config.js</code> 中是不会存在这个值的，要在配置文件中使用<code>process.env.NODE_ENV</code>，有以下两种方法</p>\n<ul>\n<li>命令行中传入<code>--env.NODE_ENV production|development</code>， <code>webpack.config.js</code> 中导出函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">env</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(env.NODE_ENV); <span class=\"comment\">// production|development</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>cross-env</code>传参</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 安装cross-env</span></span><br><span class=\"line\">yarn add -D cross-env</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\">cross-env NODE_ENV=production webpack ./webpack.config.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(process.env.NODE_ENV) <span class=\"comment\">// production|development</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"入口-entry\"><a href=\"#入口-entry\" class=\"headerlink\" title=\"入口 entry\"></a>入口 entry</h2><p>入口的写法，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// normal</span></span><br><span class=\"line\">  entry: <span class=\"string\">'./path/to/my/entry/file.js'</span></span><br><span class=\"line\">  <span class=\"comment\">// 对象语法</span></span><br><span class=\"line\">  <span class=\"comment\">// 使用 optimization.splitChunks 为页面间共享的应用程序代码创建 bundle。</span></span><br><span class=\"line\">  <span class=\"comment\">// 由于入口起点增多，多页应用能够复用入口起点之间的大量代码/模块</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果输出为library 可以使用 array 语法暴露所有模块</span></span><br><span class=\"line\">  <span class=\"comment\">// 参考 https://github.com/webpack/webpack/tree/master/examples/multi-part-library</span></span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    main: <span class=\"string\">'./path/to/my/entry/file.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 数组</span></span><br><span class=\"line\">  <span class=\"comment\">// 这样传会合并多个文件为一个bundle文件</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果输出为library时只会暴露最后一个模块</span></span><br><span class=\"line\">  entry: [<span class=\"string\">'path1'</span>, <span class=\"string\">'path2'</span>]</span><br><span class=\"line\">  <span class=\"comment\">// 动态入口 可以接收远程服务器的数据来决定入口，感觉没什么用</span></span><br><span class=\"line\">  entry: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"string\">'./demo'</span></span><br><span class=\"line\">  <span class=\"comment\">// 或</span></span><br><span class=\"line\">  entry: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> resolve([<span class=\"string\">'./demo'</span>, <span class=\"string\">'./demo2'</span>]))</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出-output\"><a href=\"#输出-output\" class=\"headerlink\" title=\"输出 output\"></a>输出 output</h2><p>输出主要是告诉 webpack 打包后的 bundle 放在哪里，以及如何命名这些文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">// normal</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">\"dist\"</span>), <span class=\"comment\">// 打包后的目录 URL以HTML页面为基准</span></span><br><span class=\"line\">    filename: <span class=\"string\">\"my-first-webpack.bundle.js\"</span>, <span class=\"comment\">// 文件命名</span></span><br><span class=\"line\">    publicPath: <span class=\"string\">\"assets/\"</span>, <span class=\"comment\">// 相对于 html 页面</span></span><br><span class=\"line\">    publicPath: <span class=\"string\">\"/assets/\"</span> <span class=\"comment\">// 相对于服务器根目录</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 多个入口起点 使用占位符</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">\"[name].js\"</span></span><br><span class=\"line\">    <span class=\"comment\">// 输出文件 ./dist/name1.js  ./dist/name2.js</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// cdn hash</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"/home/proj/cdn/assets/[hash]\"</span>, <span class=\"comment\">// 此处打包后会生成到硬盘根路径</span></span><br><span class=\"line\">    publicPath: <span class=\"string\">\"http://cdn.example.com/assets/[hash]/\"</span> <span class=\"comment\">// cdn路径</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在运行时设置-publicPath\"><a href=\"#在运行时设置-publicPath\" class=\"headerlink\" title=\"在运行时设置 publicPath\"></a>在运行时设置 publicPath</h3><p>所谓运行时，即在打包完成后运行应用程序的时候。一般在 output 中配置的 publicPath 是固定的，但是，我们可能需要在运行的时候动态加载 publicPath,webpack 暴露了一个名为 <strong>webpack_public_path</strong> 的全局变量，通过改变这个变量的值达到我们的目的。</p>\n<ol>\n<li>创建一个文件<code>public_path.js</code></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__webpack_public_path__ = <span class=\"string\">\"http://some.cdn.com/some\"</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在入口文件中引入</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// entry.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"public_path.js\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"./app.js\"</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果在 entry 文件中使用 ES2015 module import，则会在 import 之后进行 <strong>webpack_public_path</strong> 赋值。在这种情况下，你必须将 public path 赋值移至一个专用模块中，然后将它的 import 语句放置到 entry.js 最上面</p>\n</blockquote>\n<h3 id=\"chunkFilename\"><a href=\"#chunkFilename\" class=\"headerlink\" title=\"chunkFilename\"></a>chunkFilename</h3><p>定义非入口 chunk 文件的名称。这个在动态导入时可以设置分出来的文件名</p>\n<p>如下，在文件中使用 import()时，webpack 会在打包时将 a.js 分离出去，成为一个新的文件，这个文件在没有设置 chunkFilename 时会自动使用<code>[模块id].js</code>命名(如果注释名存在则使用注释名), 当然，使用注释命名也可以</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// entry.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">'./a.js'</span>) <span class=\"comment\">// 输出文件 0.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: \"chunk1\" */</span><span class=\"string\">'./a.js'</span>) <span class=\"comment\">// 输出文件 chunk1.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置chunkFilename后</span></span><br><span class=\"line\">output: &#123;</span><br><span class=\"line\">  chunkFilename: <span class=\"string\">'[name].[chunkhash].js'</span> <span class=\"comment\">// name 一般是模块id 如果有注释名则使用注释名</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">// 0.[chunkhash].js</span></span><br><span class=\"line\"><span class=\"comment\">// chunk1.[chunkhash].js</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"crossOriginLoading-jsonpScriptType-chunkLoadTimeout\"><a href=\"#crossOriginLoading-jsonpScriptType-chunkLoadTimeout\" class=\"headerlink\" title=\"crossOriginLoading | jsonpScriptType | chunkLoadTimeout\"></a>crossOriginLoading | jsonpScriptType | chunkLoadTimeout</h3><p>crossOriginLoading，只用于 <code>target</code> 是 <code>web</code>，使用了通过 script 标签的 JSONP 来按需加载 chunk。通过加载资源的 origin 信息来判断是否跨域，比如在 cdn 加载 chunk 的时候肯定是跨域的，那么此设置就会生效</p>\n<p>jsonpScriptType 设置 jsonp 中 script 的 type 属性</p>\n<p>chunkLoadTimeout 设置 script 中超时时间，默认 120s</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (script.src.indexOf(<span class=\"built_in\">window</span>.location.origin + <span class=\"string\">\"/\"</span>) !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  script.crossOrigin = <span class=\"string\">\"anonymous\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"filename-中的-chunkhash-contenthash\"><a href=\"#filename-中的-chunkhash-contenthash\" class=\"headerlink\" title=\"filename 中的 chunkhash contenthash\"></a>filename 中的 chunkhash contenthash</h3><p>chunkhash 和 contenthash 的区别在于，都是 chunk 内容，不过 contenthash 是通过<code>ExtractTextWebpackPlugin</code>提取出来的，如果 js 文件改变打包后 css 内容即使没变 css hash 也会改变</p>\n<h3 id=\"libraryTarget\"><a href=\"#libraryTarget\" class=\"headerlink\" title=\"libraryTarget\"></a>libraryTarget</h3><p>配置如何暴露 library。</p>\n<ol>\n<li><strong>var</strong>. （默认值）当 library 加载完成，入口起点的返回值将分配给 library 变量，会覆盖掉已经定义过的全局变量（谨慎使用）</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output.library = <span class=\"string\">\"someLibName\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 打包后，加载完库后会把库对象分配给全局变量 someLibName</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> someLibName = <span class=\"built_in\">module</span>.exports; <span class=\"comment\">// 输出结果，如果在之前存在全局变量someLibName会覆盖</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><strong>assign</strong>. 比 <code>&#39;var&#39;</code>少了个 var，可以说没区别</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">someLibName = <span class=\"built_in\">module</span>.exports; <span class=\"comment\">// 输出结果</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><strong>this</strong>.</li>\n</ol>\n<ul>\n<li>output.library 没有赋值，webpack 将把 library 对象上所有的属性挂载到浏览器的 this 上，也就是 window</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e, a</span>) </span>&#123; <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> a) e[i] = a[i]; &#125;(<span class=\"keyword\">this</span>, <span class=\"built_in\">module</span>.exports)</span><br><span class=\"line\"><span class=\"comment\">// 遍历exports对象并挂载到this</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>output.library = &#39;someLibName&#39;</code>则会将对象挂载到<code>this[&#39;someLibName&#39;]</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>[<span class=\"string\">\"someLibName\"</span>] = <span class=\"built_in\">module</span>.exports;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><strong>window</strong> 同上</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>[<span class=\"string\">\"someLibName\"</span>] = <span class=\"built_in\">module</span>.exports;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li><strong>global</strong> 分配给 global 对象</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global[<span class=\"string\">\"someLibName\"</span>] = <span class=\"built_in\">module</span>.exports;</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li><strong>commonjs</strong> 分配给 exports 对象。这个名称也意味着，模块用于 CommonJS 环境</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports[<span class=\"string\">\"someLibName\"</span>] = <span class=\"built_in\">module</span>.exports;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"someLibName\"</span>).doSomething();</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li><strong>commonjs2</strong> 模块定义系统.用于<code>CommonJS</code>系统，入口起点的返回值将分配给 <code>module.exports</code> 对象</li>\n</ol>\n<p>与<code>commonjs</code>的区别是不用指定 output.library</p>\n<blockquote>\n<p>模块定义系统会使 <code>bundle</code> 带有更多的头部处理，以便兼容各种模块系统</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = _entry_return_;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"MyLibrary\"</span>).doSomething();</span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li><strong>amd</strong> 将 library 导出为 AMD 模块</li>\n</ol>\n<p>可以由 RequireJS 或任何兼容的模块加载器加载。直接加载会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MyLibrary.js</span></span><br><span class=\"line\">define(<span class=\"string\">\"MyLibrary\"</span>, [], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _entry_return_;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 浏览器 使用前需要先引入RequireJS</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"MyLibrary\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">MyLibrary</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 library 做一些事……</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li><strong>umd</strong> 将 library 导出为所有的模块定义下都可运行的方式。既可以在 CommonJS, AMD 环境下运行，也可以在浏览器环境下且无需 requireJS 的情况下运行。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack配置</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    library: <span class=\"string\">\"MyLibrary\"</span>, <span class=\"comment\">// 如果不设置的话，webpack会把exports对象上的所有属性挂载到全局变量上</span></span><br><span class=\"line\">    libraryTarget: <span class=\"string\">\"umd\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 也可以给每个导出环境配置不同的名称</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    library: &#123;</span><br><span class=\"line\">      root: <span class=\"string\">\"MyLibrary\"</span>,</span><br><span class=\"line\">      amd: <span class=\"string\">\"my-library\"</span>,</span><br><span class=\"line\">      commonjs: <span class=\"string\">\"my-common-library\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    libraryTarget: <span class=\"string\">\"umd\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MyLibrary.js</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">webpackUniversalModuleDefinition</span>(<span class=\"params\">root, factory</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> exports === <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> === <span class=\"string\">\"object\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = factory();</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">\"function\"</span> &amp;&amp; define.amd) define([], factory);</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> exports === <span class=\"string\">\"object\"</span>) exports[<span class=\"string\">\"MyLibrary\"</span>] = factory();</span><br><span class=\"line\">  <span class=\"keyword\">else</span> root[<span class=\"string\">\"MyLibrary\"</span>] = factory();</span><br><span class=\"line\">&#125;)(<span class=\"keyword\">typeof</span> self !== <span class=\"string\">\"undefined\"</span> ? self : <span class=\"keyword\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _entry_return_; <span class=\"comment\">// 此模块返回值，是入口 chunk 返回的值</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li><strong>jsonp</strong> 将导出结果包裹在以 library 变量作为函数名的容器中</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library: <span class=\"string\">\"MyLibrary\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MyLibrary.js</span></span><br><span class=\"line\">MyLibrary(_entry_return_);</span><br></pre></td></tr></table></figure>\n<h3 id=\"exports、module-exports-和-export、export-default\"><a href=\"#exports、module-exports-和-export、export-default\" class=\"headerlink\" title=\"exports、module.exports 和 export、export default\"></a>exports、module.exports 和 export、export default</h3><blockquote>\n<p>require: node 和 es6 都支持的引入<br>export / import : 只有 es6 支持的导出引入<br>module.exports / exports: 只有 node 支持的导出</p>\n</blockquote>\n<h4 id=\"node-模块\"><a href=\"#node-模块\" class=\"headerlink\" title=\"node 模块\"></a>node 模块</h4><ul>\n<li>commonjs 导入导出 nodejs 支持，浏览器不支持（引用 requirejs 也可以支持）。<strong>在 webpack 打包时，如果使用了 module.exports 作为最终输出时，在浏览器中运行是获取不到模块中的变量的</strong></li>\n</ul>\n<p>Node 里面的模块系统遵循的是 CommonJS 规范。CommonJS 定义的模块分为: 模块标识(module)、模块定义(exports) 、模块引用(require)。<br>当 Node 执行一个文件时，会为文件生成一个 exports 和 module 对象，而 module 对象的 exports 属性和 exports 指向同一个内存地址。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports = <span class=\"built_in\">module</span>.exports = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n<p>当 Node 导入某个文件模块时，实际上是导入文件的 module.exports 属性。重新给 exports 属性赋一个对象会导致 exports 属性与 module.exports 断开连接。</p>\n<ul>\n<li>es6 导入导出 主要用于浏览器加载模块，当然 nodejs 也支持<ol>\n<li>export 与 export default 均可用于导出常量、函数、文件、模块等</li>\n<li>在一个文件或模块中，export、import 可以有多个，export default 仅有一个</li>\n<li>通过 export 方式导出，在导入时要加{ }，export default 则不需要</li>\n<li>export 能直接导出变量表达式，export default 不行。</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// testEs6Export.js</span></span><br><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//导出变量</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> a = <span class=\"string\">\"100\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//导出方法</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> dogSay = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"wang wang\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//导出方法第二种</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">catSay</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"miao miao\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; catSay &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//export default导出</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> m = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; dogSay, catSay &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./testEs6Export\"</span>; <span class=\"comment\">//导出了 export 方法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> m <span class=\"keyword\">from</span> <span class=\"string\">\"./testEs6Export\"</span>; <span class=\"comment\">//导出了 export default</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> testModule <span class=\"keyword\">from</span> <span class=\"string\">\"./testEs6Export\"</span>; <span class=\"comment\">//as 集合成对象导出</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(testModule.m); <span class=\"comment\">// undefined , 因为  as 导出是 把 零散的 export 聚集在一起作为一个对象，而export default 是导出为 default属性。</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(testModule.default); <span class=\"comment\">// 100</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"commonjs-vs-commonjs2\"><a href=\"#commonjs-vs-commonjs2\" class=\"headerlink\" title=\"commonjs vs commonjs2\"></a>commonjs vs commonjs2</h4><p>那么 webpack 打包 library 时 commonjs 与 commonjs2 的区别就是 commonjs 必须赋值一个变量作为 exports 的属性，commonjs2 则是直接导出为 <code>module.exports</code> 的对象</p>\n<h4 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h4><p>利用缓存技术可以合理利用浏览器缓存减少请求，加快网站的加载速度。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 改为contenthash 通过内容来映射hash,内容变化则hash变，内容不变hash不变</span></span><br><span class=\"line\">    filename: <span class=\"string\">\"[name].[contenthash].js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 分离runtime</span></span><br><span class=\"line\">    runtimeChunk: <span class=\"string\">\"single\"</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 将第三方库提取到单独的vendor文件中</span></span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        vendor: &#123;</span><br><span class=\"line\">          test: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">          name: <span class=\"string\">\"vendors\"</span>,</span><br><span class=\"line\">          chunks: <span class=\"string\">\"all\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> webpack.HashedModuleIdsPlugin() <span class=\"comment\">// 保持内容不变的情况下hash也不变</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"output-umdNamedDefine\"><a href=\"#output-umdNamedDefine\" class=\"headerlink\" title=\"output.umdNamedDefine\"></a>output.umdNamedDefine</h3><p>当使用了 <code>libraryTarget: &quot;umd&quot;</code>，设置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    umdNamedDefine: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打包后</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">\"function\"</span> &amp;&amp; define.amd)</span><br><span class=\"line\">  define(<span class=\"string\">\"someLibName\"</span> <span class=\"comment\">/*这里会加上library字段的值*/</span>, [], factory);</span><br></pre></td></tr></table></figure>\n<h3 id=\"output-pathinfo\"><a href=\"#output-pathinfo\" class=\"headerlink\" title=\"output.pathinfo\"></a>output.pathinfo</h3><p>开启后多了下面的注释部分，会导致造成垃圾回收性能压力，建议还是关闭</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"string\">\"tjUo\"</span>:</span><br><span class=\"line\"><span class=\"comment\">/*!**********************!*\\</span></span><br><span class=\"line\"><span class=\"comment\">  !*** ./src/index.js ***!</span></span><br><span class=\"line\"><span class=\"comment\">  \\**********************/</span></span><br><span class=\"line\"><span class=\"comment\">/*! exports provided: a */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"模式-mode\"><a href=\"#模式-mode\" class=\"headerlink\" title=\"模式 mode\"></a>模式 mode</h2><blockquote>\n<p>值有：<code>none</code>, <code>development</code>, <code>production</code>（默认）。设置 <code>NODE_ENV</code> 并不会自动地设置 mode。</p>\n</blockquote>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置文件</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cli传参</span></span><br><span class=\"line\">webpack --mode=development</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>development</td>\n<td style=\"text-align:left\">会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。</td>\n</tr>\n<tr>\n<td>production</td>\n<td style=\"text-align:left\">会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 TerserPlugin。</td>\n</tr>\n<tr>\n<td>none</td>\n<td style=\"text-align:left\">退出任何默认优化选项.</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"mode-development\"><a href=\"#mode-development\" class=\"headerlink\" title=\"mode: development\"></a><code>mode: development</code></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.development.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">+ mode: <span class=\"string\">'development'</span></span><br><span class=\"line\">- devtool: <span class=\"string\">'eval'</span>,</span><br><span class=\"line\">- cache: <span class=\"literal\">true</span>, <span class=\"comment\">// 缓存生成的 webpack 模块和 chunk，来改善构建速度。缓存默认在观察模式(watch mode)启用</span></span><br><span class=\"line\">- performance: &#123;</span><br><span class=\"line\">-   hints: <span class=\"literal\">false</span> <span class=\"comment\">// false | \"error\" | \"warning\" 是否开启打包后文件过大的性能提示 false不开启，warning 展示警告 error展示错误(开发环境中会展示在浏览器的工作台中)。文件大小可以限制可以自由配置</span></span><br><span class=\"line\">- &#125;,</span><br><span class=\"line\">- output: &#123;</span><br><span class=\"line\">-   pathinfo: <span class=\"literal\">true</span></span><br><span class=\"line\">- &#125;,</span><br><span class=\"line\">- optimization: &#123;</span><br><span class=\"line\">-   namedModules: <span class=\"literal\">true</span>,</span><br><span class=\"line\">-   namedChunks: <span class=\"literal\">true</span>,</span><br><span class=\"line\">-   nodeEnv: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">-   flagIncludedChunks: <span class=\"literal\">false</span>,</span><br><span class=\"line\">-   occurrenceOrder: <span class=\"literal\">false</span>,</span><br><span class=\"line\">-   sideEffects: <span class=\"literal\">false</span>,</span><br><span class=\"line\">-   usedExports: <span class=\"literal\">false</span>,</span><br><span class=\"line\">-   concatenateModules: <span class=\"literal\">false</span>,</span><br><span class=\"line\">-   splitChunks: &#123;</span><br><span class=\"line\">-     hidePathInfo: <span class=\"literal\">false</span>,</span><br><span class=\"line\">-     minSize: <span class=\"number\">10000</span>,</span><br><span class=\"line\">-     maxAsyncRequests: <span class=\"literal\">Infinity</span>,</span><br><span class=\"line\">-     maxInitialRequests: <span class=\"literal\">Infinity</span>,</span><br><span class=\"line\">-   &#125;,</span><br><span class=\"line\">-   noEmitOnErrors: <span class=\"literal\">false</span>,  <span class=\"comment\">// 设置为true 则会在编译出错时跳过生成阶段，避免生成错误打包文件</span></span><br><span class=\"line\">-   checkWasmTypes: <span class=\"literal\">false</span>,</span><br><span class=\"line\">-   minimize: <span class=\"literal\">false</span>,</span><br><span class=\"line\">- &#125;,</span><br><span class=\"line\">- plugins: [</span><br><span class=\"line\">-   <span class=\"keyword\">new</span> webpack.NamedModulesPlugin(),</span><br><span class=\"line\">-   <span class=\"keyword\">new</span> webpack.NamedChunksPlugin(),</span><br><span class=\"line\">-   <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123; <span class=\"string\">\"process.env.NODE_ENV\"</span>: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">\"development\"</span>) &#125;),</span><br><span class=\"line\">- ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"optimization\"><a href=\"#optimization\" class=\"headerlink\" title=\"optimization\"></a>optimization</h2><p>webpack 4 特有的优化选项，可以进行压缩代码，分包等操作</p>\n<h3 id=\"minimize\"><a href=\"#minimize\" class=\"headerlink\" title=\"minimize\"></a>minimize</h3><p>开启后使用<a href=\"https://webpack.docschina.org/plugins/terser-webpack-plugin/\" target=\"_blank\" rel=\"noopener\">TerserPlugin</a>压缩。<code>mode:production</code>时自动开启</p>\n<h3 id=\"minimizer\"><a href=\"#minimizer\" class=\"headerlink\" title=\"minimizer\"></a>minimizer</h3><p>测试后只在<code>mode: production</code>时有效，可以配置 terserPlugin 的参数</p>\n<h3 id=\"splitChunks\"><a href=\"#splitChunks\" class=\"headerlink\" title=\"splitChunks\"></a>splitChunks</h3><p>用于分割代码块，提取出公用代码块。在多页面项目或者动态导入模块的时候非常有用，能减少初始加载代码的大小，提升网页首屏的加载速度。</p>\n<p><code>splitChunks</code>默认只影响按需块，当然也可以通过设置 <code>chunks: &#39;initial&#39;</code>来拆分公用初始代码块。</p>\n<blockquote>\n<p><code>splitChunks</code> 总是会提取按需块</p>\n</blockquote>\n<p>先看看 webpack 中默认的<code>splitChunks</code>设置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 可设置的值有 initial, async, all</span></span><br><span class=\"line\">      <span class=\"comment\">// all 最佳配置，当分离的块既有同步又有按需引入时，共享代码</span></span><br><span class=\"line\">      <span class=\"comment\">// initial 当分离的块既有同步又有按需引入时，不共享代码</span></span><br><span class=\"line\">      <span class=\"comment\">// async 只拆分按需引入块</span></span><br><span class=\"line\">      chunks: <span class=\"string\">\"async\"</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 当代码块大于这个值的时候就会被拆分出来</span></span><br><span class=\"line\">      minSize: <span class=\"number\">30000</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 当代码块大于这个值的时候会继续拆分（如果还可以拆分的话） 0表示不拆分</span></span><br><span class=\"line\">      maxSize: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 当代码块被引用的次数超过这个数的时候才会拆分</span></span><br><span class=\"line\">      minChunks: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 最多能拆分的按需块 &gt;= 1</span></span><br><span class=\"line\">      maxAsyncRequests: <span class=\"number\">5</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 最多能拆分的初始块 &gt;= 1  如果设置了maxSize，并且能拆分，可能会拆分出更多的块</span></span><br><span class=\"line\">      maxInitialRequests: <span class=\"number\">3</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 块文件名分隔符</span></span><br><span class=\"line\">      automaticNameDelimiter: <span class=\"string\">\"~\"</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 分割块的名字。如果传入 true 将会自动生成一个基于块组和缓存组键的名称</span></span><br><span class=\"line\">      <span class=\"comment\">// 也可以用函数生成名称</span></span><br><span class=\"line\">      <span class=\"comment\">// name (module, chunks, cacheGroupKey) &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   // generate a chunk name...</span></span><br><span class=\"line\">      <span class=\"comment\">//   return; //...</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">      name: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        vendors: &#123;</span><br><span class=\"line\">          test: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">          priority: <span class=\"number\">-10</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">default</span>: &#123;</span><br><span class=\"line\">          minChunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">          priority: <span class=\"number\">-20</span>,</span><br><span class=\"line\">          reuseExistingChunk: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"多页面分割代码\"><a href=\"#多页面分割代码\" class=\"headerlink\" title=\"多页面分割代码\"></a>多页面分割代码</h4><p><a href=\"https://github.com/kingRywen/webpack-test/tree/splitChunk\" target=\"_blank\" rel=\"noopener\">栗子地址</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> entry = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 多个入口</span></span><br><span class=\"line\">  index: <span class=\"string\">\"./src/index.js\"</span>,</span><br><span class=\"line\">  pageA: <span class=\"string\">\"./src/a.js\"</span>,</span><br><span class=\"line\">  pageB: <span class=\"string\">\"./src/b.js\"</span>,</span><br><span class=\"line\">  pageC: <span class=\"string\">\"./src/c.js\"</span>,</span><br><span class=\"line\">  pageD: <span class=\"string\">\"./src/d.js\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> _chunks = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加分离出来的runtime和node_modules中的库，以及当前页的chunk到chunk映射变量_chunks中</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(entry).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">  _chunks[key] = [key, <span class=\"string\">\"runtime\"</span>, <span class=\"string\">\"vendors\"</span>];</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> htmls = <span class=\"built_in\">Object</span>.keys(entry).map(</span><br><span class=\"line\">  name =&gt;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: name + <span class=\"string\">\".html\"</span>,</span><br><span class=\"line\">      template: <span class=\"string\">\"template.pug\"</span>,</span><br><span class=\"line\">      title: name,</span><br><span class=\"line\">      chunks: _chunks[name]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">\"production\"</span>,</span><br><span class=\"line\">  entry,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">\"dist\"</span>),</span><br><span class=\"line\">    crossOriginLoading: <span class=\"string\">\"anonymous\"</span>,</span><br><span class=\"line\">    filename: <span class=\"string\">\"[name].[contenthash].js\"</span>,</span><br><span class=\"line\">    pathinfo: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  performance: &#123;</span><br><span class=\"line\">    hints: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    minimize: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    runtimeChunk: <span class=\"string\">\"single\"</span>,</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      chunks: <span class=\"string\">\"all\"</span>,</span><br><span class=\"line\">      minSize: <span class=\"number\">30000</span>,</span><br><span class=\"line\">      maxSize: <span class=\"number\">0</span>,</span><br><span class=\"line\">      minChunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">      maxAsyncRequests: <span class=\"number\">20</span>,</span><br><span class=\"line\">      maxInitialRequests: <span class=\"number\">20</span>,</span><br><span class=\"line\">      automaticNameDelimiter: <span class=\"string\">\"~\"</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 关键命名函数，将引入次数2次以上的公共业务代码分割出来，并命名</span></span><br><span class=\"line\">      <span class=\"comment\">// 命名的同时将chunk推入_chunks中，改变入口htmlwebpack中chunks的引入</span></span><br><span class=\"line\">      name(<span class=\"built_in\">module</span>, chunks, cacheGroupKey) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> name = chunks.map(<span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el.name).join(<span class=\"string\">\"~\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; chunks.length; index++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> c = chunks[index];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (c.name &amp;&amp; _chunks[c.name] &amp;&amp; !~_chunks[c.name].indexOf(name)) &#123;</span><br><span class=\"line\">            _chunks[c.name].push(name);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 分割库代码</span></span><br><span class=\"line\">        commons: &#123;</span><br><span class=\"line\">          test: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">          name: <span class=\"string\">\"vendors\"</span>,</span><br><span class=\"line\">          chunks: <span class=\"string\">\"all\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"模块-module\"><a href=\"#模块-module\" class=\"headerlink\" title=\"模块(module)\"></a>模块(module)</h3><p>webpack 模块是管理各种文件资源的途径，通过 loader 能解析非.js 文件</p>\n<h4 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h4><h5 id=\"普通-css\"><a href=\"#普通-css\" class=\"headerlink\" title=\"普通 css\"></a>普通 css</h5><p>通过<code>import &#39;./style.css&#39;</code>方法引入样式文件，在没有配置 module 的情况下 webpack 是不会正常解析 css 文件的，所以我们必须引入<code>style-loader</code>来将引入的 css 文件解析出来。当然也要引入<code>css-loader</code>来解析 css 文件的内容,css-loader 也能解析 css 中的引入：<code>@import</code>及<code>url()</code>（可以配置不解析某些资源）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 安装</span></span><br><span class=\"line\">yarn add -D style-loader</span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          <span class=\"comment\">// 区分生产环境和开发环境,生产环境时提取css作为单独文件</span></span><br><span class=\"line\">          process.env.NODE_ENV == <span class=\"string\">'production'</span> ? MiniCssExtractPlugin.loader : <span class=\"string\">'style-loader'</span>, &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">            options:&#123;</span><br><span class=\"line\">              modules: <span class=\"literal\">true</span>, <span class=\"comment\">// css 模块化</span></span><br><span class=\"line\">              sourceMap: <span class=\"literal\">true</span> <span class=\"comment\">// 开启 sourceMap</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"sass\"><a href=\"#sass\" class=\"headerlink\" title=\"sass\"></a>sass</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 安装</span></span><br><span class=\"line\">yarn add sass-loader node-sass -D</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          process.env.NODE_ENV == <span class=\"string\">'production'</span> ? MiniCssExtractPlugin.loader : <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              sourceMap: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">'sass-loader'</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>#####　 postcss</p>\n<p>在<a href=\"http://postcss.org/\" target=\"_blank\" rel=\"noopener\">PostCSS</a>官网有着这样的对 PostCSS 特性介绍，箭头后面是对应功能的插件及其 github 地址。</p>\n<ol>\n<li>increase code readability （增加代码可读性，补全） → <a href=\"https://github.com/postcss/autoprefixer\" target=\"_blank\" rel=\"noopener\">Autoprefixer</a></li>\n<li>Use tomorrow’s CSS ,today!（使用下代 css） → <a href=\"https://github.com/MoOx/postcss-cssnext/\" target=\"_blank\" rel=\"noopener\">postcss-cssnext</a></li>\n<li>The end of global CSS（模块化 css）→ <a href=\"https://github.com/css-modules/postcss-modules\" target=\"_blank\" rel=\"noopener\">postcss-modules</a></li>\n<li>Avoid errors in your CSS（错误提示） → <a href=\"https://github.com/stylelint/stylelint\" target=\"_blank\" rel=\"noopener\">stylelint</a></li>\n<li>Powerful grid CSS（栅格系统） → lost →<a href=\"https://github.com/peterramsing/lost\" target=\"_blank\" rel=\"noopener\">lost</a></li>\n</ol>\n<h5 id=\"webpack-中使用-postcss\"><a href=\"#webpack-中使用-postcss\" class=\"headerlink\" title=\"webpack 中使用 postcss\"></a>webpack 中使用 postcss</h5><p><code>PostCSS Preset Env</code>可以将现代 CSS 转换为大多数浏览器可以理解的内容，并根据目标浏览器或运行时环境确定所需的 polyfill。</p>\n<p>启用 sourceMap 支持，postcss-loader 将使用其他加载器提供的先前的 sourceMap 并进行相应的更新。除<code>style-loader</code>之外的 loader 都需要配置<code>sourceMap: true</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 安装</span></span><br><span class=\"line\">yarn add -D postcss-preset-env</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">      use: [</span><br><span class=\"line\">      <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">\"css-loader\"</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          sourceMap: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 必须配置，影响@import导入的文件中的加载器的数量，</span></span><br><span class=\"line\">          <span class=\"comment\">// 如果不配置@import导入文件将不会应用后面的加载器</span></span><br><span class=\"line\">          importLoaders: <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'postcss-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          sourceMap: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          indent: <span class=\"string\">'postcss'</span>,</span><br><span class=\"line\">          plugins: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> [</span><br><span class=\"line\">            <span class=\"comment\">// 使用 PostCSS Preset Env</span></span><br><span class=\"line\">            <span class=\"comment\">// postcss-preset-env已经预置autoprefixer，无需单独添加它</span></span><br><span class=\"line\">            postcssPresetEnv(&#123;</span><br><span class=\"line\">              stage: <span class=\"number\">3</span>,</span><br><span class=\"line\">              <span class=\"comment\">// 支持任何标准的browserslist配置，可以是.browserslistrc文件，package.json中的browserslist或browserslist环境变量。</span></span><br><span class=\"line\">              browsers: <span class=\"string\">'last 2 versions'</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"images-图像\"><a href=\"#images-图像\" class=\"headerlink\" title=\"images 图像\"></a>images 图像</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 安装</span></span><br><span class=\"line\">yarn add -D url-loader</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|svg|jpg|gif)$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// url-loader将少于limit的图像文件转化为dataUrl来减少请求</span></span><br><span class=\"line\">        loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 当图像大于limit时，会使用备用的loader</span></span><br><span class=\"line\">          fallback: &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              name: <span class=\"string\">'img/[name].[hash:8].[ext]'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          limit: <span class=\"number\">4096</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"fonts-字体\"><a href=\"#fonts-字体\" class=\"headerlink\" title=\"fonts 字体\"></a>fonts 字体</h4><p><code>file-loader</code> 和 <code>url-loader</code> 可以接收并加载任何文件，所以也可以用来加载 fonts 字体文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">\"url-loader\"</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          fallback: &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"file-loader\"</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              name: <span class=\"string\">\"img/[name].[hash:8].[ext]\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          limit: <span class=\"number\">4096</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据-json-xml\"><a href=\"#数据-json-xml\" class=\"headerlink\" title=\"数据 json xml\"></a>数据 json xml</h4><p>加载的资源还有数据，如 JSON 文件，CSV、TSV 和 XML。类似于 NodeJS，JSON 支持实际上是内置的，也就是说 <code>import Data from &#39;./data.json&#39;</code> 默认将正常运行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+       &#123;</span><br><span class=\"line\">+         test: <span class=\"regexp\">/\\.(csv|tsv)$/</span>,</span><br><span class=\"line\">+         use: [</span><br><span class=\"line\">+           <span class=\"string\">'csv-loader'</span></span><br><span class=\"line\">+         ]</span><br><span class=\"line\">+       &#125;,</span><br><span class=\"line\">+       &#123;</span><br><span class=\"line\">+         test: <span class=\"regexp\">/\\.xml$/</span>,</span><br><span class=\"line\">+         use: [</span><br><span class=\"line\">+           <span class=\"string\">'xml-loader'</span></span><br><span class=\"line\">+         ]</span><br><span class=\"line\">+       &#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clibygb3n0002f4fmeixejv08","tag_id":"clibygb3q0004f4fmihemkobe","_id":"clibygb3u0009f4fmwe8bbcav"},{"post_id":"clibygb3p0003f4fmi5p6cn34","tag_id":"clibygb3u0008f4fm1zr4cvy6","_id":"clibygb3w000df4fmw0bfz9x3"},{"post_id":"clibygb3p0003f4fmi5p6cn34","tag_id":"clibygb3v000bf4fmhap27uvp","_id":"clibygb3w000ef4fmg0pez5z5"},{"post_id":"clibygb3r0005f4fmg318jaqe","tag_id":"clibygb3w000cf4fm5wy25ia9","_id":"clibygb3x000hf4fmuw669d0a"},{"post_id":"clibygb3r0005f4fmg318jaqe","tag_id":"clibygb3w000ff4fmadpzfn82","_id":"clibygb3x000if4fmqzuowbkt"},{"post_id":"clibygb3s0006f4fmpuzrbvlb","tag_id":"clibygb3x000gf4fmvwtjpir0","_id":"clibygb3y000mf4fm95i952j8"},{"post_id":"clibygb3s0006f4fmpuzrbvlb","tag_id":"clibygb3x000jf4fmfouzi154","_id":"clibygb3y000nf4fmffy64bff"},{"post_id":"clibygb3s0006f4fmpuzrbvlb","tag_id":"clibygb3x000kf4fm8as6iqu3","_id":"clibygb3y000pf4fm1ep490mg"},{"post_id":"clibygb3t0007f4fmjb3n5q1m","tag_id":"clibygb3y000lf4fm6cmpl5xs","_id":"clibygb3z000rf4fmfyy2z95q"},{"post_id":"clibygb3t0007f4fmjb3n5q1m","tag_id":"clibygb3y000of4fmqur7mrij","_id":"clibygb3z000sf4fm2ai0ifaw"},{"post_id":"clibygb3v000af4fm7vipqei5","tag_id":"clibygb3y000qf4fmkjwaj31i","_id":"clibygb3z000tf4fmyak1oif0"},{"post_id":"clibygb5u000uf4fmkcf0yl2i","tag_id":"clibygb5y000xf4fmteznnb5l","_id":"clibygb610012f4fm8fb7v2cn"},{"post_id":"clibygb5u000uf4fmkcf0yl2i","tag_id":"clibygb60000zf4fmgaqgo5gp","_id":"clibygb610013f4fm2bqng2zy"},{"post_id":"clibygb5u000uf4fmkcf0yl2i","tag_id":"clibygb600010f4fmuzn5hvq2","_id":"clibygb620015f4fm66lhvb18"},{"post_id":"clibygb5w000wf4fm1fgh11yr","tag_id":"clibygb610011f4fmelwdq0uz","_id":"clibygb620017f4fmofmcj5qv"},{"post_id":"clibygb5w000wf4fm1fgh11yr","tag_id":"clibygb610014f4fm9dwpupex","_id":"clibygb620018f4fm5w15si5u"},{"post_id":"clibygb5z000yf4fmj3i65r0t","tag_id":"clibygb620016f4fm1hz0ay5t","_id":"clibygb630019f4fmlqt2elmu"}],"Tag":[{"name":"hexo本地更新","_id":"clibygb3q0004f4fmihemkobe"},{"name":"Git","_id":"clibygb3u0008f4fm1zr4cvy6"},{"name":"Git命令","_id":"clibygb3v000bf4fmhap27uvp"},{"name":"原生函数","_id":"clibygb3w000cf4fm5wy25ia9"},{"name":"实用","_id":"clibygb3w000ff4fmadpzfn82"},{"name":"服务器配置","_id":"clibygb3x000gf4fmvwtjpir0"},{"name":"linux","_id":"clibygb3x000jf4fmfouzi154"},{"name":"后台","_id":"clibygb3x000kf4fm8as6iqu3"},{"name":"Javascript","_id":"clibygb3y000lf4fm6cmpl5xs"},{"name":"正则表达式","_id":"clibygb3y000of4fmqur7mrij"},{"name":"CSS","_id":"clibygb3y000qf4fmkjwaj31i"},{"name":"小程序","_id":"clibygb5y000xf4fmteznnb5l"},{"name":"本地调试","_id":"clibygb60000zf4fmgaqgo5gp"},{"name":"charles代理","_id":"clibygb600010f4fmuzn5hvq2"},{"name":"工具","_id":"clibygb610011f4fmelwdq0uz"},{"name":"网站","_id":"clibygb610014f4fm9dwpupex"},{"name":"webpack","_id":"clibygb620016f4fm1hz0ay5t"}]}}